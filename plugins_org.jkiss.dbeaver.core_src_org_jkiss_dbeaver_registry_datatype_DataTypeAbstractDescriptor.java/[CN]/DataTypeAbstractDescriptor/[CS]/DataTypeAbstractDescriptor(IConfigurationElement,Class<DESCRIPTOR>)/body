{
  super(config);
  this.instanceType=instanceType;
  this.id=config.getAttribute(RegistryConstants.ATTR_ID);
  this.implType=new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));
  IConfigurationElement[] typeElements=config.getChildren(RegistryConstants.TAG_TYPE);
  for (  IConfigurationElement typeElement : typeElements) {
    String typeName=typeElement.getAttribute(RegistryConstants.ATTR_NAME);
    if (typeName != null) {
      if (typeName.equals(ALL_TYPES_PATTERN)) {
        hasAll=true;
      }
 else {
        supportedTypes.add(typeName.toLowerCase(Locale.ENGLISH));
        hasTypeNames=true;
      }
    }
 else {
      typeName=typeElement.getAttribute("kind");
      if (typeName != null) {
        try {
          supportedTypes.add(DBPDataKind.valueOf(typeName));
        }
 catch (        IllegalArgumentException e) {
          log.warn(e);
        }
        hasDataKinds=true;
      }
 else {
        typeName=typeElement.getAttribute(RegistryConstants.ATTR_STANDARD);
        if (typeName == null) {
          typeName=typeElement.getAttribute(RegistryConstants.ATTR_ID);
          if (typeName == null) {
            log.warn("Type element without name or standard type reference");
            continue;
          }
          try {
            int typeNumber=Integer.parseInt(typeName);
            supportedTypes.add(typeNumber);
            hasTypeIds=true;
          }
 catch (          NumberFormatException e) {
            log.warn("Type ID must be an integer while '" + typeName + "' was specified");
          }
        }
 else {
          try {
            Field typeField=java.sql.Types.class.getField(typeName);
            int typeNumber=typeField.getInt(null);
            supportedTypes.add(typeNumber);
            hasTypeIds=true;
          }
 catch (          Exception e) {
            log.warn("Standard type '" + typeName + "' cannot be accessed",e);
          }
        }
      }
    }
  }
  IConfigurationElement[] dsElements=config.getChildren(RegistryConstants.TAG_DATASOURCE);
  for (  IConfigurationElement dsElement : dsElements) {
    String dsId=dsElement.getAttribute(RegistryConstants.ATTR_ID);
    if (dsId == null) {
      log.warn("Datasource reference with null ID");
      continue;
    }
    DataSourceProviderDescriptor dsProvider=DataSourceProviderRegistry.getInstance().getDataSourceProvider(dsId);
    if (dsProvider == null) {
      log.warn("Datasource provider '" + dsId + "' not found. Bad data type mapping.");
      continue;
    }
    supportedDataSources.add(dsProvider);
  }
}
