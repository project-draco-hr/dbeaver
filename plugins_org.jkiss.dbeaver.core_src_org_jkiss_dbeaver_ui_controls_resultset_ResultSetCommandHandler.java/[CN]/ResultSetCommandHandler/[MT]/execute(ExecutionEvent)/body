{
  final ResultSetViewer rsv=getActiveResultSet(HandlerUtil.getActivePart(event));
  if (rsv == null) {
    return null;
  }
  String actionId=event.getCommand().getId();
  IResultSetPresentation presentation=rsv.getActivePresentation();
switch (actionId) {
case IWorkbenchCommandConstants.FILE_REFRESH:
    rsv.refresh();
  break;
case CMD_TOGGLE_MODE:
rsv.toggleMode();
break;
case CMD_SWITCH_PRESENTATION:
rsv.switchPresentation();
break;
case CMD_ROW_PREVIOUS:
case ITextEditorActionDefinitionIds.WORD_PREVIOUS:
presentation.scrollToRow(IResultSetPresentation.RowPosition.PREVIOUS);
break;
case CMD_ROW_NEXT:
case ITextEditorActionDefinitionIds.WORD_NEXT:
presentation.scrollToRow(IResultSetPresentation.RowPosition.NEXT);
break;
case CMD_ROW_FIRST:
case ITextEditorActionDefinitionIds.SELECT_WORD_PREVIOUS:
presentation.scrollToRow(IResultSetPresentation.RowPosition.FIRST);
break;
case CMD_ROW_LAST:
case ITextEditorActionDefinitionIds.SELECT_WORD_NEXT:
presentation.scrollToRow(IResultSetPresentation.RowPosition.LAST);
break;
case CMD_FETCH_PAGE:
rsv.readNextSegment();
break;
case CMD_FETCH_ALL:
rsv.readAllData();
break;
case CMD_ROW_EDIT:
if (presentation instanceof IResultSetEditor) {
((IResultSetEditor)presentation).openValueEditor(false);
}
break;
case CMD_ROW_EDIT_INLINE:
if (presentation instanceof IResultSetEditor) {
((IResultSetEditor)presentation).openValueEditor(true);
}
break;
case CMD_ROW_ADD:
rsv.addNewRow(false);
break;
case CMD_ROW_COPY:
rsv.addNewRow(true);
break;
case CMD_ROW_DELETE:
case IWorkbenchCommandConstants.EDIT_DELETE:
rsv.deleteSelectedRows();
break;
case CMD_APPLY_CHANGES:
rsv.applyChanges(null);
break;
case CMD_REJECT_CHANGES:
rsv.rejectChanges();
break;
case IWorkbenchCommandConstants.EDIT_COPY:
ResultSetUtils.copyToClipboard(presentation.copySelectionToString(false,false,false,null,DBDDisplayFormat.EDIT));
break;
case IWorkbenchCommandConstants.EDIT_PASTE:
if (presentation instanceof IResultSetEditor) {
((IResultSetEditor)presentation).pasteFromClipboard();
}
break;
case IWorkbenchCommandConstants.EDIT_CUT:
ResultSetUtils.copyToClipboard(presentation.copySelectionToString(false,false,true,null,DBDDisplayFormat.EDIT));
break;
case ITextEditorActionDefinitionIds.SMART_ENTER:
if (presentation instanceof IResultSetEditor) {
((IResultSetEditor)presentation).openValueEditor(false);
}
break;
case IWorkbenchCommandConstants.EDIT_FIND_AND_REPLACE:
FindReplaceAction action=new FindReplaceAction(DBeaverActivator.getCoreResourceBundle(),"Editor.FindReplace.",HandlerUtil.getActiveShell(event),(IFindReplaceTarget)rsv.getAdapter(IFindReplaceTarget.class));
action.run();
break;
case CMD_NAVIGATE_LINK:
final ResultSetRow row=rsv.getCurrentRow();
final DBDAttributeBinding attr=rsv.getActivePresentation().getCurrentAttribute();
if (row != null && attr != null) {
new AbstractJob("Navigate association"){
@Override protected IStatus run(DBRProgressMonitor monitor){
try {
rsv.navigateAssociation(monitor,attr,row,false);
}
 catch (DBException e) {
return GeneralUtils.makeExceptionStatus(e);
}
return Status.OK_STATUS;
}
}
.schedule();
}
break;
case IWorkbenchCommandConstants.NAVIGATE_BACKWARD_HISTORY:
{
final int hp=rsv.getHistoryPosition();
if (hp > 0) {
rsv.navigateHistory(hp - 1);
}
break;
}
case IWorkbenchCommandConstants.NAVIGATE_FORWARD_HISTORY:
{
final int hp=rsv.getHistoryPosition();
if (hp < rsv.getHistorySize() - 1) {
rsv.navigateHistory(hp + 1);
}
break;
}
}
return null;
}
