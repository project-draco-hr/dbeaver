{
  final ResultSetViewer rsv=(ResultSetViewer)getActiveResultSet(HandlerUtil.getActivePart(event));
  if (rsv == null) {
    return null;
  }
  boolean shiftPressed=event.getTrigger() instanceof Event && ((((Event)event.getTrigger()).stateMask & SWT.SHIFT) == SWT.SHIFT);
  String actionId=event.getCommand().getId();
  IResultSetPresentation presentation=rsv.getActivePresentation();
switch (actionId) {
case IWorkbenchCommandConstants.FILE_REFRESH:
    rsv.refresh();
  break;
case CMD_TOGGLE_MODE:
rsv.toggleMode();
break;
case CMD_TOGGLE_PANELS:
rsv.showPanels(!rsv.isPanelsVisible());
break;
case CMD_SWITCH_PRESENTATION:
rsv.switchPresentation();
break;
case CMD_ROW_PREVIOUS:
case ITextEditorActionDefinitionIds.WORD_PREVIOUS:
presentation.scrollToRow(IResultSetPresentation.RowPosition.PREVIOUS);
break;
case CMD_ROW_NEXT:
case ITextEditorActionDefinitionIds.WORD_NEXT:
presentation.scrollToRow(IResultSetPresentation.RowPosition.NEXT);
break;
case CMD_ROW_FIRST:
case ITextEditorActionDefinitionIds.SELECT_WORD_PREVIOUS:
presentation.scrollToRow(IResultSetPresentation.RowPosition.FIRST);
break;
case CMD_ROW_LAST:
case ITextEditorActionDefinitionIds.SELECT_WORD_NEXT:
presentation.scrollToRow(IResultSetPresentation.RowPosition.LAST);
break;
case CMD_FETCH_PAGE:
rsv.readNextSegment();
break;
case CMD_FETCH_ALL:
rsv.readAllData();
break;
case CMD_ROW_EDIT:
if (presentation instanceof IResultSetEditor) {
((IResultSetEditor)presentation).openValueEditor(false);
}
break;
case CMD_ROW_EDIT_INLINE:
if (presentation instanceof IResultSetEditor) {
((IResultSetEditor)presentation).openValueEditor(true);
}
break;
case CMD_ROW_ADD:
rsv.addNewRow(false,shiftPressed);
break;
case CMD_ROW_COPY:
rsv.addNewRow(true,shiftPressed);
break;
case CMD_ROW_DELETE:
case IWorkbenchCommandConstants.EDIT_DELETE:
rsv.deleteSelectedRows();
break;
case CMD_CELL_SET_NULL:
case CMD_CELL_RESET:
{
IResultSetSelection selection=rsv.getSelection();
for (Object cell : selection.toArray()) {
DBDAttributeBinding attr=selection.getElementAttribute(cell);
ResultSetRow row=selection.getElementRow(cell);
if (row != null && attr != null) {
ResultSetValueController valueController=new ResultSetValueController(rsv,attr,row,IValueController.EditType.NONE,null);
if (actionId.equals(CMD_CELL_SET_NULL)) {
valueController.updateValue(BaseValueManager.makeNullValue(valueController),false);
}
 else {
rsv.getModel().resetCellValue(attr,row);
}
}
}
rsv.redrawData(false);
rsv.updatePanelsContent(false);
break;
}
case CMD_APPLY_CHANGES:
rsv.applyChanges(null);
break;
case CMD_REJECT_CHANGES:
rsv.rejectChanges();
break;
case CMD_GENERATE_SCRIPT:
{
try {
final List<DBEPersistAction> sqlScript=new ArrayList<>();
try {
DBeaverUI.runInProgressService(new DBRRunnableWithProgress(){
@Override public void run(DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
List<DBEPersistAction> script=rsv.generateChangesScript(monitor);
if (script != null) {
sqlScript.addAll(script);
}
}
}
);
}
 catch (InterruptedException e) {
e.printStackTrace();
}
if (!sqlScript.isEmpty()) {
String scriptText=DBUtils.generateScript(sqlScript.toArray(new DBEPersistAction[sqlScript.size()]),false);
scriptText=SQLUtils.generateCommentLine(rsv.getExecutionContext() == null ? null : rsv.getExecutionContext().getDataSource(),"Actual parameter values may differ, what you see is a default string representation of values") + scriptText;
ViewSQLDialog dialog=new ViewSQLDialog(HandlerUtil.getActivePart(event).getSite(),rsv.getExecutionContext(),CoreMessages.editors_entity_dialog_preview_title,UIIcon.SQL_PREVIEW,scriptText);
dialog.open();
}
}
 catch (InvocationTargetException e) {
UIUtils.showErrorDialog(HandlerUtil.getActiveShell(event),"Script generation","Can't generate changes script",e.getTargetException());
}
break;
}
case CMD_COPY_COLUMN_NAMES:
{
StringBuilder buffer=new StringBuilder();
IResultSetSelection selection=rsv.getSelection();
for (DBDAttributeBinding attr : ((IResultSetSelection)selection).getSelectedAttributes()) {
if (buffer.length() > 0) {
buffer.append("\t");
}
buffer.append(attr.getName());
}
ResultSetUtils.copyToClipboard(buffer.toString());
break;
}
case CMD_COPY_ROW_NAMES:
{
StringBuilder buffer=new StringBuilder();
IResultSetSelection selection=rsv.getSelection();
for (ResultSetRow row : ((IResultSetSelection)selection).getSelectedRows()) {
if (buffer.length() > 0) {
buffer.append("\n");
}
buffer.append(row.getVisualNumber() + 1);
}
ResultSetUtils.copyToClipboard(buffer.toString());
break;
}
case IWorkbenchCommandConstants.EDIT_COPY:
ResultSetUtils.copyToClipboard(presentation.copySelectionToString(new ResultSetCopySettings(false,false,false,null,null,DBDDisplayFormat.EDIT)));
break;
case IWorkbenchCommandConstants.EDIT_PASTE:
case CoreCommands.CMD_PASTE_SPECIAL:
if (presentation instanceof IResultSetEditor) {
((IResultSetEditor)presentation).pasteFromClipboard(actionId.equals(CoreCommands.CMD_PASTE_SPECIAL));
}
break;
case IWorkbenchCommandConstants.EDIT_CUT:
ResultSetUtils.copyToClipboard(presentation.copySelectionToString(new ResultSetCopySettings(false,false,true,null,null,DBDDisplayFormat.EDIT)));
break;
case IWorkbenchCommandConstants.FILE_PRINT:
presentation.printResultSet();
break;
case ITextEditorActionDefinitionIds.SMART_ENTER:
if (presentation instanceof IResultSetEditor) {
((IResultSetEditor)presentation).openValueEditor(false);
}
break;
case IWorkbenchCommandConstants.EDIT_FIND_AND_REPLACE:
FindReplaceAction action=new FindReplaceAction(DBeaverActivator.getCoreResourceBundle(),"Editor.FindReplace.",HandlerUtil.getActiveShell(event),rsv.getAdapter(IFindReplaceTarget.class));
action.run();
break;
case CMD_NAVIGATE_LINK:
final ResultSetRow row=rsv.getCurrentRow();
final DBDAttributeBinding attr=rsv.getActivePresentation().getCurrentAttribute();
if (row != null && attr != null) {
new AbstractJob("Navigate association"){
@Override protected IStatus run(DBRProgressMonitor monitor){
try {
rsv.navigateAssociation(monitor,attr,row,false);
}
 catch (DBException e) {
return GeneralUtils.makeExceptionStatus(e);
}
return Status.OK_STATUS;
}
}
.schedule();
}
break;
case IWorkbenchCommandConstants.NAVIGATE_BACKWARD_HISTORY:
{
final int hp=rsv.getHistoryPosition();
if (hp > 0) {
rsv.navigateHistory(hp - 1);
}
break;
}
case IWorkbenchCommandConstants.NAVIGATE_FORWARD_HISTORY:
{
final int hp=rsv.getHistoryPosition();
if (hp < rsv.getHistorySize() - 1) {
rsv.navigateHistory(hp + 1);
}
break;
}
case ITextEditorActionDefinitionIds.LINE_GOTO:
{
ResultSetRow currentRow=rsv.getCurrentRow();
final int rowCount=rsv.getModel().getRowCount();
if (rowCount <= 0) {
break;
}
GotoLineDialog d=new GotoLineDialog(HandlerUtil.getActiveShell(event),"Go to Row","Enter row number (1.." + rowCount + ")",String.valueOf(currentRow == null ? 1 : currentRow.getVisualNumber() + 1),new IInputValidator(){
@Override public String isValid(String input){
try {
int i=Integer.parseInt(input);
if (i <= 0 || rowCount < i) {
return "Row number is out of range";
}
}
 catch (NumberFormatException x) {
return "Not a number";
}
return null;
}
}
);
if (d.open() == Window.OK) {
int line=Integer.parseInt(d.getValue());
rsv.setCurrentRow(rsv.getModel().getRow(line - 1));
rsv.getActivePresentation().scrollToRow(IResultSetPresentation.RowPosition.CURRENT);
}
break;
}
case CMD_FILTER_MENU:
{
rsv.showFiltersMenu();
break;
}
}
return null;
}
