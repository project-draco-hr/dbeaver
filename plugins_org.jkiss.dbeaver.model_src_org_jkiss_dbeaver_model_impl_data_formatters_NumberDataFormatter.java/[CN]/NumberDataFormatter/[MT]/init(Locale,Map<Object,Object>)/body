{
  numberFormat=(DecimalFormat)NumberFormat.getNumberInstance(locale);
  Object useGrouping=properties.get(NumberFormatSample.PROP_USE_GROUPING);
  if (useGrouping != null) {
    numberFormat.setGroupingUsed(CommonUtils.toBoolean(useGrouping));
  }
  Object maxIntDigits=properties.get(NumberFormatSample.PROP_MAX_INT_DIGITS);
  if (maxIntDigits != null) {
    numberFormat.setMaximumIntegerDigits(CommonUtils.toInt(maxIntDigits));
  }
  Object minIntDigits=properties.get(NumberFormatSample.PROP_MIN_INT_DIGITS);
  if (minIntDigits != null) {
    numberFormat.setMinimumIntegerDigits(CommonUtils.toInt(minIntDigits));
  }
  Object maxFractDigits=properties.get(NumberFormatSample.PROP_MAX_FRACT_DIGITS);
  if (maxFractDigits != null) {
    numberFormat.setMaximumFractionDigits(CommonUtils.toInt(maxFractDigits));
  }
  Object minFractDigits=properties.get(NumberFormatSample.PROP_MIN_FRACT_DIGITS);
  if (minFractDigits != null) {
    numberFormat.setMinimumFractionDigits(CommonUtils.toInt(minFractDigits));
  }
  String roundingMode=CommonUtils.toString(properties.get(NumberFormatSample.PROP_ROUNDING_MODE));
  if (!CommonUtils.isEmpty(roundingMode)) {
    try {
      numberFormat.setRoundingMode(RoundingMode.valueOf(roundingMode));
    }
 catch (    Exception e) {
    }
  }
  buffer=new StringBuffer();
  position=new FieldPosition(0);
}
