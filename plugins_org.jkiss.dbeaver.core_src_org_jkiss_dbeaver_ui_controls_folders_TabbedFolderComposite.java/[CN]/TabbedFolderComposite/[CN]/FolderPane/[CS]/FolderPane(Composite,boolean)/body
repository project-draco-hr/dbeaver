{
  this.folderList=new TabbedFolderList(parent,!last);
  GridData gd=new GridData(GridData.FILL_VERTICAL);
  if (!last) {
    gd.verticalSpan=2;
  }
  this.folderList.setLayoutData(gd);
  editorPane=UIUtils.createPlaceholder(parent,1);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=MIN_PANE_HEIGHT;
  editorPane.setLayoutData(gd);
  if (!last) {
    final Sash sash=new Sash(parent,SWT.NONE);
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.heightHint=TabbedFolderList.SECTION_DIV_HEIGHT;
    sash.setLayoutData(gd);
    sash.addPaintListener(new PaintListener(){
      @Override public void paintControl(      PaintEvent e){
        e.gc.setBackground(folderList.widgetBackground);
        e.gc.setForeground(folderList.widgetForeground);
        e.gc.fillRectangle(0,1,e.width,e.height - 2);
        e.gc.setForeground(folderList.widgetNormalShadow);
        e.gc.drawLine(0,0,e.width - 1,0);
        e.gc.drawLine(0,e.height - 1,e.width - 1,e.height - 1);
      }
    }
);
    sash.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        Rectangle sashBounds=sash.getBounds();
        int shift=e.y - sashBounds.y;
        if (shift > 0 && shift > getNextFolderPane(FolderPane.this).editorPane.getBounds().height - MIN_PANE_HEIGHT) {
          e.doit=false;
          return;
        }
        if (shift < 0 && Math.abs(shift) > editorPane.getBounds().height - MIN_PANE_HEIGHT) {
          e.doit=false;
          return;
        }
        if (Math.abs(shift) > 0) {
          TabbedFolderComposite.this.setRedraw(false);
          try {
            shiftPane(FolderPane.this,shift);
          }
  finally {
            TabbedFolderComposite.this.setRedraw(true);
          }
        }
      }
    }
);
  }
  folderList.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      onFolderSwitch(folderList.getElementAt(folderList.getSelectionIndex()).getInfo());
    }
  }
);
}
