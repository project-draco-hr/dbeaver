{
  Object value=controller.getValue();
  IValueController.EditType binaryEditType=IValueController.EditType.valueOf(controller.getExecutionContext().getDataSource().getContainer().getPreferenceStore().getString(DBeaverPreferences.RESULT_SET_BINARY_EDITOR_TYPE));
  if (binaryEditType != IValueController.EditType.EDITOR && value instanceof DBDContentCached) {
    return new TextViewDialog(controller);
  }
 else   if (value instanceof DBDContent) {
    DBDContent content=(DBDContent)value;
    Map<StreamValueManagerDescriptor,IStreamValueManager.MatchType> streamManagers=ValueManagerRegistry.getInstance().getApplicableStreamManagers(VoidProgressMonitor.INSTANCE,controller.getValueType(),content);
    List<IEditorPart> parts=new ArrayList<>();
    IEditorPart defaultPart=null;
    IStreamValueManager.MatchType defaultMatch=null;
    for (    Map.Entry<StreamValueManagerDescriptor,IStreamValueManager.MatchType> entry : streamManagers.entrySet()) {
      IStreamValueManager streamValueManager=entry.getKey().getInstance();
      try {
        IEditorPart editorPart=streamValueManager.createEditorPart(controller);
        IStreamValueManager.MatchType matchType=entry.getValue();
        if (defaultPart == null) {
          defaultPart=editorPart;
          defaultMatch=matchType;
        }
 else {
          boolean setDefault=false;
switch (matchType) {
case EXCLUSIVE:
case PRIMARY:
            setDefault=true;
          break;
case DEFAULT:
        setDefault=(defaultMatch == IStreamValueManager.MatchType.APPLIES);
      break;
default :
    break;
}
if (setDefault) {
  defaultPart=editorPart;
  defaultMatch=matchType;
}
}
parts.add(editorPart);
}
 catch (DBException e) {
log.error(e);
}
}
return ContentEditor.openEditor(controller,parts.toArray(new IEditorPart[parts.size()]),defaultPart);
}
 else {
controller.showMessage(CoreMessages.model_jdbc_unsupported_content_value_type_,true);
return null;
}
}
