{
  super.createControl(parent);
  initializeDialogUnits(parent);
  Composite searchGroup=new Composite(parent,SWT.NONE);
  searchGroup.setLayoutData(new GridData(GridData.FILL_BOTH));
  searchGroup.setLayout(new GridLayout(3,false));
  setControl(searchGroup);
  UIUtils.createControlLabel(searchGroup,CoreMessages.dialog_search_objects_label_object_name);
  searchText=new Combo(searchGroup,SWT.DROP_DOWN);
  searchText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (nameMask != null) {
    searchText.setText(nameMask);
  }
  for (  String history : searchHistory) {
    searchText.add(history);
  }
  searchText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      nameMask=searchText.getText();
      updateEnablement();
    }
  }
);
  Composite optionsGroup=new SashForm(searchGroup,SWT.NONE);
  GridLayout layout=new GridLayout(2,true);
  layout.marginHeight=0;
  layout.marginWidth=0;
  optionsGroup.setLayout(layout);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.horizontalSpan=3;
  optionsGroup.setLayoutData(gd);
{
    final DBeaverCore core=DBeaverCore.getInstance();
    Group sourceGroup=UIUtils.createControlGroup(optionsGroup,CoreMessages.dialog_search_objects_group_objects_source,1,GridData.FILL_BOTH,0);
    gd=new GridData(GridData.FILL_BOTH);
    sourceGroup.setLayoutData(gd);
    final DBNProject projectNode=core.getNavigatorModel().getRoot().getProject(core.getProjectRegistry().getActiveProject());
    DBNNode rootNode=projectNode == null ? core.getNavigatorModel().getRoot() : projectNode.getDatabases();
    dataSourceTree=new DatabaseNavigatorTree(sourceGroup,rootNode,SWT.SINGLE);
    gd=new GridData(GridData.FILL_BOTH);
    gd.heightHint=300;
    dataSourceTree.setLayoutData(gd);
    dataSourceTree.getViewer().addFilter(new ViewerFilter(){
      @Override public boolean select(      Viewer viewer,      Object parentElement,      Object element){
        if (element instanceof TreeLoadNode) {
          return true;
        }
        if (element instanceof DBNNode) {
          if (element instanceof DBNDatabaseFolder) {
            DBNDatabaseFolder folder=(DBNDatabaseFolder)element;
            Class<? extends DBSObject> folderItemsClass=folder.getChildrenClass();
            return folderItemsClass != null && DBSObjectContainer.class.isAssignableFrom(folderItemsClass);
          }
          if (element instanceof DBNLocalFolder || element instanceof DBNProjectDatabases || element instanceof DBNDataSource|| (element instanceof DBSWrapper && ((DBSWrapper)element).getObject() instanceof DBSObjectContainer)) {
            return true;
          }
        }
        return false;
      }
    }
);
    dataSourceTree.getViewer().addSelectionChangedListener(new ISelectionChangedListener(){
      @Override public void selectionChanged(      SelectionChangedEvent event){
        fillObjectTypes();
        updateEnablement();
        IStructuredSelection structSel=(IStructuredSelection)event.getSelection();
        Object object=structSel.isEmpty() ? null : structSel.getFirstElement();
        if (object instanceof DBNNode) {
          for (DBNNode node=(DBNNode)object; node != null; node=node.getParentNode()) {
            if (node instanceof DBNDataSource) {
              DBNDataSource dsNode=(DBNDataSource)node;
              dsNode.initializeNode(null,new DBRProgressListener(){
                @Override public void onTaskFinished(                IStatus status){
                  if (status.isOK()) {
                    DBeaverUI.asyncExec(new Runnable(){
                      @Override public void run(){
                        if (!dataSourceTree.isDisposed()) {
                          fillObjectTypes();
                        }
                      }
                    }
);
                  }
                }
              }
);
              break;
            }
          }
        }
      }
    }
);
  }
{
    Group settingsGroup=UIUtils.createControlGroup(optionsGroup,"Settings",2,GridData.FILL_BOTH,0);
    gd=new GridData(GridData.FILL_BOTH);
    gd.heightHint=300;
    settingsGroup.setLayoutData(gd);
{
      UIUtils.createControlLabel(settingsGroup,CoreMessages.dialog_search_objects_label_name_match);
      final Combo matchCombo=new Combo(settingsGroup,SWT.DROP_DOWN | SWT.READ_ONLY);
      matchCombo.add(CoreMessages.dialog_search_objects_combo_starts_with,SearchMetadataConstants.MATCH_INDEX_STARTS_WITH);
      matchCombo.add(CoreMessages.dialog_search_objects_combo_contains,SearchMetadataConstants.MATCH_INDEX_CONTAINS);
      matchCombo.add(CoreMessages.dialog_search_objects_combo_like,SearchMetadataConstants.MATCH_INDEX_LIKE);
      matchCombo.select(0);
      matchCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      if (matchTypeIndex >= 0) {
        matchCombo.select(matchTypeIndex);
      }
      matchCombo.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          matchTypeIndex=matchCombo.getSelectionIndex();
        }
      }
);
      matchCombo.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
      if (maxResults <= 0) {
        maxResults=100;
      }
      final Spinner maxResultsSpinner=UIUtils.createLabelSpinner(settingsGroup,CoreMessages.dialog_search_objects_spinner_max_results,maxResults,1,10000);
      maxResultsSpinner.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      maxResultsSpinner.addModifyListener(new ModifyListener(){
        @Override public void modifyText(        ModifyEvent e){
          maxResults=maxResultsSpinner.getSelection();
        }
      }
);
      maxResultsSpinner.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
      final Button caseCheckbox=UIUtils.createLabelCheckbox(settingsGroup,CoreMessages.dialog_search_objects_case_sensitive,caseSensitive);
      caseCheckbox.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          caseSensitive=caseCheckbox.getSelection();
        }
      }
);
      caseCheckbox.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
    Label otLabel=UIUtils.createControlLabel(settingsGroup,CoreMessages.dialog_search_objects_group_object_types);
    otLabel.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
    typesTable=new Table(settingsGroup,SWT.CHECK | SWT.H_SCROLL | SWT.V_SCROLL| SWT.FULL_SELECTION);
    typesTable.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        for (        TableItem item : typesTable.getItems()) {
          DBSObjectType objectType=(DBSObjectType)item.getData();
          if (item.getChecked()) {
            checkedTypes.add(objectType);
          }
 else {
            checkedTypes.remove(objectType);
          }
        }
        updateEnablement();
      }
    }
);
    typesTable.addMouseListener(new MouseAdapter(){
      @Override public void mouseDoubleClick(      MouseEvent e){
        TableItem tableItem=typesTable.getSelection()[0];
        tableItem.setChecked(!tableItem.getChecked());
      }
    }
);
    typesTable.setLayoutData(new GridData(GridData.FILL_BOTH));
    UIUtils.createTableColumn(typesTable,SWT.LEFT,CoreMessages.dialog_search_objects_column_type);
    UIUtils.createTableColumn(typesTable,SWT.LEFT,CoreMessages.dialog_search_objects_column_description);
  }
  try {
    DBeaverUI.runInProgressDialog(new DBRRunnableWithProgress(){
      @Override public void run(      DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask("Load database nodes",1);
        try {
          monitor.subTask("Load tree state");
          sourceNodes=loadTreeState(monitor,DBeaverCore.getGlobalPreferenceStore(),PROP_SOURCES);
        }
  finally {
          monitor.done();
        }
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    UIUtils.showErrorDialog(getShell(),"Data sources load","Error loading settings",e.getTargetException());
  }
  if (!sourceNodes.isEmpty()) {
    dataSourceTree.getViewer().setSelection(new StructuredSelection(sourceNodes));
    dataSourceTree.getViewer().reveal(NavigatorUtils.getDataSourceNode(sourceNodes.get(0)));
  }
 else {
    updateEnablement();
  }
}
