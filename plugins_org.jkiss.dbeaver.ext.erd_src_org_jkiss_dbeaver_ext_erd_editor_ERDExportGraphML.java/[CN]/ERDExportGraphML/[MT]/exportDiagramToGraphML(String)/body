{
  try {
    FileOutputStream fos=new FileOutputStream(filePath);
    try {
      XMLBuilder xml=new XMLBuilder(fos,"utf-8");
      xml.setButify(true);
      xml.startElement("graphml");
      xml.addAttribute("xmlns","http://graphml.graphdrawing.org/xmlns");
      xml.addAttribute("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
      xml.addAttribute("xsi:schemaLocation","http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd");
      xml.addAttribute("xmlns:y","http://www.yworks.com/xml/graphml");
      xml.startElement("key");
      xml.addAttribute("for","node");
      xml.addAttribute("id","nodegraph");
      xml.addAttribute("yfiles.type","nodegraphics");
      xml.endElement();
      xml.startElement("key");
      xml.addAttribute("for","edge");
      xml.addAttribute("id","edgegraph");
      xml.addAttribute("yfiles.type","edgegraphics");
      xml.endElement();
      xml.startElement("graph");
      xml.addAttribute("edgedefault","directed");
      xml.addAttribute("id","G");
      Map<ERDEntity,String> entityMap=new HashMap<ERDEntity,String>();
      int nodeNum=0;
      for (      ERDEntity entity : diagram.getEntities()) {
        nodeNum++;
        String nodeId="n" + nodeNum;
        entityMap.put(entity,nodeId);
        xml.startElement("node");
        xml.addAttribute("id",nodeId);
{
          xml.startElement("data");
          xml.addAttribute("key","nodegraph");
{
            EntityPart part=diagramPart.getEntityPart(entity);
            EntityFigure figure=(EntityFigure)part.getFigure();
            Rectangle partBounds=part.getBounds();
            xml.startElement("y:GenericNode");
            xml.addAttribute("configuration","com.yworks.entityRelationship.big_entity");
            xml.startElement("y:Geometry");
            xml.addAttribute("height",partBounds.height());
            xml.addAttribute("width",partBounds.width);
            xml.addAttribute("x",partBounds.x());
            xml.addAttribute("y",partBounds.y());
            xml.endElement();
            xml.startElement("y:Fill");
            xml.addAttribute("color",getHtmlColor(figure.getBackgroundColor()));
            xml.addAttribute("transparent","false");
            xml.endElement();
            xml.startElement("y:BorderStyle");
            xml.addAttribute("color",getHtmlColor(figure.getForegroundColor()));
            xml.addAttribute("type","line");
            xml.addAttribute("width","1.0");
            xml.endElement();
{
              Rectangle nameBounds=figure.getNameLabel().getBounds();
              xml.startElement("y:NodeLabel");
              xml.addAttribute("alignment","center");
              xml.addAttribute("autoSizePolicy","content");
              xml.addAttribute("configuration","com.yworks.entityRelationship.label.name");
              xml.addAttribute("fontFamily","Courier");
              xml.addAttribute("fontSize","12");
              xml.addAttribute("fontStyle","plain");
              xml.addAttribute("hasLineColor","false");
              xml.addAttribute("modelName","internal");
              xml.addAttribute("modelPosition","t");
              xml.addAttribute("backgroundColor",getHtmlColor(figure.getNameLabel().getBackgroundColor()));
              xml.addAttribute("textColor",getHtmlColor(figure.getNameLabel().getForegroundColor()));
              xml.addAttribute("visible","true");
              xml.addAttribute("height",nameBounds.height());
              xml.addAttribute("width",nameBounds.width);
              xml.addAttribute("x",nameBounds.x());
              xml.addAttribute("y",nameBounds.y());
              xml.addText(entity.getName());
              xml.endElement();
            }
{
              AttributeListFigure columnsFigure=figure.getColumnsFigure();
              Rectangle attrsBounds=columnsFigure.getBounds();
              FontData attrsFont=columnsFigure.getFont().getFontData()[0];
              xml.startElement("y:NodeLabel");
              xml.addAttribute("alignment","left");
              xml.addAttribute("autoSizePolicy","content");
              xml.addAttribute("configuration","com.yworks.entityRelationship.label.attributes");
              xml.addAttribute("fontFamily","Courier");
              xml.addAttribute("fontSize","12");
              xml.addAttribute("fontStyle","plain");
              xml.addAttribute("hasLineColor","false");
              xml.addAttribute("modelName","custom");
              xml.addAttribute("modelPosition","t");
              xml.addAttribute("backgroundColor",getHtmlColor(figure.getNameLabel().getBackgroundColor()));
              xml.addAttribute("textColor",getHtmlColor(figure.getNameLabel().getForegroundColor()));
              xml.addAttribute("visible","true");
              xml.addAttribute("height",attrsBounds.height());
              xml.addAttribute("width",attrsBounds.width);
              xml.addAttribute("x",attrsBounds.x());
              xml.addAttribute("y",attrsBounds.y());
              StringBuilder attrsString=new StringBuilder();
              for (              ERDEntityAttribute attr : entity.getColumns()) {
                if (attrsString.length() > 0) {
                  attrsString.append("\n");
                }
                attrsString.append(attr.getName());
              }
              xml.addText(attrsString.toString());
              xml.startElement("y:LabelModel");
              xml.startElement("y:ErdAttributesNodeLabelModel");
              xml.endElement();
              xml.endElement();
              xml.startElement("y:ModelParameter");
              xml.startElement("y:ErdAttributesNodeLabelModelParameter");
              xml.endElement();
              xml.endElement();
              xml.endElement();
            }
            xml.endElement();
          }
          xml.endElement();
        }
        xml.endElement();
      }
      int edgeNum=0;
      for (      ERDEntity entity : diagram.getEntities()) {
        EntityPart entityPart=diagramPart.getEntityPart(entity);
        for (        ERDAssociation association : entity.getForeignKeyRelationships()) {
          AssociationPart associationPart=entityPart.getConnectionPart(association,true);
          if (associationPart == null) {
            log.debug("Association part not found");
            continue;
          }
          edgeNum++;
          String edgeId="e" + edgeNum;
          xml.startElement("edge");
          xml.addAttribute("id",edgeId);
          xml.addAttribute("source",entityMap.get(entity));
          xml.addAttribute("target",entityMap.get(association.getPrimaryKeyEntity()));
          xml.startElement("data");
          xml.addAttribute("key","edgegraph");
          xml.startElement("y:PolyLineEdge");
          xml.startElement("y:Path");
          for (          Bendpoint bp : associationPart.getBendpoints()) {
            xml.startElement("y:Point");
            xml.addAttribute("x",bp.getLocation().x);
            xml.addAttribute("y",bp.getLocation().x);
            xml.endElement();
          }
          xml.endElement();
          xml.startElement("y:LineStyle");
          xml.addAttribute("color","#000000");
          xml.addAttribute("type",!association.isIdentifying() || association.isLogical() ? "dashed" : "line");
          xml.addAttribute("width","1.0");
          xml.endElement();
          xml.startElement("y:Arrows");
          String sourceStyle=!association.isIdentifying() ? "white_diamond" : "none";
          xml.addAttribute("source",sourceStyle);
          xml.addAttribute("target","circle");
          xml.endElement();
          xml.startElement("y:BendStyle");
          xml.addAttribute("smoothed","false");
          xml.endElement();
          xml.endElement();
          xml.endElement();
          xml.endElement();
        }
      }
      xml.endElement();
      xml.endElement();
      xml.flush();
      fos.flush();
    }
  finally {
      ContentUtils.close(fos);
    }
    RuntimeUtils.launchProgram(filePath);
  }
 catch (  Exception e) {
    UIUtils.showErrorDialog(null,"Save ERD as GraphML",null,e);
  }
}
