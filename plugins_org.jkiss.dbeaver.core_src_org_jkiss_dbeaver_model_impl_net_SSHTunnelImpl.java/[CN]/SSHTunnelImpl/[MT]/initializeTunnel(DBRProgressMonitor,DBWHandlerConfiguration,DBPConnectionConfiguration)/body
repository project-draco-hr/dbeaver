{
  String dbPortString=connectionInfo.getHostPort();
  if (CommonUtils.isEmpty(dbPortString)) {
    dbPortString=configuration.getDriver().getDefaultPort();
    if (CommonUtils.isEmpty(dbPortString)) {
      throw new DBException("Database port not specified and no default port number for driver '" + configuration.getDriver().getName() + "'");
    }
  }
  String dbHost=connectionInfo.getHostName();
  Map<String,String> properties=configuration.getProperties();
  String sshAuthType=properties.get(SSHConstants.PROP_AUTH_TYPE);
  String sshHost=properties.get(SSHConstants.PROP_HOST);
  String sshPort=properties.get(SSHConstants.PROP_PORT);
  String sshUser=configuration.getUserName();
  String aliveInterval=properties.get(SSHConstants.PROP_ALIVE_INTERVAL);
  if (CommonUtils.isEmpty(sshHost)) {
    throw new DBException("SSH host not specified");
  }
  if (CommonUtils.isEmpty(sshPort)) {
    throw new DBException("SSH port not specified");
  }
  if (CommonUtils.isEmpty(sshUser)) {
    throw new DBException("SSH user not specified");
  }
  int sshPortNum;
  try {
    sshPortNum=Integer.parseInt(sshPort);
  }
 catch (  NumberFormatException e) {
    throw new DBException("Invalid SSH port: " + sshPort);
  }
  SSHConstants.AuthType authType=SSHConstants.AuthType.PASSWORD;
  if (sshAuthType != null) {
    authType=SSHConstants.AuthType.valueOf(sshAuthType);
  }
  File privKeyFile=null;
  String privKeyPath=properties.get(SSHConstants.PROP_KEY_PATH);
  if (authType == SSHConstants.AuthType.PUBLIC_KEY) {
    if (CommonUtils.isEmpty(privKeyPath)) {
      throw new DBException("Private key path is empty");
    }
    privKeyFile=new File(privKeyPath);
    if (!privKeyFile.exists()) {
      throw new DBException("Private key file '" + privKeyFile.getAbsolutePath() + "' doesn't exist");
    }
  }
  monitor.subTask("Initiating tunnel at '" + sshHost + "'");
  UserInfo ui=new UIUserInfo(configuration);
  int dbPort;
  try {
    dbPort=Integer.parseInt(dbPortString);
  }
 catch (  NumberFormatException e) {
    throw new DBException("Bad database port number: " + dbPortString);
  }
  int localPort=findFreePort();
  try {
    if (jsch == null) {
      jsch=new JSch();
      JSch.setLogger(new LoggerProxy());
    }
    if (privKeyFile != null) {
      if (!CommonUtils.isEmpty(ui.getPassphrase())) {
        jsch.addIdentity(privKeyFile.getAbsolutePath(),ui.getPassphrase());
      }
 else {
        jsch.addIdentity(privKeyFile.getAbsolutePath());
      }
    }
    log.debug("Instantiate SSH tunnel");
    session=jsch.getSession(sshUser,sshHost,sshPortNum);
    session.setConfig("StrictHostKeyChecking","no");
    session.setConfig("PreferredAuthentications",privKeyFile != null ? "publickey" : "password");
    session.setConfig("ConnectTimeout",String.valueOf(CONNECT_TIMEOUT));
    session.setUserInfo(ui);
    log.debug("Connect to tunnel host");
    session.connect(CONNECT_TIMEOUT);
    try {
      session.setPortForwardingL(localPort,dbHost,dbPort);
      if (!CommonUtils.isEmpty(aliveInterval)) {
        session.setServerAliveInterval(Integer.parseInt(aliveInterval));
      }
    }
 catch (    JSchException e) {
      closeTunnel(monitor,connectionInfo);
      throw e;
    }
  }
 catch (  JSchException e) {
    throw new DBException("Cannot establish tunnel",e);
  }
  connectionInfo=new DBPConnectionConfiguration(connectionInfo);
  String newPortValue=String.valueOf(localPort);
  connectionInfo.setHostName(LOCALHOST_NAME);
  connectionInfo.setHostPort(newPortValue);
  String newURL=configuration.getDriver().getDataSourceProvider().getConnectionURL(configuration.getDriver(),connectionInfo);
  connectionInfo.setUrl(newURL);
  return connectionInfo;
}
