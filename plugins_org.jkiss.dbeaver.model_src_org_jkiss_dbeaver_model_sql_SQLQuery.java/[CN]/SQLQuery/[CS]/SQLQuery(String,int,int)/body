{
  this.originalQuery=this.query=query;
  this.offset=offset;
  this.length=length;
  try {
    statement=CCJSqlParserUtil.parse(query);
    if (statement instanceof Select) {
      type=SQLQueryType.SELECT;
      SelectBody selectBody=((Select)statement).getSelectBody();
      if (selectBody instanceof PlainSelect) {
        PlainSelect plainSelect=(PlainSelect)selectBody;
        if (plainSelect.getFromItem() instanceof Table && CommonUtils.isEmpty(plainSelect.getJoins()) && CommonUtils.isEmpty(plainSelect.getGroupByColumnReferences())&& CommonUtils.isEmpty(plainSelect.getIntoTables())) {
          Table fromItem=(Table)plainSelect.getFromItem();
          Database database=fromItem.getDatabase();
          String schemaName=fromItem.getSchemaName();
          String tableName=fromItem.getName();
          singleTableMeta=new SingleTableMeta(unquoteIdentifier(database == null ? null : database.getDatabaseName()),unquoteIdentifier(schemaName),unquoteIdentifier(tableName));
        }
        final List<SelectItem> items=plainSelect.getSelectItems();
        if (items != null && !items.isEmpty()) {
          selectItems=new LinkedHashMap<>();
          for (          SelectItem item : items) {
            SQLSelectItem si=new SQLSelectItem(item);
            selectItems.put(si.getName(),si);
          }
        }
      }
    }
 else     if (statement instanceof Insert) {
      type=SQLQueryType.INSERT;
    }
 else     if (statement instanceof Update) {
      type=SQLQueryType.UPDATE;
    }
 else     if (statement instanceof Delete) {
      type=SQLQueryType.DELETE;
    }
 else     if (statement instanceof Alter || statement instanceof CreateTable || statement instanceof CreateView|| statement instanceof Drop|| statement instanceof CreateIndex) {
      type=SQLQueryType.DDL;
    }
 else {
      type=SQLQueryType.UNKNOWN;
    }
  }
 catch (  Throwable e) {
    this.type=SQLQueryType.UNKNOWN;
  }
}
