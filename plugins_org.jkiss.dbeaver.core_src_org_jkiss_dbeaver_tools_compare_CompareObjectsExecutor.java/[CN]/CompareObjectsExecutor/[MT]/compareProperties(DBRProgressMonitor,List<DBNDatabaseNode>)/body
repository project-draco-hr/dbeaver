{
  this.initializedCount=0;
  this.initializeError=null;
  this.propertyValues.clear();
  StringBuilder title=new StringBuilder();
{
    monitor.subTask("Initialize nodes");
    for (    DBNDatabaseNode node : nodes) {
      if (title.length() > 0)       title.append(", ");
      title.append(node.getNodeFullName());
      node.initializeNode(null,initializeFinisher);
      monitor.worked(1);
    }
    while (initializedCount != nodes.size()) {
      if (initializeError != null) {
        throw new DBException(initializeError.getMessage());
      }
      Thread.sleep(100);
      if (monitor.isCanceled()) {
        throw new InterruptedException();
      }
    }
  }
  monitor.subTask("Compare " + title.toString());
  boolean compareLazyProperties=false;
  DBNDatabaseNode firstNode=nodes.get(0);
  List<ObjectPropertyDescriptor> properties=ObjectPropertyDescriptor.extractAnnotations(null,firstNode.getObject().getClass(),getDataSourceFilter(firstNode));
  for (  ObjectPropertyDescriptor prop : properties) {
    if (prop.isLazy()) {
      compareLazyProperties=true;
      break;
    }
  }
  compareLazyProperties=compareLazyProperties && settings.isCompareLazyProperties();
  for (  DBNDatabaseNode node : nodes) {
    if (monitor.isCanceled()) {
      throw new InterruptedException();
    }
    DBSObject databaseObject=node.getObject();
    Map<DBPPropertyDescriptor,Object> nodeProperties=propertyValues.get(databaseObject);
    if (nodeProperties == null) {
      nodeProperties=new IdentityHashMap<>();
      propertyValues.put(databaseObject,nodeProperties);
    }
    PropertyCollector propertySource=new PropertyCollector(databaseObject,compareLazyProperties);
    for (    ObjectPropertyDescriptor prop : properties) {
      Object propertyValue=propertySource.getPropertyValue(monitor,databaseObject,prop);
synchronized (PROPS_LOCK) {
        if (propertyValue instanceof DBPNamedObject) {
          propertyValue=((DBPNamedObject)propertyValue).getName();
        }
        nodeProperties.put(prop,propertyValue);
      }
    }
    monitor.worked(1);
  }
  for (  ObjectPropertyDescriptor prop : properties) {
    reportPropertyCompare(prop);
  }
}
