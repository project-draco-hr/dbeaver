{
  monitor.subTask("Install SSL certificates");
  final DBPSecurityManager securityManager=getContainer().getApplication().getSecurityManager();
  props.put("useSSL","true");
  props.put("verifyServerCertificate",String.valueOf(CommonUtils.toBoolean(sslConfig.getProperties().get(MySQLConstants.PROP_VERIFY_SERVER_SERT))));
  props.put("requireSSL",String.valueOf(CommonUtils.toBoolean(sslConfig.getProperties().get(MySQLConstants.PROP_REQUIRE_SSL))));
  final String caCertProp=sslConfig.getProperties().get(MySQLConstants.PROP_SSL_CA_CERT);
  String ksId="ssl-truststore";
  if (!CommonUtils.isEmpty(caCertProp)) {
    File caCertFile=new File(caCertProp);
    try (InputStream is=new FileInputStream(caCertFile)){
      securityManager.addCertificate(ksId,getContainer().getId(),is);
    }
   }
 else {
    securityManager.deleteCertificate(ksId,getContainer().getId());
  }
  props.put("trustCertificateKeyStoreUrl",securityManager.getKeyStorePath(ksId).toURI().toURL().toString());
  ksId="ssl-clientstore";
  final String clientCertProp=sslConfig.getProperties().get(MySQLConstants.PROP_SSL_CLIENT_CERT);
  if (!CommonUtils.isEmpty(clientCertProp)) {
    File clientCertFile=new File(clientCertProp);
    try (InputStream is=new FileInputStream(clientCertFile)){
      securityManager.addCertificate(ksId,getContainer().getId(),is);
    }
   }
 else {
    securityManager.deleteCertificate(ksId,getContainer().getId());
  }
  props.put("clientCertificateKeyStoreUrl",securityManager.getKeyStorePath(ksId).toURI().toURL().toString());
  final boolean retrievePublicKey=CommonUtils.getBoolean(sslConfig.getProperties().get(MySQLConstants.PROP_SSL_PUBLIC_KEY_RETRIEVE),false);
  if (retrievePublicKey) {
    props.put("allowPublicKeyRetrieval","true");
  }
  if (CommonUtils.getBoolean(sslConfig.getProperties().get(MySQLConstants.PROP_SSL_DEBUG),false)) {
    System.setProperty("javax.net.debug","all");
  }
}
