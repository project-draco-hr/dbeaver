{
  this.type=type;
  this.contents=contents;
  try {
    Object[] attrValues=contents == null ? null : contents.getAttributes();
    if (type instanceof DBSEntity) {
      DBSEntity entity=(DBSEntity)type;
      Collection<? extends DBSEntityAttribute> entityAttributes=CommonUtils.safeCollection(entity.getAttributes(session.getProgressMonitor()));
      int valueCount=attrValues == null ? 0 : attrValues.length;
      if (attrValues != null && entityAttributes.size() != valueCount) {
        log.warn("Number of entity attributes (" + entityAttributes.size() + ") differs from real values ("+ valueCount+ ")");
      }
      attributes=entityAttributes.toArray(new DBSEntityAttribute[entityAttributes.size()]);
      values=new Object[attributes.length];
      for (int i=0; i < attributes.length; i++) {
        DBSEntityAttribute attr=attributes[i];
        int ordinalPosition=attr.getOrdinalPosition();
        if (ordinalPosition < 0 || attrValues != null && ordinalPosition >= valueCount) {
          log.warn("Attribute '" + attr.getName() + "' ordinal position ("+ ordinalPosition+ ") is out of range ("+ valueCount+ ")");
          continue;
        }
        Object value=attrValues != null ? attrValues[ordinalPosition] : null;
        DBDValueHandler valueHandler=DBUtils.findValueHandler(session,attr);
        value=valueHandler.getValueFromObject(session,attr,value,false);
        values[ordinalPosition]=value;
      }
    }
 else {
      attributes=EMPTY_ATTRIBUTE;
      values=EMPTY_VALUES;
    }
  }
 catch (  DBException e) {
    throw new DBCException("Can't obtain attributes meta information",e);
  }
catch (  SQLException e) {
    throw new DBCException(e,session.getDataSource());
  }
}
