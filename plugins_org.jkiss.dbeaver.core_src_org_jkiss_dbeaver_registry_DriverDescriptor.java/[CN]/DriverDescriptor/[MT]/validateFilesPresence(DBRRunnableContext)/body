{
  for (  DriverFileDescriptor file : files) {
    if (file.isCustom()) {
      File localFile=file.getLocalFile();
      if (localFile != null && localFile.exists()) {
        return;
      }
    }
  }
  final List<DriverFileDescriptor> downloadCandidates=new ArrayList<DriverFileDescriptor>();
  for (  DriverFileDescriptor file : files) {
    if (file.isDisabled() || !file.isLocal()) {
      continue;
    }
    if (!file.matchesCurrentPlatform()) {
      continue;
    }
    final File libraryFile=file.getLocalFile();
    if (libraryFile == null || !libraryFile.exists()) {
      downloadCandidates.add(file);
    }
  }
  final Shell parentShell=runnableContext instanceof IShellProvider ? ((IShellProvider)runnableContext).getShell() : null;
  if (!downloadCandidates.isEmpty()) {
    final StringBuilder libNames=new StringBuilder();
    for (    DriverFileDescriptor lib : downloadCandidates) {
      if (libNames.length() > 0)       libNames.append(", ");
      libNames.append(lib.getPath());
    }
    DownloadConfirm confirm=new DownloadConfirm(parentShell,libNames);
    UIUtils.runInUI(parentShell,confirm);
    if (confirm.proceed) {
      downloadLibraryFiles(runnableContext,downloadCandidates);
    }
  }
 else   if (!fileSources.isEmpty()) {
    DriverFileSource fileSource=fileSources.get(0);
    ManualDownloadConfirm confirm=new ManualDownloadConfirm(parentShell,fileSource);
    UIUtils.runInUI(parentShell,confirm);
    if (confirm.proceed) {
      Program.launch(fileSource.getUrl());
      UIUtils.runInUI(parentShell,new Runnable(){
        @Override public void run(){
          DriverEditDialog dialog=new DriverEditDialog(parentShell,DriverDescriptor.this);
          dialog.open();
        }
      }
);
    }
  }
}
