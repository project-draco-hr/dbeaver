{
  DBPPreferenceStore prefs=DBeaverCore.getGlobalPreferenceStore();
  String proxyHost=prefs.getString(DBeaverPreferences.UI_PROXY_HOST);
  Proxy proxy=null;
  if (!CommonUtils.isEmpty(proxyHost)) {
    int proxyPort=prefs.getInt(DBeaverPreferences.UI_PROXY_PORT);
    if (proxyPort <= 0) {
      log.warn("Invalid proxy port: " + proxyPort);
    }
    proxy=new Proxy(Proxy.Type.HTTP,new InetSocketAddress(proxyHost,proxyPort));
  }
  String externalURL=file.getExternalURL();
  if (RegistryConstants.MAPPED_URL.equals(externalURL)) {
    String primarySource=DriverDescriptor.getDriversPrimarySource();
    if (!primarySource.endsWith("/") && !file.getPath().startsWith("/")) {
      primarySource+='/';
    }
    externalURL=primarySource + file.getPath();
  }
  URL url=new URL(externalURL);
  monitor.beginTask("Check file " + url.toString() + "...",1);
  monitor.subTask("Connecting to the server");
  final HttpURLConnection connection=(HttpURLConnection)(proxy == null ? url.openConnection() : url.openConnection(proxy));
  connection.setReadTimeout(10000);
  connection.setConnectTimeout(10000);
  connection.setRequestMethod("GET");
  connection.setInstanceFollowRedirects(true);
  connection.setRequestProperty("User-Agent",DBeaverCore.getProductTitle());
  connection.connect();
  if (connection.getResponseCode() != 200) {
    throw new IOException("Can't find driver file '" + url + "': "+ connection.getResponseMessage());
  }
  monitor.worked(1);
  monitor.done();
  final int contentLength=connection.getContentLength();
  monitor.beginTask("Download " + file.getExternalURL(),contentLength);
  boolean success=false;
  final File localFile=file.getFile();
  final File localDir=localFile.getParentFile();
  if (!localDir.exists()) {
    if (!localDir.mkdirs()) {
      log.warn("Can't create directory for local driver file '" + localDir.getAbsolutePath() + "'");
    }
  }
  final OutputStream outputStream=new FileOutputStream(localFile);
  try {
    final InputStream inputStream=connection.getInputStream();
    try {
      final NumberFormat numberFormat=NumberFormat.getNumberInstance();
      byte[] buffer=new byte[10000];
      int totalRead=0;
      for (; ; ) {
        if (monitor.isCanceled()) {
          throw new InterruptedException();
        }
        monitor.subTask(numberFormat.format(totalRead) + "/" + numberFormat.format(contentLength));
        final int count=inputStream.read(buffer);
        if (count <= 0) {
          success=true;
          break;
        }
        outputStream.write(buffer,0,count);
        monitor.worked(count);
        totalRead+=count;
      }
    }
  finally {
      ContentUtils.close(inputStream);
    }
  }
  finally {
    ContentUtils.close(outputStream);
    if (!success) {
      if (!localFile.delete()) {
        log.warn("Can't delete local driver file '" + localFile.getAbsolutePath() + "'");
      }
    }
  }
  monitor.done();
}
