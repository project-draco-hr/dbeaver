{
  try {
    if (monitor == null && prop.isLazy(object,true) && !prop.supportsPreview()) {
      final Object value=lazyValues.get(prop.getId());
      if (value != null) {
        return value;
      }
      if (lazyValues.containsKey(prop.getId())) {
        return null;
      }
      if (!loadLazyProps) {
        return null;
      }
 else {
synchronized (lazyProps) {
          lazyProps.add(prop);
          if (lazyLoadJob == null) {
            lazyLoadJob=RuntimeUtils.createService(new PropertySheetLoadService(),new PropertySheetLoadVisualizer());
            lazyLoadJob.addJobChangeListener(new JobChangeAdapter(){
              @Override public void done(              IJobChangeEvent event){
synchronized (lazyProps) {
                  if (!lazyProps.isEmpty()) {
                    lazyLoadJob.schedule(100);
                  }
 else {
                    lazyLoadJob=null;
                  }
                }
              }
            }
);
            lazyLoadJob.schedule(100);
          }
        }
        lazyValues.put(prop.getId(),null);
        return null;
      }
    }
 else {
      return prop.readValue(object,monitor);
    }
  }
 catch (  Throwable e) {
    if (e instanceof InvocationTargetException) {
      e=((InvocationTargetException)e).getTargetException();
    }
    log.error("Error reading property '" + prop.getId() + "' from "+ object,e);
    return e.getMessage();
  }
}
