{
  try {
    this.readOnly=metaData.isReadOnly();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.readOnly=false;
  }
  try {
    this.databaseProductName=metaData.getDatabaseProductName();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.databaseProductName="?";
  }
  try {
    this.databaseProductVersion=metaData.getDatabaseProductVersion();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.databaseProductVersion="?";
  }
  try {
    this.driverName=metaData.getDriverName();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.driverName="?";
  }
  try {
    this.driverVersion=metaData.getDriverVersion();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.driverVersion="?";
  }
  try {
    databaseVersion=new Version(metaData.getDatabaseMajorVersion(),metaData.getDatabaseMinorVersion(),0);
  }
 catch (  Throwable e) {
    try {
      databaseVersion=new Version(databaseProductVersion);
    }
 catch (    IllegalArgumentException e1) {
      log.debug("Can't determine database version. Use default");
      databaseVersion=new Version(0,0,0);
    }
  }
  try {
    this.schemaTerm=makeTermString(metaData.getSchemaTerm(),TERM_SCHEMA);
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.schemaTerm=TERM_SCHEMA;
  }
  try {
    this.procedureTerm=makeTermString(metaData.getProcedureTerm(),TERM_PROCEDURE);
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.procedureTerm=TERM_PROCEDURE;
  }
  try {
    this.catalogTerm=makeTermString(metaData.getCatalogTerm(),TERM_CATALOG);
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.catalogTerm=TERM_CATALOG;
  }
  try {
    supportsBatchUpdates=metaData.supportsBatchUpdates();
  }
 catch (  Throwable e) {
    log.debug(e);
  }
  try {
    supportsTransactions=metaData.supportsTransactions();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    supportsTransactions=true;
  }
  supportedIsolations=new ArrayList<>();
  try {
    for (    JDBCTransactionIsolation txi : JDBCTransactionIsolation.values()) {
      if (metaData.supportsTransactionIsolationLevel(txi.getCode())) {
        supportedIsolations.add(txi);
      }
    }
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    supportsTransactions=true;
  }
  if (!supportedIsolations.contains(JDBCTransactionIsolation.NONE)) {
    supportedIsolations.add(0,JDBCTransactionIsolation.NONE);
  }
  supportsScroll=true;
}
