{
  DBCStatistics statistics=new DBCStatistics();
  boolean hasLimits=firstRow >= 0 && maxRows > 0;
  DBPDataSource dataSource=session.getDataSource();
  DBRProgressMonitor monitor=session.getProgressMonitor();
  try {
    readRequiredMeta(monitor);
  }
 catch (  DBException e) {
    log.warn(e);
  }
  DBDPseudoAttribute rowIdAttribute=null;
  if ((flags & FLAG_READ_PSEUDO) != 0 && this instanceof DBDPseudoAttributeContainer) {
    try {
      rowIdAttribute=DBDPseudoAttribute.getAttribute(((DBDPseudoAttributeContainer)this).getPseudoAttributes(),DBDPseudoAttributeType.ROWID);
    }
 catch (    DBException e) {
      log.warn("Can't get pseudo attributes for '" + getName() + "'",e);
    }
  }
  String tableAlias=null;
  if (dataSource instanceof SQLDataSource) {
    if (((SQLDataSource)dataSource).getSQLDialect().supportsAliasInSelect()) {
      tableAlias=DEFAULT_TABLE_ALIAS;
    }
  }
  StringBuilder query=new StringBuilder(100);
  if (rowIdAttribute != null) {
    if (tableAlias != null) {
      query.append("SELECT ").append(tableAlias).append(".*");
      query.append(",").append(rowIdAttribute.translateExpression(tableAlias));
      if (rowIdAttribute.getAlias() != null) {
        query.append(" as ").append(rowIdAttribute.getAlias());
      }
    }
 else {
      log.warn("Can't query ROWID - table alias not supported");
      rowIdAttribute=null;
    }
  }
 else {
    query.append("SELECT ");
    if (tableAlias != null) {
      query.append(tableAlias).append(".");
    }
    query.append("*");
  }
  query.append(" FROM ").append(getFullQualifiedName());
  if (tableAlias != null) {
    query.append(" ").append(tableAlias);
  }
  appendQueryConditions(query,tableAlias,dataFilter);
  appendQueryOrder(query,tableAlias,dataFilter);
  String sqlQuery=query.toString();
  statistics.setQueryText(sqlQuery);
  monitor.subTask(CoreMessages.model_jdbc_fetch_table_data);
  DBCStatement dbStat=DBUtils.prepareStatement(session,DBCStatementType.SCRIPT,sqlQuery,firstRow,maxRows);
  try {
    dbStat.setStatementSource(this);
    long startTime=System.currentTimeMillis();
    boolean executeResult=dbStat.executeStatement();
    statistics.setExecuteTime(System.currentTimeMillis() - startTime);
    if (executeResult) {
      DBCResultSet dbResult=dbStat.openResultSet();
      if (dbResult != null) {
        try {
          if (rowIdAttribute != null) {
            String attrId=rowIdAttribute.getAlias();
            if (CommonUtils.isEmpty(attrId)) {
              attrId=rowIdAttribute.getName();
            }
            List<DBCAttributeMetaData> metaAttributes=dbResult.getResultSetMetaData().getAttributes();
            for (int i=metaAttributes.size(); i > 0; i--) {
              DBCAttributeMetaData attr=metaAttributes.get(i - 1);
              if (attrId.equalsIgnoreCase(attr.getName()) && attr instanceof JDBCColumnMetaData) {
                ((JDBCColumnMetaData)attr).setPseudoAttribute(rowIdAttribute);
                break;
              }
            }
          }
          dataReceiver.fetchStart(session,dbResult);
          try {
            startTime=System.currentTimeMillis();
            long rowCount=0;
            while (dbResult.nextRow()) {
              if (monitor.isCanceled() || (hasLimits && rowCount >= maxRows)) {
                break;
              }
              dataReceiver.fetchRow(session,dbResult);
              rowCount++;
              if (rowCount % 100 == 0) {
                monitor.subTask(rowCount + CoreMessages.model_jdbc__rows_fetched);
                monitor.worked(100);
              }
            }
            statistics.setFetchTime(System.currentTimeMillis() - startTime);
            statistics.setRowsFetched(rowCount);
          }
  finally {
            try {
              dataReceiver.fetchEnd(session);
            }
 catch (            DBCException e) {
              log.error("Error while finishing result set fetch",e);
            }
          }
        }
  finally {
          dbResult.close();
        }
      }
    }
    return statistics;
  }
  finally {
    dbStat.close();
    dataReceiver.close();
  }
}
