{
  DBPPreferenceStore store=DBeaverCore.getGlobalPreferenceStore();
  final DBPDataSource dataSource=editor.getDataSource();
  if (dataSource != null) {
    store=dataSource.getContainer().getPreferenceStore();
  }
  final DBPPreferenceStore configStore=store;
  final SQLContentAssistant assistant=new SQLContentAssistant();
  assistant.setDocumentPartitioning(getConfiguredDocumentPartitioning(sourceViewer));
  if (completionProcessor != null) {
    assistant.setContentAssistProcessor(completionProcessor,IDocument.DEFAULT_CONTENT_TYPE);
  }
  assistant.enableAutoActivation(store.getBoolean(SQLPreferenceConstants.ENABLE_AUTO_ACTIVATION));
  assistant.setAutoActivationDelay(store.getInt(SQLPreferenceConstants.AUTO_ACTIVATION_DELAY));
  assistant.setProposalPopupOrientation(IContentAssistant.PROPOSAL_OVERLAY);
  assistant.setInformationControlCreator(getInformationControlCreator(sourceViewer));
  Color foreground=new Color(DBeaverUI.getDisplay(),0,0,0);
  Color background=new Color(DBeaverUI.getDisplay(),255,255,255);
  assistant.setContextInformationPopupOrientation(IContentAssistant.CONTEXT_INFO_ABOVE);
  assistant.setContextInformationPopupForeground(foreground);
  assistant.setContextInformationPopupBackground(background);
  assistant.enableAutoInsert(store.getBoolean(SQLPreferenceConstants.INSERT_SINGLE_PROPOSALS_AUTO));
  assistant.setShowEmptyList(true);
  final DBPPreferenceListener prefListener=new DBPPreferenceListener(){
    @Override public void preferenceChange(    PreferenceChangeEvent event){
switch (event.getProperty()) {
case SQLPreferenceConstants.ENABLE_AUTO_ACTIVATION:
        assistant.enableAutoActivation(configStore.getBoolean(SQLPreferenceConstants.ENABLE_AUTO_ACTIVATION));
      break;
case SQLPreferenceConstants.AUTO_ACTIVATION_DELAY:
    assistant.setAutoActivationDelay(configStore.getInt(SQLPreferenceConstants.AUTO_ACTIVATION_DELAY));
  break;
case SQLPreferenceConstants.INSERT_SINGLE_PROPOSALS_AUTO:
assistant.enableAutoInsert(configStore.getBoolean(SQLPreferenceConstants.INSERT_SINGLE_PROPOSALS_AUTO));
break;
}
}
}
;
configStore.addPropertyChangeListener(prefListener);
editor.getTextViewer().getControl().addDisposeListener(new DisposeListener(){
@Override public void widgetDisposed(DisposeEvent e){
configStore.removePropertyChangeListener(prefListener);
}
}
);
return assistant;
}
