{
  initializeDialogUnits(parent);
  Composite composite=new Composite(parent,SWT.NULL);
  GridLayout gl=new GridLayout();
  gl.marginHeight=0;
  gl.marginWidth=0;
  composite.setLayout(gl);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
{
    Composite containerPanel=new Composite(composite,SWT.NONE);
    containerPanel.setLayout(new GridLayout(4,false));
    containerPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    UIUtils.createControlLabel(containerPanel,"Target container");
    final Label containerIcon=new Label(containerPanel,SWT.NONE);
    containerIcon.setImage(DBIcon.TYPE_UNKNOWN.getImage());
    final Text containerName=new Text(containerPanel,SWT.BORDER | SWT.READ_ONLY);
    containerName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    Button browseButton=new Button(containerPanel,SWT.PUSH);
    browseButton.setImage(DBIcon.TREE_FOLDER.getImage());
    browseButton.setText("...");
    browseButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        IProject activeProject=DBeaverCore.getInstance().getProjectRegistry().getActiveProject();
        if (activeProject != null) {
          final DBNProject rootNode=DBeaverCore.getInstance().getNavigatorModel().getRoot().getProject(activeProject);
          DBNNode node=BrowseObjectDialog.selectObject(getShell(),"Choose container",rootNode.getDatabases(),containerNode,DBSObjectContainer.class);
          if (node != null) {
            containerNode=node;
            containerIcon.setImage(containerNode.getNodeIconDefault());
            containerName.setText(containerNode.getNodeFullName());
          }
        }
      }
    }
);
  }
{
    mappingViewer=new TableViewer(composite,SWT.BORDER | SWT.MULTI);
    mappingViewer.getTable().setLayoutData(new GridData(GridData.FILL_BOTH));
    mappingViewer.getTable().setLinesVisible(true);
    mappingViewer.getTable().setHeaderVisible(true);
    TableViewerColumn columnSource=new TableViewerColumn(mappingViewer,SWT.LEFT);
    columnSource.setLabelProvider(new CellLabelProvider(){
      @Override public void update(      ViewerCell cell){
      }
    }
);
    columnSource.getColumn().setText("Source");
    TableViewerColumn columnTarget=new TableViewerColumn(mappingViewer,SWT.LEFT);
    columnTarget.setLabelProvider(new CellLabelProvider(){
      @Override public void update(      ViewerCell cell){
      }
    }
);
    columnTarget.getColumn().setText("Target");
    TableViewerColumn columnType=new TableViewerColumn(mappingViewer,SWT.LEFT);
    columnType.setLabelProvider(new CellLabelProvider(){
      @Override public void update(      ViewerCell cell){
      }
    }
);
    columnType.getColumn().setText("Type");
  }
{
    Composite buttonsPanel=new Composite(composite,SWT.NONE);
    buttonsPanel.setLayout(new GridLayout(3,false));
    buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    Button mapTableButton=new Button(buttonsPanel,SWT.PUSH);
    mapTableButton.setImage(DBIcon.TREE_TABLE.getImage());
    mapTableButton.setText("Existing table ...");
    Button createNewButton=new Button(buttonsPanel,SWT.PUSH);
    createNewButton.setImage(DBIcon.TREE_VIEW.getImage());
    createNewButton.setText("Create new ...");
    Button columnsButton=new Button(buttonsPanel,SWT.PUSH);
    columnsButton.setImage(DBIcon.TREE_COLUMNS.getImage());
    columnsButton.setText("Columns' mappings ...");
  }
  final DatabaseConsumerSettings settings=getWizard().getPageSettings(this,DatabaseConsumerSettings.class);
  setControl(composite);
}
