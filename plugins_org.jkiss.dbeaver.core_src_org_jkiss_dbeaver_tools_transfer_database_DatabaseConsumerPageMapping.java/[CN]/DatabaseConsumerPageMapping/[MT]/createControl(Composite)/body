{
  initializeDialogUnits(parent);
  final DatabaseConsumerSettings settings=getWizard().getPageSettings(this,DatabaseConsumerSettings.class);
  Composite composite=new Composite(parent,SWT.NULL);
  GridLayout gl=new GridLayout();
  gl.marginHeight=0;
  gl.marginWidth=0;
  composite.setLayout(gl);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
{
    Composite containerPanel=new Composite(composite,SWT.NONE);
    containerPanel.setLayout(new GridLayout(4,false));
    containerPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    UIUtils.createControlLabel(containerPanel,"Target container");
    DBNDatabaseNode containerNode=settings.getContainerNode();
    final Label containerIcon=new Label(containerPanel,SWT.NONE);
    containerIcon.setImage(DBIcon.TYPE_UNKNOWN.getImage());
    if (containerNode != null)     containerIcon.setImage(containerNode.getNodeIconDefault());
    final Text containerName=new Text(containerPanel,SWT.BORDER | SWT.READ_ONLY);
    containerName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (containerNode != null)     containerName.setText(settings.getContainerFullName());
    Button browseButton=new Button(containerPanel,SWT.PUSH);
    browseButton.setImage(DBIcon.TREE_FOLDER.getImage());
    browseButton.setText("...");
    browseButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        IProject activeProject=DBeaverCore.getInstance().getProjectRegistry().getActiveProject();
        if (activeProject != null) {
          final DBNModel navigatorModel=DBeaverCore.getInstance().getNavigatorModel();
          final DBNProject rootNode=navigatorModel.getRoot().getProject(activeProject);
          DBNNode selectedNode=settings.getContainerNode();
          if (selectedNode == null && !settings.getDataMappings().isEmpty()) {
            DBSDataContainer firstSource=settings.getDataMappings().keySet().iterator().next();
            selectedNode=navigatorModel.getNodeByObject(firstSource);
            while (selectedNode != null) {
              if (selectedNode instanceof DBSWrapper && ((DBSWrapper)selectedNode).getObject() instanceof DBSObjectContainer) {
                break;
              }
 else {
                selectedNode=selectedNode.getParentNode();
              }
            }
          }
          DBNNode node=BrowseObjectDialog.selectObject(getShell(),"Choose container",rootNode.getDatabases(),selectedNode,new Class[]{DBSObjectContainer.class},null);
          if (node instanceof DBNDatabaseNode) {
            settings.setContainerNode((DBNDatabaseNode)node);
            containerIcon.setImage(node.getNodeIconDefault());
            containerName.setText(settings.getContainerFullName());
            for (            DatabaseMappingContainer mappingContainer : settings.getDataMappings().values()) {
              if (mappingContainer.getMappingType() == DatabaseMappingType.create) {
                try {
                  mappingContainer.refreshMappingType(getContainer(),DatabaseMappingType.create);
                }
 catch (                DBException e1) {
                  log.error(e1);
                }
              }
            }
            mappingViewer.refresh();
          }
        }
      }
    }
);
  }
  createMappingsTree(composite);
{
    Composite buttonsPanel=new Composite(composite,SWT.NONE);
    buttonsPanel.setLayout(new GridLayout(3,false));
    buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    final Button mapTableButton=new Button(buttonsPanel,SWT.PUSH);
    mapTableButton.setImage(DBIcon.TREE_TABLE.getImage());
    mapTableButton.setText("Existing table ...");
    mapTableButton.setEnabled(false);
    mapTableButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        mapExistingTable((DatabaseMappingContainer)getSelectedMapping());
      }
    }
);
    final Button createNewButton=new Button(buttonsPanel,SWT.PUSH);
    createNewButton.setImage(DBIcon.TREE_VIEW.getImage());
    createNewButton.setText("Create new ...");
    createNewButton.setEnabled(false);
    createNewButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        mapNewTable((DatabaseMappingContainer)getSelectedMapping());
      }
    }
);
    final Button columnsButton=new Button(buttonsPanel,SWT.PUSH);
    columnsButton.setImage(DBIcon.TREE_COLUMNS.getImage());
    columnsButton.setText("Columns' mappings ...");
    columnsButton.setEnabled(false);
    columnsButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        mapColumns((DatabaseMappingContainer)getSelectedMapping());
      }
    }
);
    mappingViewer.getTree().addKeyListener(new KeyAdapter(){
      @Override public void keyReleased(      KeyEvent e){
        try {
          if (e.character == SWT.DEL) {
            for (            TreeItem item : mappingViewer.getTree().getSelection()) {
              Object data=item.getData();
              if (data instanceof DatabaseMappingAttribute) {
                DatabaseMappingAttribute attribute=(DatabaseMappingAttribute)data;
                attribute.setMappingType(DatabaseMappingType.skip);
              }
 else               if (data instanceof DatabaseMappingContainer) {
                DatabaseMappingContainer container=(DatabaseMappingContainer)data;
                container.refreshMappingType(getContainer(),DatabaseMappingType.skip);
              }
            }
            mappingViewer.refresh();
          }
 else           if (e.character == SWT.SPACE) {
            for (            TreeItem item : mappingViewer.getTree().getSelection()) {
              Object data=item.getData();
              if (data instanceof DatabaseMappingAttribute) {
                DatabaseMappingAttribute attribute=(DatabaseMappingAttribute)item.getData();
                attribute.setMappingType(DatabaseMappingType.existing);
                attribute.updateMappingType(VoidProgressMonitor.INSTANCE);
              }
 else               if (data instanceof DatabaseMappingContainer) {
                DatabaseMappingContainer container=(DatabaseMappingContainer)data;
                setMappingTarget(container,container.getSource().getName());
              }
            }
            mappingViewer.refresh();
          }
        }
 catch (        DBException e1) {
          log.error(e1);
        }
      }
    }
);
    mappingViewer.addSelectionChangedListener(new ISelectionChangedListener(){
      @Override public void selectionChanged(      SelectionChangedEvent event){
        DatabaseMappingObject mapping=getSelectedMapping();
        mapTableButton.setEnabled(mapping instanceof DatabaseMappingContainer);
        createNewButton.setEnabled(mapping instanceof DatabaseMappingContainer && settings.getContainerNode() != null);
        columnsButton.setEnabled(mapping instanceof DatabaseMappingContainer && mapping.getMappingType() != DatabaseMappingType.unspecified);
      }
    }
);
    mappingViewer.addDoubleClickListener(new IDoubleClickListener(){
      @Override public void doubleClick(      DoubleClickEvent event){
        DatabaseMappingObject selectedMapping=getSelectedMapping();
        if (selectedMapping != null) {
          if (selectedMapping instanceof DatabaseMappingContainer) {
          }
        }
      }
    }
);
  }
{
    Composite hintPanel=new Composite(composite,SWT.NONE);
    hintPanel.setLayout(new GridLayout(3,false));
    hintPanel.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
    new Label(hintPanel,SWT.NONE).setText("* DEL - skip column(s)  SPACE - map column(s)");
  }
  setControl(composite);
}
