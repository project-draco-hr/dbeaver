{
  initializeDialogUnits(parent);
  final DatabaseConsumerSettings settings=getWizard().getPageSettings(this,DatabaseConsumerSettings.class);
  Composite composite=new Composite(parent,SWT.NULL);
  GridLayout gl=new GridLayout();
  gl.marginHeight=0;
  gl.marginWidth=0;
  composite.setLayout(gl);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
{
    Composite containerPanel=new Composite(composite,SWT.NONE);
    containerPanel.setLayout(new GridLayout(4,false));
    containerPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    UIUtils.createControlLabel(containerPanel,"Target container");
    final Label containerIcon=new Label(containerPanel,SWT.NONE);
    containerIcon.setImage(DBIcon.TYPE_UNKNOWN.getImage());
    final Text containerName=new Text(containerPanel,SWT.BORDER | SWT.READ_ONLY);
    containerName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    Button browseButton=new Button(containerPanel,SWT.PUSH);
    browseButton.setImage(DBIcon.TREE_FOLDER.getImage());
    browseButton.setText("...");
    browseButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        IProject activeProject=DBeaverCore.getInstance().getProjectRegistry().getActiveProject();
        if (activeProject != null) {
          final DBNProject rootNode=DBeaverCore.getInstance().getNavigatorModel().getRoot().getProject(activeProject);
          DBNNode node=BrowseObjectDialog.selectObject(getShell(),"Choose container",rootNode.getDatabases(),settings.getContainerNode(),DBSSchema.class,DBSCatalog.class);
          if (node != null) {
            settings.setContainerNode(node);
            containerIcon.setImage(node.getNodeIconDefault());
            containerName.setText(node.getNodeFullName());
          }
        }
      }
    }
);
  }
{
    mappingViewer=new TableViewer(composite,SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
    mappingViewer.getTable().setLayoutData(new GridData(GridData.FILL_BOTH));
    mappingViewer.getTable().setLinesVisible(true);
    mappingViewer.getTable().setHeaderVisible(true);
    TableViewerColumn columnSource=new TableViewerColumn(mappingViewer,SWT.LEFT);
    columnSource.setLabelProvider(new CellLabelProvider(){
      @Override public void update(      ViewerCell cell){
        DatabaseConsumerSettings.ContainerMapping mapping=(DatabaseConsumerSettings.ContainerMapping)cell.getElement();
        cell.setText(DBUtils.getObjectFullName(mapping.source));
        cell.setImage(getWizard().getSettings().getProducer().getIcon());
      }
    }
);
    columnSource.getColumn().setText("Source");
    TableViewerColumn columnTarget=new TableViewerColumn(mappingViewer,SWT.LEFT);
    columnTarget.setLabelProvider(new CellLabelProvider(){
      @Override public void update(      ViewerCell cell){
        DatabaseConsumerSettings.ContainerMapping mapping=(DatabaseConsumerSettings.ContainerMapping)cell.getElement();
        String text="";
        Color background=null;
        if (mapping.target != null) {
          text=DBUtils.getObjectFullName(mapping.target);
        }
 else         if (mapping.targetName != null) {
          text=mapping.targetName;
        }
 else {
          text="?";
          background=DBeaverUI.getSharedTextColors().getColor(SharedTextColors.COLOR_BACK_DELETED);
        }
        cell.setText(text);
        cell.setBackground(background);
      }
    }
);
    columnTarget.getColumn().setText("Target");
    TableViewerColumn columnType=new TableViewerColumn(mappingViewer,SWT.LEFT);
    columnType.setLabelProvider(new CellLabelProvider(){
      @Override public void update(      ViewerCell cell){
        DatabaseConsumerSettings.ContainerMapping mapping=(DatabaseConsumerSettings.ContainerMapping)cell.getElement();
        String text="";
        Color background=null;
switch (mapping.mappingType) {
case unspecified:
          text="?";
        background=DBeaverUI.getSharedTextColors().getColor(SharedTextColors.COLOR_BACK_DELETED);
      break;
case table:
    text="table";
  break;
case create:
text="new";
break;
case skip:
text="skip";
break;
}
cell.setText(text);
cell.setBackground(background);
}
}
);
columnType.getColumn().setText("Type");
mappingViewer.setContentProvider(new ListContentProvider());
}
{
Composite buttonsPanel=new Composite(composite,SWT.NONE);
buttonsPanel.setLayout(new GridLayout(3,false));
buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
final Button mapTableButton=new Button(buttonsPanel,SWT.PUSH);
mapTableButton.setImage(DBIcon.TREE_TABLE.getImage());
mapTableButton.setText("Existing table ...");
mapTableButton.setEnabled(false);
final Button createNewButton=new Button(buttonsPanel,SWT.PUSH);
createNewButton.setImage(DBIcon.TREE_VIEW.getImage());
createNewButton.setText("Create new ...");
createNewButton.setEnabled(false);
final Button columnsButton=new Button(buttonsPanel,SWT.PUSH);
columnsButton.setImage(DBIcon.TREE_COLUMNS.getImage());
columnsButton.setText("Columns' mappings ...");
columnsButton.setEnabled(false);
mappingViewer.addSelectionChangedListener(new ISelectionChangedListener(){
@Override public void selectionChanged(SelectionChangedEvent event){
}
}
);
}
setControl(composite);
}
