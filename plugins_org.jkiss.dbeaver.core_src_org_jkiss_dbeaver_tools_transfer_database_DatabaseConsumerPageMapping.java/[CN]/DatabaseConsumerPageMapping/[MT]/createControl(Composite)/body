{
  initializeDialogUnits(parent);
  final DatabaseConsumerSettings settings=getWizard().getPageSettings(this,DatabaseConsumerSettings.class);
  Composite composite=new Composite(parent,SWT.NULL);
  GridLayout gl=new GridLayout();
  gl.marginHeight=0;
  gl.marginWidth=0;
  composite.setLayout(gl);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
{
    Composite containerPanel=new Composite(composite,SWT.NONE);
    containerPanel.setLayout(new GridLayout(4,false));
    containerPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    UIUtils.createControlLabel(containerPanel,"Target container");
    final Label containerIcon=new Label(containerPanel,SWT.NONE);
    containerIcon.setImage(DBIcon.TYPE_UNKNOWN.getImage());
    final Text containerName=new Text(containerPanel,SWT.BORDER | SWT.READ_ONLY);
    containerName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    Button browseButton=new Button(containerPanel,SWT.PUSH);
    browseButton.setImage(DBIcon.TREE_FOLDER.getImage());
    browseButton.setText("...");
    browseButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        IProject activeProject=DBeaverCore.getInstance().getProjectRegistry().getActiveProject();
        if (activeProject != null) {
          final DBNModel navigatorModel=DBeaverCore.getInstance().getNavigatorModel();
          final DBNProject rootNode=navigatorModel.getRoot().getProject(activeProject);
          DBNNode selectedNode=settings.getContainerNode();
          if (selectedNode == null && !settings.getDataMappings().isEmpty()) {
            DBSDataContainer firstSource=settings.getDataMappings().keySet().iterator().next();
            selectedNode=navigatorModel.getNodeByObject(firstSource);
            while (selectedNode != null) {
              if (selectedNode instanceof DBSWrapper && ((DBSWrapper)selectedNode).getObject() instanceof DBSObjectContainer) {
                break;
              }
 else {
                selectedNode=selectedNode.getParentNode();
              }
            }
          }
          DBNNode node=BrowseObjectDialog.selectObject(getShell(),"Choose container",rootNode.getDatabases(),selectedNode,DBSObjectContainer.class);
          if (node != null) {
            settings.setContainerNode(node);
            containerIcon.setImage(node.getNodeIconDefault());
            containerName.setText(node.getNodeFullName());
            mappingViewer.setSelection(mappingViewer.getSelection());
          }
        }
      }
    }
);
  }
{
    mappingViewer=new TableViewer(composite,SWT.BORDER | SWT.SINGLE | SWT.FULL_SELECTION);
    mappingViewer.getTable().setLayoutData(new GridData(GridData.FILL_BOTH));
    mappingViewer.getTable().setLinesVisible(true);
    mappingViewer.getTable().setHeaderVisible(true);
    TableViewerColumn columnSource=new TableViewerColumn(mappingViewer,SWT.LEFT);
    columnSource.setLabelProvider(new MappingLabelProvider(){
      @Override public void update(      ViewerCell cell){
        DatabaseConsumerSettings.ContainerMapping mapping=(DatabaseConsumerSettings.ContainerMapping)cell.getElement();
        cell.setText(DBUtils.getObjectFullName(mapping.source));
        cell.setImage(getWizard().getSettings().getProducer().getIcon());
        super.update(cell);
      }
    }
);
    columnSource.getColumn().setText("Source");
    TableViewerColumn columnTarget=new TableViewerColumn(mappingViewer,SWT.LEFT);
    columnTarget.setLabelProvider(new MappingLabelProvider(){
      @Override public void update(      ViewerCell cell){
        DatabaseConsumerSettings.ContainerMapping mapping=(DatabaseConsumerSettings.ContainerMapping)cell.getElement();
        cell.setText(mapping.getTargetName());
        super.update(cell);
      }
    }
);
    columnTarget.getColumn().setText("Target");
    TableViewerColumn columnType=new TableViewerColumn(mappingViewer,SWT.LEFT);
    columnType.setLabelProvider(new MappingLabelProvider(){
      @Override public void update(      ViewerCell cell){
        DatabaseConsumerSettings.ContainerMapping mapping=(DatabaseConsumerSettings.ContainerMapping)cell.getElement();
        String text="";
switch (mapping.mappingType) {
case unspecified:
          text="?";
        break;
case existing:
      text="table";
    break;
case create:
  text="new";
break;
case skip:
text="skip";
break;
}
cell.setText(text);
super.update(cell);
}
}
);
columnType.getColumn().setText("Type");
mappingViewer.setContentProvider(new ListContentProvider());
}
{
Composite buttonsPanel=new Composite(composite,SWT.NONE);
buttonsPanel.setLayout(new GridLayout(3,false));
buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
final Button mapTableButton=new Button(buttonsPanel,SWT.PUSH);
mapTableButton.setImage(DBIcon.TREE_TABLE.getImage());
mapTableButton.setText("Existing table ...");
mapTableButton.setEnabled(false);
mapTableButton.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
mapExistingTable(getSelectedMapping());
}
}
);
final Button createNewButton=new Button(buttonsPanel,SWT.PUSH);
createNewButton.setImage(DBIcon.TREE_VIEW.getImage());
createNewButton.setText("Create new ...");
createNewButton.setEnabled(false);
createNewButton.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
mapNewTable(getSelectedMapping());
}
}
);
final Button columnsButton=new Button(buttonsPanel,SWT.PUSH);
columnsButton.setImage(DBIcon.TREE_COLUMNS.getImage());
columnsButton.setText("Columns' mappings ...");
columnsButton.setEnabled(false);
columnsButton.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
mapColumns(getSelectedMapping());
}
}
);
mappingViewer.addSelectionChangedListener(new ISelectionChangedListener(){
@Override public void selectionChanged(SelectionChangedEvent event){
DatabaseConsumerSettings.ContainerMapping mapping=getSelectedMapping();
mapTableButton.setEnabled(mapping != null);
createNewButton.setEnabled(mapping != null && settings.getContainerNode() != null);
columnsButton.setEnabled(mapping != null && mapping.mappingType != DatabaseConsumerSettings.MappingType.unspecified);
}
}
);
mappingViewer.addDoubleClickListener(new IDoubleClickListener(){
@Override public void doubleClick(DoubleClickEvent event){
DatabaseConsumerSettings.ContainerMapping selectedMapping=getSelectedMapping();
if (selectedMapping != null) {
if (selectedMapping.mappingType == DatabaseConsumerSettings.MappingType.unspecified) {
mapExistingTable(selectedMapping);
}
 else {
mapColumns(selectedMapping);
}
}
}
}
);
}
setControl(composite);
}
