{
  mappingViewer=new TreeViewer(composite,SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
  mappingViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  mappingViewer.getTree().setLinesVisible(true);
  mappingViewer.getTree().setHeaderVisible(true);
  TreeViewerColumn columnSource=new TreeViewerColumn(mappingViewer,SWT.LEFT);
  columnSource.setLabelProvider(new MappingLabelProvider(){
    @Override public void update(    ViewerCell cell){
      DatabaseMappingObject mapping=(DatabaseMappingObject)cell.getElement();
      cell.setText(DBUtils.getObjectFullName(mapping.getSource(),DBPEvaluationContext.UI));
      if (mapping.getIcon() != null) {
        cell.setImage(DBeaverIcons.getImage(mapping.getIcon()));
      }
      super.update(cell);
    }
  }
);
  columnSource.getColumn().setText("Source");
  TreeViewerColumn columnTarget=new TreeViewerColumn(mappingViewer,SWT.LEFT);
  columnTarget.setLabelProvider(new MappingLabelProvider(){
    @Override public void update(    ViewerCell cell){
      DatabaseMappingObject mapping=(DatabaseMappingObject)cell.getElement();
      cell.setText(mapping.getTargetName());
      if (mapping.getMappingType() == DatabaseMappingType.unspecified) {
        cell.setBackground(DBeaverUI.getSharedTextColors().getColor(SharedTextColors.COLOR_WARNING));
      }
 else {
        cell.setBackground(null);
      }
      super.update(cell);
    }
  }
);
  columnTarget.getColumn().setText("Target");
  columnTarget.setEditingSupport(new EditingSupport(mappingViewer){
    @Override protected CellEditor getCellEditor(    Object element){
      try {
        CellEditor targetEditor=createTargetEditor(element);
        setErrorMessage(null);
        return targetEditor;
      }
 catch (      DBException e) {
        setErrorMessage(e.getMessage());
        return null;
      }
    }
    @Override protected boolean canEdit(    Object element){
      return true;
    }
    @Override protected Object getValue(    Object element){
      DatabaseMappingObject mapping=(DatabaseMappingObject)element;
      if (mapping.getMappingType() == DatabaseMappingType.unspecified) {
        return mapping.getSource().getName();
      }
      if (mapping instanceof DatabaseMappingContainer) {
        if (mapping.getMappingType() == DatabaseMappingType.existing) {
          return ((DatabaseMappingContainer)mapping).getTarget();
        }
        return mapping.getTargetName();
      }
 else {
        if (mapping.getMappingType() == DatabaseMappingType.existing) {
          return ((DatabaseMappingAttribute)mapping).getTarget();
        }
        return mapping.getTargetName();
      }
    }
    @Override protected void setValue(    Object element,    Object value){
      try {
        final DatabaseConsumerSettings settings=getWizard().getPageSettings(DatabaseConsumerPageMapping.this,DatabaseConsumerSettings.class);
        String name=CommonUtils.toString(value);
        DBPDataSource dataSource=settings.getTargetDataSource((DatabaseMappingObject)element);
        if (!name.equals(DatabaseMappingAttribute.TARGET_NAME_SKIP) && !name.equals(TARGET_NAME_BROWSE) && dataSource != null) {
          name=DBObjectNameCaseTransformer.transformName(dataSource,name);
        }
        setMappingTarget((DatabaseMappingObject)element,name);
        mappingViewer.refresh();
        mappingViewer.setSelection(mappingViewer.getSelection());
        updatePageCompletion();
        setErrorMessage(null);
      }
 catch (      DBException e) {
        setErrorMessage(e.getMessage());
      }
    }
  }
);
  TreeViewerColumn columnMapping=new TreeViewerColumn(mappingViewer,SWT.LEFT);
  columnMapping.setLabelProvider(new MappingLabelProvider(){
    @Override public void update(    ViewerCell cell){
      DatabaseMappingObject mapping=(DatabaseMappingObject)cell.getElement();
      String text="";
switch (mapping.getMappingType()) {
case unspecified:
        text="?";
      break;
case existing:
    text="existing";
  break;
case create:
text="new";
break;
case skip:
text="skip";
break;
}
cell.setText(text);
super.update(cell);
}
}
);
columnMapping.getColumn().setText("Mapping");
mappingViewer.setContentProvider(new TreeContentProvider(){
@Override public boolean hasChildren(Object element){
return element instanceof DatabaseMappingContainer;
}
@Override public Object[] getChildren(Object parentElement){
if (parentElement instanceof DatabaseMappingContainer) {
return ((DatabaseMappingContainer)parentElement).getAttributeMappings(getContainer()).toArray();
}
return null;
}
}
);
}
