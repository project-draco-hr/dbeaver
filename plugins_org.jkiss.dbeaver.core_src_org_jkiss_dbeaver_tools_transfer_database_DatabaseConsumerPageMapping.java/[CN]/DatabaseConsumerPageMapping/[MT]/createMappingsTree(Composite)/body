{
  mappingViewer=new TreeViewer(composite,SWT.BORDER | SWT.SINGLE | SWT.FULL_SELECTION);
  mappingViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  mappingViewer.getTree().setLinesVisible(true);
  mappingViewer.getTree().setHeaderVisible(true);
  TreeViewerColumn columnSource=new TreeViewerColumn(mappingViewer,SWT.LEFT);
  columnSource.setLabelProvider(new MappingLabelProvider(){
    @Override public void update(    ViewerCell cell){
      DatabaseMappingObject mapping=(DatabaseMappingObject)cell.getElement();
      cell.setText(mapping.getSourceName());
      cell.setImage(mapping.getIcon());
      super.update(cell);
    }
  }
);
  columnSource.getColumn().setText("Source");
  TreeViewerColumn columnTarget=new TreeViewerColumn(mappingViewer,SWT.LEFT);
  columnTarget.setLabelProvider(new MappingLabelProvider(){
    @Override public void update(    ViewerCell cell){
      DatabaseMappingObject mapping=(DatabaseMappingObject)cell.getElement();
      cell.setText(mapping.getTargetName());
      if (mapping.getMappingType() == DatabaseMappingType.unspecified) {
        cell.setBackground(DBeaverUI.getSharedTextColors().getColor(SharedTextColors.COLOR_BACK_DELETED));
      }
 else {
        cell.setBackground(null);
      }
      super.update(cell);
    }
  }
);
  columnTarget.getColumn().setText("Target");
  columnTarget.setEditingSupport(new EditingSupport(mappingViewer){
    @Override protected CellEditor getCellEditor(    Object element){
      java.util.List<String> items=new ArrayList<String>();
      items.add("[skip]");
      items.add("[browse]");
      if (element instanceof DatabaseMappingContainer) {
      }
 else {
      }
      CustomComboBoxCellEditor editor=new CustomComboBoxCellEditor(mappingViewer.getTree(),items.toArray(new String[items.size()]),SWT.DROP_DOWN | SWT.READ_ONLY);
      return editor;
    }
    @Override protected boolean canEdit(    Object element){
      return true;
    }
    @Override protected Object getValue(    Object element){
      if (element instanceof DatabaseMappingContainer) {
        return ((DatabaseMappingContainer)element).getTargetName();
      }
 else {
        return ((DatabaseMappingAttribute)element).getTargetName();
      }
    }
    @Override protected void setValue(    Object element,    Object value){
    }
  }
);
  TreeViewerColumn columnType=new TreeViewerColumn(mappingViewer,SWT.LEFT);
  columnType.setLabelProvider(new MappingLabelProvider(){
    @Override public void update(    ViewerCell cell){
      DatabaseMappingObject mapping=(DatabaseMappingObject)cell.getElement();
      String text="";
switch (mapping.getMappingType()) {
case unspecified:
        text="?";
      break;
case existing:
    text="table";
  break;
case create:
text="new";
break;
case skip:
text="skip";
break;
}
cell.setText(text);
super.update(cell);
}
}
);
columnType.getColumn().setText("Type");
mappingViewer.setContentProvider(new TreeContentProvider(){
@Override public boolean hasChildren(Object element){
return element instanceof DatabaseMappingContainer;
}
@Override public Object[] getChildren(Object parentElement){
if (parentElement instanceof DatabaseMappingContainer) {
return ((DatabaseMappingContainer)parentElement).getAttributeMappings(getWizard().getContainer()).toArray();
}
return null;
}
}
);
}
