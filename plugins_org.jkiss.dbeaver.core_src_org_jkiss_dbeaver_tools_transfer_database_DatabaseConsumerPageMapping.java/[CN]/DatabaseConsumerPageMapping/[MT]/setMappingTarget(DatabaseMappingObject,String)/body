{
  if (name.equals(DatabaseMappingAttribute.TARGET_NAME_SKIP)) {
    if (mapping instanceof DatabaseMappingAttribute) {
      ((DatabaseMappingAttribute)mapping).setMappingType(DatabaseMappingType.skip);
    }
 else {
      ((DatabaseMappingContainer)mapping).setMappingType(getWizard().getContainer(),DatabaseMappingType.skip);
    }
  }
 else   if (name.equals(TARGET_NAME_BROWSE)) {
    mapExistingTable((DatabaseMappingContainer)mapping);
  }
 else {
    final DatabaseConsumerSettings settings=getWizard().getPageSettings(this,DatabaseConsumerSettings.class);
    if (mapping instanceof DatabaseMappingContainer) {
      DatabaseMappingContainer containerMapping=(DatabaseMappingContainer)mapping;
      if (settings.getContainer() != null) {
        DBSObjectContainer container=settings.getContainer();
        for (        DBSObject child : container.getChildren(VoidProgressMonitor.INSTANCE)) {
          if (child instanceof DBSDataManipulator && name.equalsIgnoreCase(child.getName())) {
            containerMapping.setTarget((DBSDataManipulator)child);
            containerMapping.setMappingType(getWizard().getContainer(),DatabaseMappingType.existing);
            return;
          }
        }
      }
      containerMapping.setMappingType(getWizard().getContainer(),DatabaseMappingType.create);
      ((DatabaseMappingContainer)mapping).setTargetName(name);
    }
 else {
      DatabaseMappingAttribute attrMapping=(DatabaseMappingAttribute)mapping;
      if (attrMapping.getParent().getTarget() instanceof DBSEntity) {
        DBSEntity parentEntity=(DBSEntity)attrMapping.getParent().getTarget();
        for (        DBSEntityAttribute attr : parentEntity.getAttributes(VoidProgressMonitor.INSTANCE)) {
          if (name.equalsIgnoreCase(attr.getName())) {
            attrMapping.setMappingType(DatabaseMappingType.existing);
            attrMapping.setTarget(attr);
            return;
          }
        }
      }
      attrMapping.setMappingType(DatabaseMappingType.create);
      attrMapping.setTargetName(name);
    }
  }
}
