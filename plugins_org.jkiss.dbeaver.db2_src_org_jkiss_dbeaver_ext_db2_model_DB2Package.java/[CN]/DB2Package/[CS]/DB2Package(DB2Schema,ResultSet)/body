{
  super(schema,JDBCUtils.safeGetStringTrimmed(dbResult,"PKGNAME"),true);
  DB2DataSource db2DataSource=(DB2DataSource)schema.getDataSource();
  this.owner=JDBCUtils.safeGetString(dbResult,"OWNER");
  String defaultSchemaName=JDBCUtils.safeGetStringTrimmed(dbResult,"DEFAULT_SCHEMA");
  this.defaultSchema=getDataSource().getSchema(VoidProgressMonitor.INSTANCE,defaultSchemaName);
  this.uniqueId=JDBCUtils.safeGetString(dbResult,"UNIQUE_ID");
  this.valid=JDBCUtils.safeGetBoolean(dbResult,"VALID",DB2YesNo.Y.name());
  this.version=JDBCUtils.safeGetString(dbResult,"PKGVERSION");
  this.totalSections=JDBCUtils.safeGetInteger(dbResult,"TOTAL_SECT");
  this.dateTimeFormat=JDBCUtils.safeGetString(dbResult,"FORMAT");
  this.isolation=JDBCUtils.safeGetString(dbResult,"ISOLATION");
  this.blocking=JDBCUtils.safeGetString(dbResult,"BLOCKING");
  this.insertBuf=JDBCUtils.safeGetBoolean(dbResult,"INSERT_BUF",DB2YesNo.Y.name());
  this.langLevel=JDBCUtils.safeGetString(dbResult,"LANG_LEVEL");
  this.funcPath=JDBCUtils.safeGetString(dbResult,"FUNC_PATH");
  this.queryOpt=JDBCUtils.safeGetInteger(dbResult,"QUERYOPT");
  this.degree=JDBCUtils.safeGetString(dbResult,"DEGREE");
  this.multiNodePlan=JDBCUtils.safeGetBoolean(dbResult,"MULTINODE_PLANS",DB2YesNo.Y.name());
  this.intraParallel=JDBCUtils.safeGetString(dbResult,"INTRA_PARALLEL");
  this.validate=JDBCUtils.safeGetString(dbResult,"VALIDATE");
  this.dynamicRules=JDBCUtils.safeGetString(dbResult,"DYNAMICRULES");
  this.sqlerror=JDBCUtils.safeGetString(dbResult,"SQLERROR");
  this.lastBindTime=JDBCUtils.safeGetTimestamp(dbResult,"LAST_BIND_TIME");
  this.explicitBindTime=JDBCUtils.safeGetTimestamp(dbResult,"EXPLICIT_BIND_TIME");
  this.remarks=JDBCUtils.safeGetString(dbResult,"REMARKS");
  if (db2DataSource.isAtLeastV9_5()) {
    this.ownerType=CommonUtils.valueOf(DB2OwnerType.class,JDBCUtils.safeGetString(dbResult,"OWNERTYPE"));
  }
  if (db2DataSource.isAtLeastV9_7()) {
    this.firstBindTime=JDBCUtils.safeGetTimestamp(dbResult,"CREATE_TIME");
    this.alterTime=JDBCUtils.safeGetTimestamp(dbResult,"ALTER_TIME");
    this.concurrentAccessResolution=JDBCUtils.safeGetString(dbResult,"CONCURRENTACCESSRESOLUTION");
    this.lastUsed=JDBCUtils.safeGetDate(dbResult,"LASTUSED");
    this.id=JDBCUtils.safeGetLong(dbResult,"PKGID");
  }
  if (schema.getDataSource().isAtLeastV10_1()) {
    this.busTimeSensitive=JDBCUtils.safeGetBoolean(dbResult,"BUSTIMESENSITIVE",DB2YesNo.Y.name());
    this.sysTimeSensitive=JDBCUtils.safeGetBoolean(dbResult,"SYSTIMESENSITIVE",DB2YesNo.Y.name());
    this.keepDynamic=JDBCUtils.safeGetBoolean(dbResult,"KEEPDYNAMIC",DB2YesNo.Y.name());
    this.staticAsDynamic=JDBCUtils.safeGetBoolean(dbResult,"STATICASDYNAMIC",DB2YesNo.Y.name());
  }
  packageDepCache=new JDBCObjectSimpleCache<DB2Package,DB2PackageDep>(DB2PackageDep.class,C_DEP,schema.getName(),getName());
  packageStatementsCache=new JDBCObjectSimpleCache<DB2Package,DB2PackageStatement>(DB2PackageStatement.class,C_STM,schema.getName(),getName());
}
