{
  super(owner,JDBCUtils.safeGetStringTrimmed(dbResult,"TYPENAME"),true);
  DB2DataSource db2DataSource=(DB2DataSource)owner.getDataSource();
  this.db2TypeId=JDBCUtils.safeGetInteger(dbResult,"TYPEID");
  this.ownerCol=JDBCUtils.safeGetString(dbResult,"OWNER");
  this.sourceSchemaName=JDBCUtils.safeGetStringTrimmed(dbResult,"SOURCESCHEMA");
  this.sourceName=JDBCUtils.safeGetString(dbResult,"SOURCENAME");
  this.metaType=CommonUtils.valueOf(DB2DataTypeMetaType.class,JDBCUtils.safeGetString(dbResult,"METATYPE"));
  this.length=JDBCUtils.safeGetInteger(dbResult,"LENGTH");
  this.scale=JDBCUtils.safeGetInteger(dbResult,"SCALE");
  this.createTime=JDBCUtils.safeGetTimestamp(dbResult,"CREATE_TIME");
  this.alterTime=JDBCUtils.safeGetTimestamp(dbResult,"ALTER_TIME");
  this.remarks=JDBCUtils.safeGetString(dbResult,"REMARKS");
  if (db2DataSource.isAtLeastV9_5()) {
    this.ownerType=CommonUtils.valueOf(DB2OwnerType.class,JDBCUtils.safeGetString(dbResult,"OWNERTYPE"));
  }
  if (db2DataSource.isAtLeastV9_7()) {
    this.sourceModuleName=JDBCUtils.safeGetStringTrimmed(dbResult,"SOURCEMODULENAME");
  }
  if (db2DataSource.isAtLeastV10_5()) {
    this.lastRegenTime=JDBCUtils.safeGetTimestamp(dbResult,"LAST_REGEN_TIME");
    this.constraintText=JDBCUtils.safeGetString(dbResult,"CONSTRAINT_TEXT");
  }
  if (owner instanceof DB2Schema) {
    this.db2Schema=(DB2Schema)owner;
  }
 else {
    if (owner instanceof DB2Module) {
      this.db2Schema=((DB2Module)owner).getSchema();
    }
 else {
      String schemaName=JDBCUtils.safeGetStringTrimmed(dbResult,"TYPESCHEMA");
      try {
        this.db2Schema=db2DataSource.getSchema(VoidProgressMonitor.INSTANCE,schemaName);
      }
 catch (      DBException e) {
        LOG.error("Impossible! Schema '" + schemaName + "' for dataType '"+ name+ "' not found??",e);
      }
    }
  }
  if ((db2Schema != null) && (db2Schema.getName().equals(DB2Constants.SYSTEM_DATATYPE_SCHEMA))) {
    fullyQualifiedName=name;
  }
 else {
    fullyQualifiedName=db2Schema.getName() + "." + name;
  }
  TypeDesc tempTypeDesc=null;
  if (db2Schema.getName().equals(DB2Constants.SYSTEM_DATATYPE_SCHEMA)) {
    tempTypeDesc=PREDEFINED_TYPES.get(name);
  }
  if (tempTypeDesc == null) {
switch (metaType) {
case R:
      tempTypeDesc=new TypeDesc(DBPDataKind.STRUCT,Types.STRUCT,null,null,null);
    break;
case A:
case L:
  tempTypeDesc=new TypeDesc(DBPDataKind.ARRAY,Types.ARRAY,null,null,null);
break;
default :
if ((sourceSchemaName != null) && (sourceSchemaName.equals(DB2Constants.SYSTEM_DATATYPE_SCHEMA))) {
LOG.debug(name + " is a User Defined Type base on a System Data Type.");
tempTypeDesc=PREDEFINED_TYPES.get(sourceName);
}
 else {
LOG.debug(name + " is a User Defined Type base on another UDT. Set its DBPDataKind to UNKNOWN/OTHER");
tempTypeDesc=new TypeDesc(DBPDataKind.UNKNOWN,Types.OTHER,null,null,null);
}
break;
}
}
this.typeDesc=tempTypeDesc;
if ((parent instanceof DB2Schema) || (parent instanceof DB2Module)) {
parentNode=parent;
}
 else {
if (parent instanceof DB2DataSource) {
parentNode=((DB2DataSource)parent).getContainer();
}
}
}
