{
  ownerNode.library.resolve(monitor);
  Collection<? extends DBPDriverLibrary> dependencies=ownerNode.library.getDependencies(monitor);
  if (dependencies != null && !dependencies.isEmpty()) {
    for (    DBPDriverLibrary dep : dependencies) {
      DependencyNode node=new DependencyNode(ownerNode,dep);
      DependencyNode prevNode=libMap.get(node.library.getId());
      if (prevNode == null || prevNode.depth > node.depth) {
        libMap.put(node.library.getId(),node);
        if (prevNode != null) {
          prevNode.duplicate=true;
        }
      }
 else {
        node.duplicate=true;
      }
      ownerNode.dependencies.add(node);
    }
    for (    DependencyNode node : ownerNode.dependencies) {
      if (!node.duplicate) {
        resolveDependencies(monitor,node,libMap);
      }
    }
  }
}
