{
  Map<String,GenericPackage> packageMap=null;
  GenericDataSource dataSource=container.getDataSource();
  GenericMetaObject procObject=dataSource.getMetaObject(GenericConstants.OBJECT_PROCEDURE);
  try (JDBCSession session=dataSource.getDefaultContext(true).openSession(monitor,DBCExecutionPurpose.META,"Load procedures")){
    JDBCResultSet dbResult=session.getMetaData().getProcedures(container.getCatalog() == null ? null : container.getCatalog().getName(),container.getSchema() == null ? null : container.getSchema().getName(),dataSource.getAllObjectsPattern());
    try {
      while (dbResult.next()) {
        if (monitor.isCanceled()) {
          break;
        }
        String procedureCatalog=GenericUtils.safeGetStringTrimmed(procObject,dbResult,JDBCConstants.PROCEDURE_CAT);
        String procedureName=GenericUtils.safeGetStringTrimmed(procObject,dbResult,JDBCConstants.PROCEDURE_NAME);
        String specificName=GenericUtils.safeGetStringTrimmed(procObject,dbResult,JDBCConstants.SPECIFIC_NAME);
        int procTypeNum=GenericUtils.safeGetInt(procObject,dbResult,JDBCConstants.PROCEDURE_TYPE);
        String remarks=GenericUtils.safeGetString(procObject,dbResult,JDBCConstants.REMARKS);
        DBSProcedureType procedureType;
switch (procTypeNum) {
case DatabaseMetaData.procedureNoResult:
          procedureType=DBSProcedureType.PROCEDURE;
        break;
case DatabaseMetaData.procedureReturnsResult:
      procedureType=DBSProcedureType.FUNCTION;
    break;
case DatabaseMetaData.procedureResultUnknown:
  procedureType=DBSProcedureType.PROCEDURE;
break;
default :
procedureType=DBSProcedureType.UNKNOWN;
break;
}
if (specificName == null && procedureName.indexOf(';') != -1) {
specificName=procedureName;
procedureName=procedureName.substring(0,procedureName.lastIndexOf(';'));
}
String packageName=null;
GenericPackage procedurePackage=null;
if (!CommonUtils.isEmpty(procedureCatalog) && CommonUtils.isEmpty(dataSource.getCatalogs())) {
packageName=procedureCatalog;
}
if (!CommonUtils.isEmpty(packageName)) {
if (packageMap == null) {
packageMap=new TreeMap<>();
}
procedurePackage=packageMap.get(packageName);
if (procedurePackage == null) {
procedurePackage=new GenericPackage(container,packageName,true);
packageMap.put(packageName,procedurePackage);
container.addPackage(procedurePackage);
}
}
final GenericProcedure procedure=createProcedureImpl(procedurePackage != null ? procedurePackage : container,procedureName,specificName,remarks,procedureType,null);
if (procedurePackage != null) {
procedurePackage.addProcedure(procedure);
}
 else {
container.addProcedure(procedure);
}
}
}
  finally {
dbResult.close();
}
try {
dbResult=session.getMetaData().getFunctions(container.getCatalog() == null ? null : container.getCatalog().getName(),container.getSchema() == null ? null : container.getSchema().getName(),dataSource.getAllObjectsPattern());
try {
while (dbResult.next()) {
if (monitor.isCanceled()) {
break;
}
String functionName=GenericUtils.safeGetStringTrimmed(procObject,dbResult,JDBCConstants.FUNCTION_NAME);
String specificName=GenericUtils.safeGetStringTrimmed(procObject,dbResult,JDBCConstants.SPECIFIC_NAME);
int funcTypeNum=GenericUtils.safeGetInt(procObject,dbResult,JDBCConstants.FUNCTION_TYPE);
String remarks=GenericUtils.safeGetString(procObject,dbResult,JDBCConstants.REMARKS);
GenericFunctionResultType functionResultType;
switch (funcTypeNum) {
case DatabaseMetaData.functionNoTable:
functionResultType=GenericFunctionResultType.NO_TABLE;
break;
case DatabaseMetaData.functionReturnsTable:
functionResultType=GenericFunctionResultType.TABLE;
break;
default :
functionResultType=GenericFunctionResultType.UNKNOWN;
break;
}
final GenericProcedure procedure=createProcedureImpl(container,functionName,specificName,remarks,DBSProcedureType.FUNCTION,functionResultType);
container.addProcedure(procedure);
}
}
  finally {
dbResult.close();
}
}
 catch (Throwable e) {
log.debug("Can't read generic functions",e);
}
}
 catch (SQLException e) {
throw new DBException(e,dataSource);
}
}
