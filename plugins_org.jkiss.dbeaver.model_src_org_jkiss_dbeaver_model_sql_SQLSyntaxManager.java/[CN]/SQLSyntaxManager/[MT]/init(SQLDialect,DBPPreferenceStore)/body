{
  this.statementDelimiters.clear();
  this.sqlDialect=dialect;
  this.quoteSymbol=sqlDialect.getIdentifierQuoteString();
  this.structSeparator=sqlDialect.getStructSeparator();
  this.catalogSeparator=sqlDialect.getCatalogSeparator();
  this.sqlDialect.getSearchStringEscape();
  this.escapeChar='\\';
  if (!preferenceStore.getBoolean(ModelPreferences.SCRIPT_IGNORE_NATIVE_DELIMITER)) {
    this.statementDelimiters.add(sqlDialect.getScriptDelimiter().toLowerCase());
  }
  String extraDelimiters=preferenceStore.getString(ModelPreferences.SCRIPT_STATEMENT_DELIMITER);
  StringTokenizer st=new StringTokenizer(extraDelimiters," \t,");
  while (st.hasMoreTokens()) {
    this.statementDelimiters.add(st.nextToken());
  }
  this.parametersEnabled=preferenceStore.getBoolean(ModelPreferences.SQL_PARAMETERS_ENABLED);
  this.anonymousParametersEnabled=preferenceStore.getBoolean(ModelPreferences.SQL_ANONYMOUS_PARAMETERS_ENABLED);
  String markString=preferenceStore.getString(ModelPreferences.SQL_ANONYMOUS_PARAMETERS_MARK);
  if (CommonUtils.isEmpty(markString)) {
    this.anonymousParameterMark=SQLConstants.DEFAULT_PARAMETER_MARK;
  }
 else {
    this.anonymousParameterMark=markString.charAt(0);
  }
  String paramPrefixString=preferenceStore.getString(ModelPreferences.SQL_NAMED_PARAMETERS_PREFIX);
  if (CommonUtils.isEmpty(paramPrefixString)) {
    this.namedParameterPrefix=SQLConstants.DEFAULT_PARAMETER_PREFIX;
  }
 else {
    this.namedParameterPrefix=paramPrefixString.charAt(0);
  }
}
