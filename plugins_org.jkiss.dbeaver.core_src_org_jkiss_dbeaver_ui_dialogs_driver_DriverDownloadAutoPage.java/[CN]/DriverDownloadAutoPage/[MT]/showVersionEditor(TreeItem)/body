{
  disposeOldEditor();
  final DBPDriverDependencies.DependencyNode dependencyNode=(DBPDriverDependencies.DependencyNode)item.getData();
  if (dependencyNode == null || dependencyNode.library == null || !dependencyNode.library.isDownloadable()) {
    return;
  }
  final List<String> allVersions=new ArrayList<>();
  try {
    getContainer().run(true,true,new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        try {
          allVersions.addAll(dependencyNode.library.getAvailableVersions(new DefaultProgressMonitor(monitor)));
        }
 catch (        IOException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    UIUtils.showErrorDialog(getShell(),"Versions","Error reading versions",e.getTargetException());
    return;
  }
catch (  InterruptedException e) {
    return;
  }
  final String currentVersion=dependencyNode.library.getVersion();
  if (currentVersion != null && !allVersions.contains(currentVersion)) {
    allVersions.add(currentVersion);
  }
  final Combo editor=new Combo(filesTree,SWT.DROP_DOWN | SWT.READ_ONLY);
  int versionIndex=-1;
  for (int i=0; i < allVersions.size(); i++) {
    String version=allVersions.get(i);
    editor.add(version);
    if (version.equals(currentVersion)) {
      versionIndex=i;
    }
  }
  if (versionIndex >= 0) {
    editor.select(versionIndex);
  }
  editor.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String newVersion=editor.getItem(editor.getSelectionIndex());
      disposeOldEditor();
      setLibraryVersion(dependencyNode.library,newVersion);
    }
  }
);
  treeEditor.setEditor(editor,item,1);
  editor.setListVisible(true);
}
