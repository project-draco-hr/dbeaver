{
  try {
    new RunnableContextDelegate(getContainer()).run(true,true,new DBRRunnableWithProgress(){
      @Override public void run(      DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask("Resolve dependencies",100);
        try {
          getWizard().getDependencies().resolveDependencies(monitor);
        }
 catch (        Exception e) {
          throw new InvocationTargetException(e);
        }
 finally {
          monitor.done();
        }
      }
    }
);
  }
 catch (  InterruptedException e) {
  }
catch (  InvocationTargetException e) {
    UIUtils.showErrorDialog(null,"Resolve libraries","Error resolving driver libraries",e.getTargetException());
    return;
  }
  int totalItems=0;
  for (  DBPDriverDependencies.DependencyNode node : getWizard().getDependencies().getLibraryMap()) {
    DBPDriverLibrary library=node.library;
    TreeItem item=new TreeItem(filesTree,SWT.NONE);
    item.setImage(DBeaverIcons.getImage(library.getIcon()));
    item.setText(0,library.getDisplayName());
    item.setText(1,CommonUtils.notEmpty(library.getVersion()));
    totalItems++;
    if (addDependencies(item,node)) {
      item.setExpanded(true);
      totalItems+=item.getItemCount();
    }
  }
  UIUtils.packColumns(filesTree);
  if (totalItems > 20) {
    totalItems=20;
  }
  Shell shell=getContainer().getShell();
  shell.setSize(shell.getSize().x,shell.getSize().y + filesTree.getItemHeight() * totalItems);
  shell.layout();
}
