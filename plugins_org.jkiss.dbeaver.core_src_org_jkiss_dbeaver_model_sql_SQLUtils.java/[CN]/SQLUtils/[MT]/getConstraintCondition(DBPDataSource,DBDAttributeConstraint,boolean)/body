{
  String criteria=constraint.getCriteria();
  if (!CommonUtils.isEmpty(criteria)) {
    final char firstChar=criteria.trim().charAt(0);
    if (!Character.isLetter(firstChar) && firstChar != '=' && firstChar != '>' && firstChar != '<' && firstChar != '!') {
      return '=' + criteria;
    }
 else {
      return criteria;
    }
  }
 else   if (constraint.getOperator() != null) {
    DBCLogicalOperator operator=constraint.getOperator();
    StringBuilder conString=new StringBuilder();
    if (constraint.isReverseOperator()) {
      conString.append("NOT ");
    }
    conString.append(operator.getStringValue());
    if (operator.getArgumentCount() > 0) {
      for (int i=0; i < operator.getArgumentCount(); i++) {
        if (i > 0) {
          conString.append(" AND");
        }
        if (inlineCriteria) {
          conString.append(convertValueToSQL(dataSource,constraint.getAttribute(),constraint.getValue()));
        }
 else {
          conString.append(" ?");
        }
      }
    }
    return conString.toString();
  }
 else {
    return null;
  }
}
