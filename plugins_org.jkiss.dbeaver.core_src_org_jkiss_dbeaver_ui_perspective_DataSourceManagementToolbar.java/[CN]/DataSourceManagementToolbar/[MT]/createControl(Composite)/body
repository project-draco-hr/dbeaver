{
  workbenchWindow.addPageListener(DataSourceManagementToolbar.this);
  IWorkbenchPage activePage=workbenchWindow.getActivePage();
  if (activePage != null) {
    pageOpened(activePage);
  }
  final DBeaverCore core=DBeaverCore.getInstance();
  DataSourceProviderRegistry.getInstance().addDataSourceRegistryListener(DataSourceManagementToolbar.this);
  for (  IProject project : core.getLiveProjects()) {
    if (project.isOpen()) {
      DataSourceRegistry registry=core.getProjectRegistry().getDataSourceRegistry(project);
      if (registry != null) {
        handleRegistryLoad(registry);
      }
    }
  }
  Composite comboGroup=new Composite(parent,SWT.NONE);
  GridLayout gl=new GridLayout(3,false);
  gl.marginWidth=5;
  gl.marginHeight=0;
  comboGroup.setLayout(gl);
  final int fontHeight=parent.getFont().getFontData()[0].getHeight();
  int comboWidth=fontHeight * 20;
  connectionCombo=new CImageCombo(comboGroup,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  GridData gd=new GridData();
  gd.widthHint=comboWidth;
  gd.minimumWidth=comboWidth;
  gd.grabExcessVerticalSpace=true;
  connectionCombo.setLayoutData(gd);
  connectionCombo.setVisibleItemCount(15);
  connectionCombo.setWidthHint(comboWidth);
  connectionCombo.setToolTipText(CoreMessages.toolbar_datasource_selector_combo_datasource_tooltip);
  connectionCombo.add(DBeaverIcons.getImage(DBIcon.TREE_DATABASE),EMPTY_SELECTION_TEXT,null,null);
  connectionCombo.select(0);
  connectionCombo.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      changeDataSourceSelection();
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  comboWidth=fontHeight * 16;
  databaseCombo=new CImageCombo(comboGroup,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  gd=new GridData();
  gd.widthHint=comboWidth;
  gd.minimumWidth=comboWidth;
  gd.grabExcessVerticalSpace=true;
  databaseCombo.setLayoutData(gd);
  databaseCombo.setVisibleItemCount(15);
  databaseCombo.setWidthHint(comboWidth);
  databaseCombo.setToolTipText(CoreMessages.toolbar_datasource_selector_combo_database_tooltip);
  databaseCombo.add(DBeaverIcons.getImage(DBIcon.TREE_DATABASE),EMPTY_SELECTION_TEXT,null,null);
  databaseCombo.select(0);
  databaseCombo.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      changeDataBaseSelection();
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  resultSetSize=new Text(comboGroup,SWT.BORDER);
  resultSetSize.setTextLimit(10);
  gd=new GridData();
  gd.widthHint=fontHeight * 4;
  gd.grabExcessVerticalSpace=true;
  resultSetSize.setLayoutData(gd);
  resultSetSize.setToolTipText(CoreMessages.toolbar_datasource_selector_resultset_segment_size);
  final DBPDataSourceContainer dataSourceContainer=getDataSourceContainer();
  if (dataSourceContainer != null) {
    resultSetSize.setText(String.valueOf(dataSourceContainer.getPreferenceStore().getInt(DBeaverPreferences.RESULT_SET_MAX_ROWS)));
  }
  resultSetSize.addVerifyListener(UIUtils.getIntegerVerifyListener(Locale.getDefault()));
  resultSetSize.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      changeResultSetSize();
    }
  }
);
  comboGroup.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      DataSourceManagementToolbar.this.dispose();
    }
  }
);
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      if (workbenchWindow != null && workbenchWindow.getActivePage() != null) {
        setActivePart(workbenchWindow.getActivePage().getActivePart());
      }
    }
  }
);
  return comboGroup;
}
