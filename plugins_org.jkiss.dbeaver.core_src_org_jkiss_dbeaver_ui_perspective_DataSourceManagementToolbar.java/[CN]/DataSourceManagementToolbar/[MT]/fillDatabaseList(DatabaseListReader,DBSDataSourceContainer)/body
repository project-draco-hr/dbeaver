{
  databaseCombo.setRedraw(false);
  try {
    databaseCombo.removeAll();
synchronized (dbListReads) {
      dbListReads.remove(reader);
    }
    if (!reader.enabled || dsContainer.getDataSource() != reader.getExecutionContext().getDataSource()) {
      databaseCombo.setEnabled(reader.enabled);
      return;
    }
    if (databaseCombo.isDisposed()) {
      return;
    }
    if (reader.databasesInfo.list != null && !reader.databasesInfo.list.isEmpty()) {
      DBNModel navigatorModel=DBeaverCore.getInstance().getNavigatorModel();
      for (      DBSObject database : reader.databasesInfo.list) {
        if (database instanceof DBSObjectContainer) {
          DBNDatabaseNode dbNode=navigatorModel.getNodeByObject(database);
          if (dbNode != null) {
            DBPDataSource dataSource=database.getDataSource();
            if (dataSource != null) {
              databaseCombo.add(DBeaverIcons.getImage(dbNode.getNodeIconDefault()),database.getName(),UIUtils.getConnectionColor(dataSource.getContainer().getConnectionInfo()),database);
            }
          }
        }
      }
    }
    if (reader.databasesInfo.active != null) {
      int dbCount=databaseCombo.getItemCount();
      for (int i=0; i < dbCount; i++) {
        String dbName=databaseCombo.getItemText(i);
        if (dbName.equals(reader.databasesInfo.active.getName())) {
          databaseCombo.select(i);
          break;
        }
      }
    }
    databaseCombo.setEnabled(reader.enabled);
  }
  finally {
    databaseCombo.setRedraw(true);
  }
}
