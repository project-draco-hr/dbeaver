{
  Composite composite=UIUtils.createPlaceholder(parent,1);
{
    Composite commonGroup=UIUtils.createControlGroup(composite,CoreMessages.pref_page_sql_editor_group_common,2,GridData.FILL_HORIZONTAL,0);
{
      UIUtils.createControlLabel(commonGroup,CoreMessages.pref_page_sql_editor_label_sql_timeout);
      executeTimeoutText=new Spinner(commonGroup,SWT.BORDER);
      executeTimeoutText.setSelection(0);
      executeTimeoutText.setDigits(0);
      executeTimeoutText.setIncrement(1);
      executeTimeoutText.setMinimum(1);
      executeTimeoutText.setMaximum(100000);
    }
  }
{
    Composite scriptsGroup=UIUtils.createControlGroup(composite,CoreMessages.pref_page_sql_editor_group_scripts,2,GridData.FILL_HORIZONTAL,0);
{
      UIUtils.createControlLabel(scriptsGroup,CoreMessages.pref_page_sql_editor_label_commit_type);
      commitTypeCombo=new Combo(scriptsGroup,SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);
      commitTypeCombo.add(CoreMessages.pref_page_sql_editor_combo_item_script_end,SQLScriptCommitType.AT_END.ordinal());
      commitTypeCombo.add(CoreMessages.pref_page_sql_editor_combo_item_each_line_autocommit,SQLScriptCommitType.AUTOCOMMIT.ordinal());
      commitTypeCombo.add(CoreMessages.pref_page_sql_editor_combo_item_each_spec_line,SQLScriptCommitType.NLINES.ordinal());
      commitTypeCombo.add(CoreMessages.pref_page_sql_editor_combo_item_no_commit,SQLScriptCommitType.NO_COMMIT.ordinal());
    }
{
      UIUtils.createControlLabel(scriptsGroup,CoreMessages.pref_page_sql_editor_label_commit_after_line);
      commitLinesText=new Spinner(scriptsGroup,SWT.BORDER);
      commitLinesText.setSelection(0);
      commitLinesText.setDigits(0);
      commitLinesText.setIncrement(1);
      commitLinesText.setMinimum(1);
      commitLinesText.setMaximum(1024 * 1024);
    }
{
      UIUtils.createControlLabel(scriptsGroup,CoreMessages.pref_page_sql_editor_label_error_handling);
      errorHandlingCombo=new Combo(scriptsGroup,SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);
      errorHandlingCombo.add(CoreMessages.pref_page_sql_editor_combo_item_stop_rollback,SQLScriptErrorHandling.STOP_ROLLBACK.ordinal());
      errorHandlingCombo.add(CoreMessages.pref_page_sql_editor_combo_item_stop_commit,SQLScriptErrorHandling.STOP_COMMIT.ordinal());
      errorHandlingCombo.add(CoreMessages.pref_page_sql_editor_combo_item_ignore,SQLScriptErrorHandling.IGNORE.ordinal());
    }
    fetchResultSetsCheck=UIUtils.createLabelCheckbox(scriptsGroup,CoreMessages.pref_page_sql_editor_checkbox_fetch_resultsets,false);
  }
  Composite composite2=UIUtils.createPlaceholder(composite,2);
  ((GridLayout)composite2.getLayout()).horizontalSpacing=5;
  composite2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
{
    Composite assistGroup=UIUtils.createControlGroup(composite2,"Content assistant",2,GridData.FILL_HORIZONTAL,0);
    assistGroup.setLayoutData(new GridData(GridData.FILL_BOTH | GridData.VERTICAL_ALIGN_BEGINNING));
    csAutoActivationCheck=UIUtils.createLabelCheckbox(assistGroup,"Enable auto activation","Enables the content assistant's auto activation",false);
    UIUtils.createControlLabel(assistGroup,"Auto activation delay");
    csAutoActivationDelaySpinner=new Spinner(assistGroup,SWT.BORDER);
    csAutoActivationDelaySpinner.setSelection(0);
    csAutoActivationDelaySpinner.setDigits(0);
    csAutoActivationDelaySpinner.setIncrement(50);
    csAutoActivationDelaySpinner.setMinimum(0);
    csAutoActivationDelaySpinner.setMaximum(1000000);
    csAutoInsertCheck=UIUtils.createLabelCheckbox(assistGroup,"Auto-insert proposal","Enables the content assistant's auto insertion mode.\nIf enabled, the content assistant inserts a proposal automatically if it is the only proposal.\nIn the case of ambiguities, the user must make the choice.",false);
    UIUtils.createControlLabel(assistGroup,"Insert case");
    csInsertCase=new Combo(assistGroup,SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);
    csInsertCase.add("Default");
    csInsertCase.add("Upper case");
    csInsertCase.add("Lower case");
  }
{
    Composite rulersGroup=UIUtils.createControlGroup(composite2,"Rulers",2,GridData.FILL_HORIZONTAL,0);
    rulersGroup.setLayoutData(new GridData(GridData.FILL_BOTH | GridData.VERTICAL_ALIGN_BEGINNING));
    for (    Object obj : RulerColumnRegistry.getDefault().getColumnDescriptors()) {
      final RulerColumnDescriptor descriptor=(RulerColumnDescriptor)obj;
      if (!descriptor.isGlobal())       continue;
      Button checkbox=UIUtils.createCheckbox(rulersGroup,descriptor.getName(),false);
      rulerChecks.put(descriptor,checkbox);
    }
  }
{
    Composite scriptsGroup=UIUtils.createControlGroup(composite,CoreMessages.pref_page_sql_editor_group_resources,2,GridData.FILL_HORIZONTAL,0);
    autoFoldersCheck=UIUtils.createLabelCheckbox(scriptsGroup,CoreMessages.pref_page_sql_editor_checkbox_put_new_scripts,false);
  }
  return composite;
}
