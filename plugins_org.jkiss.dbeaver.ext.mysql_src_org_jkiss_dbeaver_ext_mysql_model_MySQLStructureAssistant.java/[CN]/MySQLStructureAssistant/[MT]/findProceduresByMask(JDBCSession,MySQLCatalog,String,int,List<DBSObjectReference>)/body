{
  DBRProgressMonitor monitor=session.getProgressMonitor();
  try (JDBCPreparedStatement dbStat=session.prepareStatement("SELECT " + MySQLConstants.COL_ROUTINE_SCHEMA + ","+ MySQLConstants.COL_ROUTINE_NAME+ " FROM "+ MySQLConstants.META_TABLE_ROUTINES+ " WHERE "+ MySQLConstants.COL_ROUTINE_NAME+ " LIKE ? "+ (catalog == null ? "" : " AND " + MySQLConstants.COL_ROUTINE_SCHEMA + "=?")+ " ORDER BY "+ MySQLConstants.COL_ROUTINE_NAME+ " LIMIT "+ maxResults)){
    dbStat.setString(1,procNameMask.toLowerCase(Locale.ENGLISH));
    if (catalog != null) {
      dbStat.setString(2,catalog.getName());
    }
    try (JDBCResultSet dbResult=dbStat.executeQuery()){
      int tableNum=maxResults;
      while (dbResult.next() && tableNum-- > 0) {
        if (monitor.isCanceled()) {
          break;
        }
        final String catalogName=JDBCUtils.safeGetString(dbResult,MySQLConstants.COL_ROUTINE_SCHEMA);
        final String procName=JDBCUtils.safeGetString(dbResult,MySQLConstants.COL_ROUTINE_NAME);
        objects.add(new AbstractObjectReference(procName,dataSource.getCatalog(catalogName),null,MySQLProcedure.class,RelationalObjectType.TYPE_PROCEDURE){
          @Override public DBSObject resolveObject(          DBRProgressMonitor monitor) throws DBException {
            MySQLCatalog procCatalog=catalog != null ? catalog : dataSource.getCatalog(catalogName);
            if (procCatalog == null) {
              throw new DBException("Procedure catalog '" + catalogName + "' not found");
            }
            MySQLProcedure procedure=procCatalog.getProcedure(monitor,procName);
            if (procedure == null) {
              throw new DBException("Procedure '" + procName + "' not found in catalog '"+ procCatalog.getName()+ "'");
            }
            return procedure;
          }
        }
);
      }
    }
   }
 }
