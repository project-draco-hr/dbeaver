{
  String columnName=GenericUtils.safeGetStringTrimmed(columnObject,dbResult,JDBCConstants.COLUMN_NAME);
  int valueType=GenericUtils.safeGetInt(columnObject,dbResult,JDBCConstants.DATA_TYPE);
  int sourceType=GenericUtils.safeGetInt(columnObject,dbResult,JDBCConstants.SOURCE_DATA_TYPE);
  String typeName=GenericUtils.safeGetStringTrimmed(columnObject,dbResult,JDBCConstants.TYPE_NAME);
  long columnSize=GenericUtils.safeGetLong(columnObject,dbResult,JDBCConstants.COLUMN_SIZE);
  boolean isNotNull=GenericUtils.safeGetInt(columnObject,dbResult,JDBCConstants.NULLABLE) == DatabaseMetaData.columnNoNulls;
  int scale=GenericUtils.safeGetInt(columnObject,dbResult,JDBCConstants.DECIMAL_DIGITS);
  int precision=0;
  int radix=GenericUtils.safeGetInt(columnObject,dbResult,JDBCConstants.NUM_PREC_RADIX);
  String defaultValue=GenericUtils.safeGetString(columnObject,dbResult,JDBCConstants.COLUMN_DEF);
  String remarks=GenericUtils.safeGetString(columnObject,dbResult,JDBCConstants.REMARKS);
  long charLength=GenericUtils.safeGetLong(columnObject,dbResult,JDBCConstants.CHAR_OCTET_LENGTH);
  int ordinalPos=GenericUtils.safeGetInt(columnObject,dbResult,JDBCConstants.ORDINAL_POSITION);
  boolean autoIncrement="YES".equals(GenericUtils.safeGetStringTrimmed(columnObject,dbResult,JDBCConstants.IS_AUTOINCREMENT));
  boolean autoGenerated="YES".equals(GenericUtils.safeGetStringTrimmed(columnObject,dbResult,JDBCConstants.IS_AUTOINCREMENT));
  if (typeName.toUpperCase(Locale.ENGLISH).endsWith(GenericConstants.TYPE_MODIFIER_IDENTITY)) {
    autoIncrement=true;
    typeName=typeName.substring(0,typeName.length() - GenericConstants.TYPE_MODIFIER_IDENTITY.length());
  }
{
    DBSDataType dataType=dataSource.getDataType(typeName);
    if (dataType != null) {
      valueType=dataType.getTypeID();
    }
  }
  return new GenericTableColumn(table,columnName,typeName,valueType,sourceType,ordinalPos,columnSize,charLength,scale,precision,radix,isNotNull,remarks,defaultValue,autoIncrement,autoGenerated);
}
