{
  super.createPages();
  DBDContent content=getContent();
  if (content == null) {
    return;
  }
  String contentType=null;
  try {
    contentType=content.getContentType();
  }
 catch (  Exception e) {
    log.error("Could not determine value content type",e);
  }
  long contentLength;
  try {
    contentLength=content.getContentLength();
  }
 catch (  Exception e) {
    log.warn("Could not determine value content length",e);
    contentLength=getEditorInput().getFile().getFullPath().toFile().length();
  }
  MimeType mimeType=ContentUtils.getMimeType(contentType);
  IEditorPart defaultPage=null, preferredPage=null;
  for (  ContentPartInfo contentPart : contentParts) {
    IContentEditorPart editorPart=contentPart.editorPart;
    if (contentLength > editorPart.getMaxContentLength()) {
      continue;
    }
    if (preferredPage != null && editorPart.isOptionalContent()) {
      continue;
    }
    try {
      int index=addPage(editorPart,getEditorInput());
      setPageText(index,editorPart.getContentTypeTitle());
      setPageImage(index,editorPart.getContentTypeImage());
      contentPart.activated=true;
      contentPart.index=index;
      if (mimeType != null && mimeType.getPrimaryType().equals(editorPart.getPreferredMimeType())) {
        defaultPage=editorPart;
      }
      if (editorPart.isPreferredContent()) {
        preferredPage=editorPart;
      }
    }
 catch (    PartInitException e) {
      log.error(e);
    }
  }
  if (preferredPage != null) {
    for (    ContentPartInfo contentPart : contentParts) {
      if (contentPart.activated && contentPart.editorPart != preferredPage && contentPart.editorPart.isOptionalContent()) {
        removePage(contentPart.index);
      }
    }
    setActiveEditor(preferredPage);
  }
 else   if (defaultPage != null) {
    setActiveEditor(defaultPage);
  }
  this.partsLoaded=true;
}
