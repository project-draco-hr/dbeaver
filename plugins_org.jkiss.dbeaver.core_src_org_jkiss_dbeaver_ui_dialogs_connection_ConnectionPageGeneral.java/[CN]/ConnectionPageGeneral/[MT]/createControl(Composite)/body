{
  boldFont=UIUtils.makeBoldFont(parent.getFont());
  Composite group=new Composite(parent,SWT.NONE);
  GridLayout gl=new GridLayout(2,false);
  group.setLayout(gl);
  String connectionName=dataSourceDescriptor == null ? "" : dataSourceDescriptor.getName();
  connectionNameText=UIUtils.createLabelText(group,CoreMessages.dialog_connection_wizard_final_label_connection_name,CommonUtils.toString(connectionName));
  connectionNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      connectionNameChanged=true;
      ConnectionPageGeneral.this.getContainer().updateButtons();
    }
  }
);
{
    UIUtils.createControlLabel(group,"Connection type");
    Composite ctGroup=UIUtils.createPlaceholder(group,2,5);
    connectionTypeCombo=new CImageCombo(ctGroup,SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);
    loadConnectionTypes();
    connectionTypeCombo.select(0);
    connectionTypeCombo.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        DBPConnectionType type=(DBPConnectionType)connectionTypeCombo.getItem(connectionTypeCombo.getSelectionIndex()).getData();
        autocommit.setSelection(type.isAutocommit());
      }
    }
);
    Button pickerButton=new Button(ctGroup,SWT.PUSH);
    pickerButton.setText("Edit");
    pickerButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        DataSourceDescriptor dataSource=getActiveDataSource();
        UIUtils.showPreferencesFor(getControl().getShell(),dataSource.getConnectionConfiguration().getConnectionType(),PrefPageConnectionTypes.PAGE_ID);
        loadConnectionTypes();
        DBPConnectionType connectionType=dataSource.getConnectionConfiguration().getConnectionType();
        connectionTypeCombo.select(connectionType);
        autocommit.setSelection(connectionType.isAutocommit());
      }
    }
);
  }
{
    Composite optionsGroup=new Composite(group,SWT.NONE);
    gl=new GridLayout(2,true);
    gl.verticalSpacing=0;
    gl.horizontalSpacing=5;
    gl.marginHeight=0;
    gl.marginWidth=0;
    optionsGroup.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    optionsGroup.setLayoutData(gd);
    Composite leftSide=UIUtils.createPlaceholder(optionsGroup,1,5);
    leftSide.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING));
    Composite rightSide=UIUtils.createPlaceholder(optionsGroup,1,5);
    rightSide.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING));
{
      Group securityGroup=UIUtils.createControlGroup(leftSide,CoreMessages.dialog_connection_wizard_final_group_security,1,GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING,0);
      savePasswordCheck=UIUtils.createCheckbox(securityGroup,CoreMessages.dialog_connection_wizard_final_checkbox_save_password_locally,dataSourceDescriptor == null || dataSourceDescriptor.isSavePassword());
      savePasswordCheck.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
    }
{
      Group txnGroup=UIUtils.createControlGroup(rightSide,"Connection",2,GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING,0);
      autocommit=UIUtils.createCheckbox(txnGroup,CoreMessages.dialog_connection_wizard_final_checkbox_auto_commit,dataSourceDescriptor != null && dataSourceDescriptor.isDefaultAutoCommit());
      gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
      gd.horizontalSpan=2;
      autocommit.setLayoutData(gd);
      autocommit.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          if (dataSourceDescriptor != null && dataSourceDescriptor.isConnected()) {
            isolationLevel.setEnabled(!autocommit.getSelection());
          }
        }
      }
);
      isolationLevel=UIUtils.createLabelCombo(txnGroup,"Isolation level",SWT.DROP_DOWN | SWT.READ_ONLY);
      isolationLevel.setToolTipText("Default transaction isolation level.");
      defaultSchema=UIUtils.createLabelCombo(txnGroup,"Default schema",SWT.DROP_DOWN);
      defaultSchema.setToolTipText("Name of schema or catalog which will be set as default.");
      UIUtils.createControlLabel(txnGroup,"Bootstrap queries");
      Button queriesConfigButton=UIUtils.createPushButton(txnGroup,"Configure ...",DBeaverIcons.getImage(UIIcon.SQL_SCRIPT));
      if (dataSourceDescriptor != null && !CommonUtils.isEmpty(dataSourceDescriptor.getConnectionConfiguration().getBootstrap().getInitQueries())) {
        queriesConfigButton.setFont(boldFont);
      }
      queriesConfigButton.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          EditBootstrapQueriesDialog dialog=new EditBootstrapQueriesDialog(getShell(),bootstrapQueries,ignoreBootstrapErrors);
          if (dialog.open() == IDialogConstants.OK_ID) {
            bootstrapQueries=dialog.getQueries();
            ignoreBootstrapErrors=dialog.isIgnoreErrors();
          }
        }
      }
);
    }
{
      Group miscGroup=UIUtils.createControlGroup(leftSide,CoreMessages.dialog_connection_wizard_final_group_misc,1,GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL,0);
      showSystemObjects=UIUtils.createCheckbox(miscGroup,CoreMessages.dialog_connection_wizard_final_checkbox_show_system_objects,dataSourceDescriptor == null || dataSourceDescriptor.isShowSystemObjects());
      showSystemObjects.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
      readOnlyConnection=UIUtils.createCheckbox(miscGroup,CoreMessages.dialog_connection_wizard_final_checkbox_connection_readonly,dataSourceDescriptor != null && dataSourceDescriptor.isConnectionReadOnly());
      gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
      readOnlyConnection.setLayoutData(gd);
    }
{
      filtersGroup=UIUtils.createControlGroup(rightSide,CoreMessages.dialog_connection_wizard_final_group_filters,1,GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL,0);
      for (int i=0; i < filters.size(); i++) {
        final FilterInfo filterInfo=filters.get(i);
        filterInfo.link=UIUtils.createLink(filtersGroup,"<a>" + filterInfo.title + "</a>",new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            EditObjectFilterDialog dialog=new EditObjectFilterDialog(getShell(),filterInfo.title,filterInfo.filter != null ? filterInfo.filter : new DBSObjectFilter(),true);
            if (dialog.open() == IDialogConstants.OK_ID) {
              filterInfo.filter=dialog.getFilter();
              if (filterInfo.filter != null && !filterInfo.filter.isEmpty()) {
                filterInfo.link.setFont(boldFont);
              }
 else {
                filterInfo.link.setFont(getFont());
              }
            }
          }
        }
);
      }
    }
  }
{
    Composite buttonsGroup=new Composite(group,SWT.NONE);
    gl=new GridLayout(1,false);
    gl.verticalSpacing=0;
    gl.horizontalSpacing=10;
    gl.marginHeight=0;
    gl.marginWidth=0;
    buttonsGroup.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    buttonsGroup.setLayoutData(gd);
    if (getWizard().isNew()) {
      eventsButton=new Button(buttonsGroup,SWT.PUSH);
      eventsButton.setText("Shell Commands");
      eventsButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
      eventsButton.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          configureEvents();
        }
      }
);
    }
  }
  setControl(group);
  UIUtils.setHelp(group,IHelpContextIds.CTX_CON_WIZARD_FINAL);
}
