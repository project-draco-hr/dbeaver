{
  DBCExecutionContext context=getDataSource().openContext(monitor,DBCExecutionPurpose.UTIL,CoreMessages.controls_resultset_viewer_execute_statement_context_name);
  try {
    monitor.beginTask(CoreMessages.controls_resultset_viewer_monitor_aply_changes,ResultSetPersister.this.deleteStatements.size() + ResultSetPersister.this.insertStatements.size() + ResultSetPersister.this.updateStatements.size());
    try {
      this.autocommit=context.getTransactionManager().isAutoCommit();
    }
 catch (    DBCException e) {
      ResultSetViewer.log.warn("Could not determine autocommit state",e);
      this.autocommit=true;
    }
    if (!this.autocommit && context.getTransactionManager().supportsSavepoints()) {
      try {
        this.savepoint=context.getTransactionManager().setSavepoint(null);
      }
 catch (      Throwable e) {
        ResultSetViewer.log.debug("Could not set savepoint",e);
      }
    }
    try {
      for (      DataStatementInfo statement : ResultSetPersister.this.deleteStatements) {
        if (monitor.isCanceled())         break;
        try {
          DBSDataManipulator dataContainer=getDataManipulator(statement.entity);
          DBSDataManipulator.ExecuteBatch batch=dataContainer.deleteData(context,DBDAttributeValue.getAttributes(statement.keyAttributes));
          try {
            batch.add(DBDAttributeValue.getValues(statement.keyAttributes));
            deleteStats.accumulate(batch.execute());
          }
  finally {
            batch.close();
          }
          processStatementChanges(statement);
        }
 catch (        DBException e) {
          processStatementError(statement,context);
          return e;
        }
        monitor.worked(1);
      }
      for (      DataStatementInfo statement : ResultSetPersister.this.insertStatements) {
        if (monitor.isCanceled())         break;
        try {
          DBSDataManipulator dataContainer=getDataManipulator(statement.entity);
          DBSDataManipulator.ExecuteBatch batch=dataContainer.insertData(context,DBDAttributeValue.getAttributes(statement.keyAttributes),statement.needKeys() ? new KeyDataReceiver(statement) : null);
          try {
            batch.add(DBDAttributeValue.getValues(statement.keyAttributes));
            insertStats.accumulate(batch.execute());
          }
  finally {
            batch.close();
          }
          processStatementChanges(statement);
        }
 catch (        DBException e) {
          processStatementError(statement,context);
          return e;
        }
        monitor.worked(1);
      }
      for (      DataStatementInfo statement : ResultSetPersister.this.updateStatements) {
        if (monitor.isCanceled())         break;
        try {
          DBSDataManipulator dataContainer=getDataManipulator(statement.entity);
          DBSDataManipulator.ExecuteBatch batch=dataContainer.updateData(context,DBDAttributeValue.getAttributes(statement.updateAttributes),DBDAttributeValue.getAttributes(statement.keyAttributes),null);
          try {
            Object[] attributes=new Object[statement.updateAttributes.size() + statement.keyAttributes.size()];
            for (int i=0; i < statement.updateAttributes.size(); i++) {
              attributes[i]=statement.updateAttributes.get(i).getValue();
            }
            for (int i=0; i < statement.keyAttributes.size(); i++) {
              attributes[statement.updateAttributes.size() + i]=statement.keyAttributes.get(i).getValue();
            }
            batch.add(attributes);
            updateStats.accumulate(batch.execute());
          }
  finally {
            batch.close();
          }
          processStatementChanges(statement);
        }
 catch (        DBException e) {
          processStatementError(statement,context);
          return e;
        }
        monitor.worked(1);
      }
      return null;
    }
  finally {
      if (this.savepoint != null) {
        try {
          context.getTransactionManager().releaseSavepoint(this.savepoint);
        }
 catch (        Throwable e) {
          ResultSetViewer.log.debug("Could not release savepoint",e);
        }
      }
    }
  }
  finally {
    monitor.done();
    context.close();
  }
}
