{
  GridData gd;
  Composite libsGroup=new Composite(group,SWT.NONE);
  libsGroup.setLayout(new GridLayout(2,false));
{
    Composite libsListGroup=new Composite(libsGroup,SWT.NONE);
    gd=new GridData(GridData.FILL_BOTH);
    libsListGroup.setLayoutData(gd);
    GridLayout layout=new GridLayout(1,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    libsListGroup.setLayout(layout);
    libTable=new TreeViewer(libsListGroup,SWT.BORDER | SWT.MULTI | SWT.V_SCROLL| SWT.H_SCROLL);
    libTable.setContentProvider(new LibContentProvider());
    libTable.setLabelProvider(new CellLabelProvider(){
      @Override public void update(      ViewerCell cell){
        final Object element=cell.getElement();
        if (element instanceof DBPDriverLibrary) {
          DBPDriverLibrary lib=(DBPDriverLibrary)element;
          String displayName=lib.getDisplayName();
          if (lib.getPreferredVersion() != null) {
            displayName+=" [" + lib.getPreferredVersion() + "]";
          }
          cell.setText(displayName);
          File localFile=lib.getLocalFile();
          if (localFile != null && !localFile.exists()) {
            cell.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
          }
 else           if (!driver.isLibraryResolved(lib)) {
            cell.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_BLUE));
          }
 else {
            cell.setForeground(null);
          }
          cell.setImage(DBeaverIcons.getImage(lib.getIcon()));
        }
 else {
          cell.setText(element.toString());
          cell.setImage(DBeaverIcons.getImage(UIIcon.JAR));
        }
      }
    }
);
    libTable.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));
    libTable.getControl().addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        changeLibSelection();
      }
    }
);
    boolean isReadOnly=!provider.isDriversManagable();
    Composite findClassGroup=new Composite(libsListGroup,SWT.TOP);
    findClassGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    layout=new GridLayout(3,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    findClassGroup.setLayout(layout);
    UIUtils.createControlLabel(findClassGroup,CoreMessages.dialog_edit_driver_label_driver_class);
    classListCombo=new Combo(findClassGroup,SWT.DROP_DOWN | SWT.READ_ONLY);
    classListCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    classListCombo.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        int selIndex=classListCombo.getSelectionIndex();
        if (selIndex >= 0) {
          driverClassText.setText(classListCombo.getItem(selIndex));
        }
      }
    }
);
    classListCombo.setEnabled(!isReadOnly);
    findClassButton=new Button(findClassGroup,SWT.PUSH);
    findClassButton.setText(CoreMessages.dialog_edit_driver_button_bind_class);
    findClassButton.addListener(SWT.Selection,new Listener(){
      @Override public void handleEvent(      Event event){
        try {
          DriverClassFindJob classFinder=new DriverClassFindJob(driver,"java/sql/Driver",true);
          new ProgressMonitorDialog(getShell()).run(true,true,classFinder);
          if (classListCombo != null && !classListCombo.isDisposed()) {
            java.util.List<String> classNames=classFinder.getDriverClassNames();
            classListCombo.setItems(classNames.toArray(new String[classNames.size()]));
            classListCombo.setListVisible(true);
          }
        }
 catch (        InvocationTargetException e) {
          log.error(e.getTargetException());
        }
catch (        InterruptedException e) {
          log.error(e);
        }
      }
    }
);
    findClassButton.setEnabled(!isReadOnly);
  }
  Composite libsControlGroup=new Composite(libsGroup,SWT.TOP);
  libsControlGroup.setLayout(new GridLayout(1,true));
  libsControlGroup.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  UIUtils.createToolButton(libsControlGroup,CoreMessages.dialog_edit_driver_button_add_file,new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog fd=new FileDialog(getShell(),SWT.OPEN | SWT.MULTI);
      fd.setText(CoreMessages.dialog_edit_driver_dialog_open_driver_library);
      fd.setFilterPath(curFolder);
      String[] filterExt={"*.jar;*.zip","*.dll;*.so","*.*","*"};
      fd.setFilterExtensions(filterExt);
      String selected=fd.open();
      if (selected != null) {
        curFolder=fd.getFilterPath();
        String[] fileNames=fd.getFileNames();
        if (!ArrayUtils.isEmpty(fileNames)) {
          File folderFile=new File(curFolder);
          for (          String fileName : fileNames) {
            driver.addDriverLibrary(DriverLibraryAbstract.createFromPath(driver,fileName.endsWith(".jar") || fileName.endsWith(".zip") ? DBPDriverLibrary.FileType.jar : DBPDriverLibrary.FileType.lib,new File(folderFile,fileName).getAbsolutePath(),null));
          }
          changeLibContent();
        }
      }
    }
  }
);
  UIUtils.createToolButton(libsControlGroup,CoreMessages.dialog_edit_driver_button_add_folder,new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      DirectoryDialog fd=new DirectoryDialog(getShell(),SWT.MULTI);
      fd.setText(CoreMessages.dialog_edit_driver_dialog_open_driver_directory);
      fd.setFilterPath(curFolder);
      String selected=fd.open();
      if (selected != null) {
        curFolder=fd.getFilterPath();
        driver.addDriverLibrary(DriverLibraryAbstract.createFromPath(driver,DBPDriverLibrary.FileType.jar,selected,null));
        changeLibContent();
      }
    }
  }
);
  UIUtils.createToolButton(libsControlGroup,CoreMessages.dialog_edit_driver_button_add_artifact,new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      EditMavenArtifactDialog fd=new EditMavenArtifactDialog(getShell(),null);
      if (fd.open() == IDialogConstants.OK_ID) {
        driver.addDriverLibrary(DriverLibraryAbstract.createFromPath(driver,DBPDriverLibrary.FileType.jar,DriverLibraryMavenArtifact.PATH_PREFIX + fd.getArtifact().getPath(),null));
        changeLibContent();
      }
    }
  }
);
  updateVersionButton=UIUtils.createToolButton(libsControlGroup,CoreMessages.dialog_edit_driver_button_update_version,new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      driver.updateFiles();
      changeLibContent();
    }
  }
);
  detailsButton=UIUtils.createToolButton(libsControlGroup,CoreMessages.dialog_edit_driver_button_details,new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new DriverLibraryDetailsDialog(getShell(),driver,getSelectedLibrary()).open();
    }
  }
);
  detailsButton.setEnabled(false);
  deleteButton=UIUtils.createToolButton(libsControlGroup,CoreMessages.dialog_edit_driver_button_delete,new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)libTable.getSelection();
      if (selection != null && !selection.isEmpty()) {
        if (UIUtils.confirmAction(getShell(),"Delete library","Are you sure you want to delete selected libraries?")) {
          for (          Object obj : selection.toArray()) {
            if (obj instanceof DriverLibraryAbstract) {
              driver.removeDriverLibrary((DriverLibraryAbstract)obj);
            }
          }
        }
      }
      changeLibContent();
    }
  }
);
  deleteButton.setEnabled(false);
  UIUtils.createHorizontalLine(libsControlGroup);
  UIUtils.createToolButton(libsControlGroup,CoreMessages.dialog_edit_driver_button_classpath,new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      ViewClasspathDialog cpDialog=new ViewClasspathDialog(getShell());
      cpDialog.open();
    }
  }
);
  changeLibContent();
  TabItem libsTab=new TabItem(group,SWT.NONE);
  libsTab.setText(CoreMessages.dialog_edit_driver_tab_name_driver_libraries);
  libsTab.setToolTipText(CoreMessages.dialog_edit_driver_tab_tooltip_driver_libraries);
  libsTab.setControl(libsGroup);
}
