{
  if (newDriver) {
    getShell().setText(CoreMessages.dialog_edit_driver_title_create_driver);
  }
 else {
    getShell().setText(CoreMessages.dialog_edit_driver_title_edit_driver + driver.getName() + "'");
    getShell().setImage(DBeaverIcons.getImage(driver.getPlainIcon()));
  }
  boolean isReadOnly=!provider.isDriversManagable();
  int advStyle=isReadOnly ? SWT.READ_ONLY : SWT.NONE;
  Composite group=(Composite)super.createDialogArea(parent);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=500;
  group.setLayoutData(gd);
{
    Group propsGroup=UIUtils.createControlGroup(group,"Settings",4,-1,-1);
    propsGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    gd=new GridData(GridData.FILL_HORIZONTAL);
    driverNameText=UIUtils.createLabelText(propsGroup,CoreMessages.dialog_edit_driver_label_driver_name + "*",driver.getName(),SWT.BORDER | advStyle,gd);
    driverNameText.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        onChangeProperty();
      }
    }
);
    UIUtils.createControlLabel(propsGroup,"Driver Type");
    final CImageCombo providerCombo=new CImageCombo(propsGroup,SWT.BORDER | SWT.READ_ONLY | SWT.DROP_DOWN);
    providerCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (newDriver) {
      for (      DataSourceProviderDescriptor p : DataSourceProviderRegistry.getInstance().getDataSourceProviders()) {
        if (p.isDriversManagable()) {
          providerCombo.add(DBeaverIcons.getImage(p.getIcon()),p.getName(),null,p);
        }
      }
      providerCombo.select(provider);
      providerCombo.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          provider=(DataSourceProviderDescriptor)providerCombo.getItem(providerCombo.getSelectionIndex()).getData();
          driver=provider.createDriver();
        }
      }
);
    }
 else {
      providerCombo.add(DBeaverIcons.getImage(provider.getIcon()),provider.getName(),null,provider);
      providerCombo.select(provider);
    }
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=3;
    driverClassText=UIUtils.createLabelText(propsGroup,CoreMessages.dialog_edit_driver_label_class_name + "*",CommonUtils.notEmpty(driver.getDriverClassName()),SWT.BORDER | advStyle,gd);
    driverClassText.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        onChangeProperty();
      }
    }
);
    driverURLText=UIUtils.createLabelText(propsGroup,CoreMessages.dialog_edit_driver_label_sample_url,CommonUtils.notEmpty(driver.getSampleURL()),SWT.BORDER | advStyle,gd);
    driverURLText.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        onChangeProperty();
      }
    }
);
    gd=new GridData(GridData.FILL_HORIZONTAL);
    driverPortText=UIUtils.createLabelText(propsGroup,CoreMessages.dialog_edit_driver_label_default_port,driver.getDefaultPort() == null ? "" : driver.getDefaultPort(),SWT.BORDER | advStyle,gd);
    driverPortText.setLayoutData(new GridData(SWT.NONE));
    driverPortText.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        onChangeProperty();
      }
    }
);
    gd=new GridData(GridData.FILL_HORIZONTAL);
    embeddedDriverCheck=UIUtils.createLabelCheckbox(propsGroup,"Embedded","Embedded driver",driver.isEmbedded());
    embeddedDriverCheck.setLayoutData(gd);
  }
{
    Group infoGroup=UIUtils.createControlGroup(group,"Description",2,-1,-1);
    infoGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    driverCategoryCombo=UIUtils.createLabelCombo(infoGroup,CoreMessages.dialog_edit_driver_label_category,SWT.BORDER | SWT.DROP_DOWN | advStyle);
    driverCategoryCombo.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
    if (isReadOnly) {
      driverCategoryCombo.setEnabled(false);
    }
    Set<String> categories=new TreeSet<>();
    for (    DataSourceProviderDescriptor p : DataSourceProviderRegistry.getInstance().getDataSourceProviders()) {
      for (      DriverDescriptor drv : p.getEnabledDrivers()) {
        if (!CommonUtils.isEmpty(drv.getCategory())) {
          categories.add(drv.getCategory());
        }
      }
    }
    for (    String category : categories) {
      driverCategoryCombo.add(category);
    }
    if (!CommonUtils.isEmpty(driver.getCategory())) {
      driverCategoryCombo.setText(driver.getCategory());
    }
 else     if (!CommonUtils.isEmpty(defaultCategory)) {
      driverCategoryCombo.setText(defaultCategory);
    }
    driverDescText=UIUtils.createLabelText(infoGroup,CoreMessages.dialog_edit_driver_label_description,CommonUtils.notEmpty(driver.getDescription()),SWT.BORDER | advStyle);
    if (!CommonUtils.isEmpty(driver.getWebURL())) {
      UIUtils.createControlLabel(infoGroup,CoreMessages.dialog_edit_driver_label_website);
      Link urlLabel=UIUtils.createLink(infoGroup,"<a>" + driver.getWebURL() + "</a>",new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          RuntimeUtils.launchProgram(driver.getWebURL());
        }
      }
);
      urlLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
  }
{
    TabFolder tabFolder=new TabFolder(group,SWT.NONE);
    tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
    if (provider.isDriversManagable()) {
      createLibrariesTab(tabFolder);
    }
    createConnectionPropertiesTab(tabFolder);
    createParametersTab(tabFolder);
    if (driver.getClientManager() != null) {
      createClientHomesTab(tabFolder);
    }
    final String license=driver.getLicense();
    if (license != null) {
      createLicenseTab(tabFolder,license);
    }
    tabFolder.setSelection(0);
  }
  loadSettings(false);
  return group;
}
