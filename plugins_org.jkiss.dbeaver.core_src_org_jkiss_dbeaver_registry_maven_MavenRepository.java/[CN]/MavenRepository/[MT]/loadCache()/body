{
  File cacheFile=new File(getLocalCacheDir(),METADATA_CACHE_FILE);
  if (!cacheFile.exists()) {
    return;
  }
  try {
    InputStream mdStream=new FileInputStream(cacheFile);
    try {
      SAXReader reader=new SAXReader(mdStream);
      reader.parse(new SAXListener(){
        MavenArtifact lastArtifact;
        @Override public void saxStartElement(        SAXReader reader,        String namespaceURI,        String localName,        Attributes atts) throws XMLException {
          if (TAG_ARTIFACT.equals(localName)) {
            lastArtifact=new MavenArtifact(MavenRepository.this,atts.getValue(ATTR_GROUP_ID),atts.getValue(ATTR_ARTIFACT_ID));
            lastArtifact.setActiveVersionName(atts.getValue(ATTR_ACTIVE_VERSION));
            cachedArtifacts.put(MavenArtifactReference.makeId(lastArtifact.getGroupId(),lastArtifact.getArtifactId()),lastArtifact);
          }
 else           if (TAG_VERSION.equals(localName) && lastArtifact != null) {
            String versionNumber=atts.getValue(ATTR_VERSION);
            try {
              MavenArtifactVersion version=new MavenArtifactVersion(VoidProgressMonitor.INSTANCE,lastArtifact,versionNumber,false);
              lastArtifact.addVersion(version);
            }
 catch (            IOException e) {
              log.warn("Error loading cached artifact version " + lastArtifact + ":"+ versionNumber,e);
            }
          }
        }
        @Override public void saxText(        SAXReader reader,        String data) throws XMLException {
        }
        @Override public void saxEndElement(        SAXReader reader,        String namespaceURI,        String localName) throws XMLException {
          if (TAG_ARTIFACT.equals(localName)) {
            lastArtifact=null;
          }
        }
      }
);
    }
 catch (    XMLException e) {
      log.warn("Error parsing cached Maven repository '" + id + "'",e);
    }
 finally {
      IOUtils.close(mdStream);
    }
  }
 catch (  IOException e) {
    log.warn("IO error while reading cached Maven repository '" + id + "'",e);
  }
}
