{
  File cacheFile=new File(getLocalCacheDir(),METADATA_CACHE_FILE);
  if (!cacheFile.exists()) {
    return;
  }
  final List<VersionResolveInfo> lateResolutions=new ArrayList<>();
  try {
    InputStream mdStream=new FileInputStream(cacheFile);
    try {
      SAXReader reader=new SAXReader(mdStream);
      reader.parse(new SAXListener(){
        MavenArtifact lastArtifact;
        VersionResolveInfo lastVersionResolveInfo;
        @Override public void saxStartElement(        SAXReader reader,        String namespaceURI,        String localName,        Attributes atts) throws XMLException {
          if (TAG_ARTIFACT.equals(localName)) {
            lastArtifact=new MavenArtifact(MavenRepository.this,atts.getValue(ATTR_GROUP_ID),atts.getValue(ATTR_ARTIFACT_ID));
            lastArtifact.setActiveVersion(atts.getValue(ATTR_ACTIVE_VERSION));
            cachedArtifacts.add(lastArtifact);
          }
 else           if (TAG_VERSION.equals(localName) && lastArtifact != null) {
            Date updateTime=new Date();
            try {
              updateTime=UPDATE_TIME_FORMAT.parse(atts.getValue(ATTR_UPDATE_TIME));
            }
 catch (            ParseException e) {
            }
            String versionNumber=atts.getValue(ATTR_VERSION);
            MavenLocalVersion version=new MavenLocalVersion(lastArtifact,versionNumber,updateTime);
            lastArtifact.addLocalVersion(version);
            MavenArtifactVersion lastVersion=new MavenArtifactVersion(version,lastArtifact.getArtifactId(),versionNumber);
            version.setMetaData(lastVersion);
            lastVersionResolveInfo=new VersionResolveInfo(version,atts.getValue(ATTR_PARENT));
            lateResolutions.add(lastVersionResolveInfo);
          }
 else           if (TAG_DEPENDENCY.equals(localName) && lastVersionResolveInfo != null) {
            MavenArtifactDependency.Scope scope=MavenArtifactDependency.Scope.COMPILE;
            String scopeString=atts.getValue(ATTR_SCOPE);
            if (scopeString != null) {
              try {
                scope=MavenArtifactDependency.Scope.valueOf(scopeString.toUpperCase(Locale.ENGLISH));
              }
 catch (              IllegalArgumentException e) {
                log.debug(e);
              }
            }
            lastVersionResolveInfo.dependencies.add(new DependencyResolveInfo(atts.getValue(ATTR_PATH),scope,CommonUtils.getBoolean(atts.getValue(ATTR_OPTIONAL),false)));
          }
        }
        @Override public void saxText(        SAXReader reader,        String data) throws XMLException {
        }
        @Override public void saxEndElement(        SAXReader reader,        String namespaceURI,        String localName) throws XMLException {
          if (TAG_ARTIFACT.equals(localName)) {
            lastArtifact=null;
          }
 else           if (TAG_VERSION.equals(localName)) {
            lastVersionResolveInfo=null;
          }
        }
      }
);
    }
 catch (    XMLException e) {
      log.warn("Error parsing cached Maven repository '" + id + "'",e);
    }
 finally {
      IOUtils.close(mdStream);
    }
  }
 catch (  IOException e) {
    log.warn("IO error while reading cached Maven repository '" + id + "'",e);
  }
  for (  VersionResolveInfo vri : lateResolutions) {
    if (vri.parentPath != null) {
      MavenLocalVersion parentVersion=resolveLocalVersion(vri.parentPath);
      if (parentVersion != null) {
        vri.localVersion.getMetaData().setParent(parentVersion);
      }
    }
    for (    DependencyResolveInfo dri : vri.dependencies) {
      MavenLocalVersion depVersion=resolveLocalVersion(dri.path);
      if (depVersion != null) {
        vri.localVersion.getMetaData().addDependency(new MavenArtifactDependency(depVersion.getArtifact().getGroupId(),depVersion.getArtifact().getArtifactId(),depVersion.getVersion(),dri.scope,dri.optional));
      }
    }
  }
}
