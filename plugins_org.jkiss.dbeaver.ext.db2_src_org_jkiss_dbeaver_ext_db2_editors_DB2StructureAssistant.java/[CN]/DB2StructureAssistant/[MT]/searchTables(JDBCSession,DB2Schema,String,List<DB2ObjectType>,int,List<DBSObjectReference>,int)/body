{
  String baseSQL;
  if (schema != null) {
    baseSQL=SQL_TABLES_SCHEMA;
  }
 else {
    baseSQL=SQL_TABLES_ALL;
  }
  String sql=buildTableSQL(baseSQL,db2ObjectTypes);
  int n=1;
  JDBCPreparedStatement dbStat=session.prepareStatement(sql);
  try {
    if (schema != null) {
      dbStat.setString(n++,schema.getName());
    }
    dbStat.setString(n++,searchObjectNameMask);
    dbStat.setFetchSize(DBConstants.METADATA_FETCH_SIZE);
    String schemaName;
    String objectName;
    DB2Schema db2Schema;
    DB2TableType tableType;
    DB2ObjectType objectType;
    JDBCResultSet dbResult=dbStat.executeQuery();
    try {
      while (dbResult.next()) {
        if (session.getProgressMonitor().isCanceled()) {
          break;
        }
        if (nbResults++ >= maxResults) {
          break;
        }
        schemaName=JDBCUtils.safeGetStringTrimmed(dbResult,"TABSCHEMA");
        objectName=JDBCUtils.safeGetString(dbResult,"TABNAME");
        tableType=CommonUtils.valueOf(DB2TableType.class,JDBCUtils.safeGetString(dbResult,"TYPE"));
        db2Schema=dataSource.getSchema(session.getProgressMonitor(),schemaName);
        if (db2Schema == null) {
          LOG.debug("Schema '" + schemaName + "' not found. Probably was filtered");
          continue;
        }
        objectType=tableType.getDb2ObjectType();
        objects.add(new DB2ObjectReference(objectName,db2Schema,objectType));
      }
    }
  finally {
      dbResult.close();
    }
  }
  finally {
    dbStat.close();
  }
}
