{
synchronized (objectCache) {
    if ((forParent == null && isCached()) || (forParent != null && (!forParent.isPersisted() || objectCache.containsKey(forParent)))) {
      return;
    }
  }
  if (forParent == null) {
    parentCache.loadObjects(monitor,owner);
    parentCache.loadChildren(monitor,owner,null);
  }
  Map<PARENT,Map<String,ObjectInfo>> parentObjectMap=new LinkedHashMap<PARENT,Map<String,ObjectInfo>>();
  List<OBJECT> precachedObjects=new ArrayList<OBJECT>();
  DBPDataSource dataSource=owner.getDataSource();
  assert(dataSource != null);
  JDBCSession session=(JDBCSession)dataSource.getDefaultContext(true).openSession(monitor,DBCExecutionPurpose.META,"Load composite objects");
  try {
    JDBCStatement dbStat=prepareObjectsStatement(session,owner,forParent);
    dbStat.setFetchSize(DBConstants.METADATA_FETCH_SIZE);
    try {
      dbStat.executeStatement();
      JDBCResultSet dbResult=dbStat.getResultSet();
      if (dbResult != null)       try {
        while (dbResult.next()) {
          if (monitor.isCanceled()) {
            break;
          }
          String parentName=parentColumnName instanceof Number ? JDBCUtils.safeGetString(dbResult,((Number)parentColumnName).intValue()) : JDBCUtils.safeGetString(dbResult,parentColumnName.toString());
          String objectName=objectColumnName instanceof Number ? JDBCUtils.safeGetString(dbResult,((Number)objectColumnName).intValue()) : JDBCUtils.safeGetString(dbResult,objectColumnName.toString());
          if (CommonUtils.isEmpty(objectName)) {
            objectName=getDefaultObjectName(parentName);
          }
          if (forParent == null && CommonUtils.isEmpty(parentName)) {
            log.debug("Empty parent name in " + this);
            continue;
          }
          PARENT parent=forParent;
          if (parent == null) {
            parent=parentCache.getObject(monitor,owner,parentName,parentType);
            if (parent == null) {
              log.debug("Object '" + objectName + "' owner '"+ parentName+ "' not found");
              continue;
            }
          }
synchronized (objectCache) {
            final Collection<OBJECT> objectsCache=objectCache.get(parent);
            if (objectsCache != null) {
              parentObjectMap.put(parent,null);
              precachedObjects.addAll(objectsCache);
              continue;
            }
          }
          Map<String,ObjectInfo> objectMap=parentObjectMap.get(parent);
          if (objectMap == null) {
            objectMap=new TreeMap<String,ObjectInfo>();
            parentObjectMap.put(parent,objectMap);
          }
          ObjectInfo objectInfo=objectMap.get(objectName);
          if (objectInfo == null) {
            OBJECT object=fetchObject(session,owner,parent,objectName,dbResult);
            if (object == null) {
              continue;
            }
            objectName=object.getName();
            objectInfo=new ObjectInfo(object);
            objectMap.put(objectName,objectInfo);
          }
          ROW_REF rowRef=fetchObjectRow(session,parent,objectInfo.object,dbResult);
          if (rowRef == null) {
            objectInfo.broken=true;
            break;
          }
          objectInfo.rows.add(rowRef);
        }
      }
  finally {
        dbResult.close();
      }
    }
  finally {
      dbStat.close();
    }
  }
 catch (  SQLException ex) {
    throw new DBException(ex,session.getDataSource());
  }
 finally {
    session.close();
  }
  if (monitor.isCanceled()) {
    return;
  }
synchronized (this) {
    if (forParent != null || !parentObjectMap.isEmpty()) {
      if (forParent == null) {
        List<OBJECT> globalCache=new ArrayList<OBJECT>();
        for (        Map<String,ObjectInfo> objMap : parentObjectMap.values()) {
          if (objMap != null) {
            for (            ObjectInfo info : objMap.values()) {
              if (!info.broken) {
                globalCache.add(info.object);
              }
            }
          }
        }
        globalCache.addAll(precachedObjects);
        this.setCache(globalCache);
        this.invalidateObjects(monitor,owner,new CacheIterator());
      }
    }
  }
synchronized (objectCache) {
    for (    Map.Entry<PARENT,Map<String,ObjectInfo>> colEntry : parentObjectMap.entrySet()) {
      if (colEntry.getValue() == null) {
        continue;
      }
      Collection<ObjectInfo> objectInfos=colEntry.getValue().values();
      ArrayList<OBJECT> objects=new ArrayList<OBJECT>(objectInfos.size());
      for (      ObjectInfo objectInfo : objectInfos) {
        if (!objectInfo.broken) {
          cacheChildren(objectInfo.object,objectInfo.rows);
          objects.add(objectInfo.object);
        }
      }
      objectCache.put(colEntry.getKey(),objects);
    }
    if (forParent == null) {
      for (      PARENT tmpParent : parentCache.getTypedObjects(monitor,owner,parentType)) {
        if (!parentObjectMap.containsKey(tmpParent)) {
          objectCache.put(tmpParent,new ArrayList<OBJECT>());
        }
      }
    }
 else     if (!parentObjectMap.containsKey(forParent)) {
      objectCache.put(forParent,new ArrayList<OBJECT>());
    }
  }
}
