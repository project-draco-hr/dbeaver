{
  this.workbenchWindow=workbenchWindow;
  Shell parent=this.workbenchWindow.getShell();
  final Color fg=parent.getDisplay().getSystemColor(SWT.COLOR_INFO_FOREGROUND);
  final Color bg=parent.getDisplay().getSystemColor(SWT.COLOR_INFO_BACKGROUND);
  popup=new Shell(parent,SWT.RESIZE | SWT.TITLE | SWT.CLOSE);
  if (containers.length == 1) {
    popup.setText("Choose SQL script for '" + containers[0].getName() + "'");
    popup.setImage(DBeaverIcons.getImage(containers[0].getDriver().getIcon()));
  }
 else {
    popup.setText("Choose SQL script");
  }
  popup.setLayout(new FillLayout());
  Rectangle bounds=new Rectangle(100,100,500,200);
  final String boundsStr=getBoundsSettings().get(CONFIG_BOUNDS_PARAM);
  if (boundsStr != null && !boundsStr.isEmpty()) {
    final String[] bc=boundsStr.split(",");
    try {
      bounds=new Rectangle(Integer.parseInt(bc[0]),Integer.parseInt(bc[1]),Integer.parseInt(bc[2]),Integer.parseInt(bc[3]));
    }
 catch (    NumberFormatException e) {
      log.warn(e);
    }
  }
  popup.setBounds(bounds);
  Composite composite=new Composite(popup,SWT.NONE);
  final GridLayout gl=new GridLayout(2,false);
  composite.setLayout(gl);
  composite.setForeground(fg);
  composite.setBackground(bg);
  patternText=new Text(composite,SWT.NONE);
  patternText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  patternText.setForeground(fg);
  patternText.setBackground(bg);
  patternText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (filterJob != null) {
        return;
      }
      filterJob=new FilterJob();
      filterJob.schedule(250);
    }
  }
);
  newButton=new Button(composite,SWT.PUSH | SWT.FLAT);
  newButton.setText("&New Script");
  newButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      popup.dispose();
      IFile scriptFile;
      try {
        scriptFile=ResourceUtils.createNewScript(rootFolder.getProject(),rootFolder,containers.length == 0 ? null : containers[0]);
        NavigatorHandlerObjectOpen.openResource(scriptFile,workbenchWindow);
      }
 catch (      CoreException ex) {
        log.error(ex);
      }
    }
  }
);
  ((GridData)UIUtils.createHorizontalLine(composite).getLayoutData()).horizontalSpan=2;
  Tree scriptTree=new Tree(composite,SWT.MULTI | SWT.FULL_SELECTION);
  final GridData gd=new GridData(GridData.FILL_BOTH);
  gd.horizontalSpan=2;
  scriptTree.setLayoutData(gd);
  scriptTree.setForeground(fg);
  scriptTree.setBackground(bg);
  scriptTree.setLinesVisible(true);
  this.scriptViewer=new TreeViewer(scriptTree);
  ColumnViewerToolTipSupport.enableFor(this.scriptViewer);
  this.scriptViewer.setContentProvider(new TreeContentProvider(){
    @Override public Object[] getChildren(    Object parentElement){
      if (parentElement instanceof ResourceInfo) {
        final List<ResourceInfo> children=((ResourceInfo)parentElement).getChildren();
        return CommonUtils.isEmpty(children) ? null : children.toArray();
      }
      return null;
    }
    @Override public boolean hasChildren(    Object element){
      if (element instanceof ResourceInfo) {
        final List<ResourceInfo> children=((ResourceInfo)element).getChildren();
        return !CommonUtils.isEmpty(children);
      }
      return false;
    }
  }
);
  ViewerColumnController columnController=new ViewerColumnController("scriptSelectorViewer",scriptViewer);
  columnController.addColumn("Script","Resource name",SWT.LEFT,true,true,new ColumnLabelProvider(){
    @Override public Image getImage(    Object element){
      final ResourceInfo ri=(ResourceInfo)element;
      if (!ri.isDirectory()) {
        if (ri.getDataSource() == null) {
          return DBeaverIcons.getImage(UIIcon.SQL_SCRIPT);
        }
 else {
          return DBeaverIcons.getImage(ri.getDataSource().getDriver().getIcon());
        }
      }
 else {
        return DBeaverIcons.getImage(DBIcon.TREE_FOLDER);
      }
    }
    @Override public String getText(    Object element){
      return ((ResourceInfo)element).getName();
    }
    @Override public String getToolTipText(    Object element){
      final DBPDataSourceContainer dataSource=((ResourceInfo)element).getDataSource();
      return dataSource == null ? null : dataSource.getName();
    }
    @Override public Image getToolTipImage(    Object element){
      final DBPDataSourceContainer dataSource=((ResourceInfo)element).getDataSource();
      return dataSource == null ? null : DBeaverIcons.getImage(dataSource.getDriver().getIcon());
    }
  }
);
  columnController.addColumn("Time","Modification time",SWT.LEFT,true,true,new ColumnLabelProvider(){
    private SimpleDateFormat sdf=new SimpleDateFormat(UIUtils.DEFAULT_TIMESTAMP_PATTERN);
    @Override public String getText(    Object element){
      final File localFile=((ResourceInfo)element).getLocalFile();
      if (localFile.isDirectory()) {
        return null;
      }
 else {
        return sdf.format(new Date(localFile.lastModified()));
      }
    }
  }
);
  columnController.addColumn("Info","Script preview",SWT.LEFT,true,true,new ColumnLabelProvider(){
    @Override public String getText(    Object element){
      return "";
    }
    @Override public Color getForeground(    Object element){
      return popup.getDisplay().getSystemColor(SWT.COLOR_WIDGET_DARK_SHADOW);
    }
  }
);
  columnController.createColumns();
  columnController.sortByColumn(1,SWT.UP);
  scriptTree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetDefaultSelected(    SelectionEvent e){
      List<ResourceInfo> files=new ArrayList<>();
      for (      Object item : ((IStructuredSelection)scriptViewer.getSelection()).toArray()) {
        if (!((ResourceInfo)item).isDirectory()) {
          files.add((ResourceInfo)item);
        }
      }
      if (files.isEmpty()) {
        return;
      }
      popup.dispose();
      for (      ResourceInfo ri : files) {
        NavigatorHandlerObjectOpen.openResourceEditor(ScriptSelectorPanel.this.workbenchWindow,ri);
      }
    }
  }
);
  scriptTree.addListener(SWT.PaintItem,new Listener(){
    public void handleEvent(    Event event){
      final TreeItem item=(TreeItem)event.item;
      final ResourceInfo ri=(ResourceInfo)item.getData();
      if (ri != null && !ri.isDirectory() && CommonUtils.isEmpty(item.getText(2))) {
        DBeaverUI.asyncExec(new Runnable(){
          @Override public void run(){
            if (!item.isDisposed()) {
              item.setText(2,ri.getDescription());
            }
          }
        }
);
      }
    }
  }
);
  this.patternText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      final Tree tree=scriptViewer.getTree();
      if (e.keyCode == SWT.ARROW_DOWN) {
        scriptViewer.setSelection(new StructuredSelection(tree.getItem(0).getData()));
        tree.setFocus();
      }
 else       if (e.keyCode == SWT.ARROW_UP) {
        scriptViewer.setSelection(new StructuredSelection(tree.getItem(tree.getItemCount() - 1).getData()));
        tree.setFocus();
      }
    }
  }
);
  final Listener focusFilter=new Listener(){
    public void handleEvent(    Event event){
      if (event.widget != scriptViewer.getTree() && event.widget != patternText && event.widget != newButton) {
        popup.dispose();
      }
    }
  }
;
  popup.getDisplay().addFilter(SWT.FocusIn,focusFilter);
  popup.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      final Rectangle bounds=popup.getBounds();
      getBoundsSettings().put(CONFIG_BOUNDS_PARAM,bounds.x + "," + bounds.y+ ","+ bounds.width+ ","+ bounds.height);
      popup.getDisplay().removeFilter(SWT.FocusIn,focusFilter);
    }
  }
);
}
