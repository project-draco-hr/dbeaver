{
  if (CommonUtils.isNotEmpty(schemaForExplainTables)) {
    return schemaForExplainTables;
  }
  DBRProgressMonitor monitor=context.getProgressMonitor();
  String sessionUserSchema;
  try {
    sessionUserSchema=JDBCUtils.queryString((JDBCExecutionContext)context,GET_SESSION_USER).trim();
  }
 catch (  SQLException e) {
    throw new DBCException(e);
  }
  Boolean ok=DB2Utils.checkExplainTables(monitor,this,sessionUserSchema);
  if (ok) {
    LOG.debug("Valid explain tables found in " + sessionUserSchema);
    schemaForExplainTables=sessionUserSchema;
    return schemaForExplainTables;
  }
  ok=DB2Utils.checkExplainTables(monitor,this,DB2Constants.EXPLAIN_SCHEMA_NAME_DEFAULT);
  if (ok) {
    LOG.debug("Valid explain tables found in " + DB2Constants.EXPLAIN_SCHEMA_NAME_DEFAULT);
    schemaForExplainTables=DB2Constants.EXPLAIN_SCHEMA_NAME_DEFAULT;
    return schemaForExplainTables;
  }
  String msg=String.format(PLAN_TABLE_MSG,sessionUserSchema);
  if (!UIUtils.confirmAction(DBeaverUI.getActiveWorkbenchShell(),PLAN_TABLE_TIT,msg)) {
    return null;
  }
  try {
    List<String> listTablespaces=DB2Utils.getListOfUsableTsForExplain(monitor,(JDBCExecutionContext)context);
    if (listTablespaces.isEmpty()) {
      UIUtils.showErrorDialog(DBeaverUI.getActiveWorkbenchShell(),"Aucun TS","Aucun TS");
      return null;
    }
    String tablespaceName=listTablespaces.get(0);
    DB2Utils.createExplainTables(context.getProgressMonitor(),this,sessionUserSchema,tablespaceName);
  }
 catch (  SQLException e) {
    throw new DBCException(e);
  }
  return sessionUserSchema;
}
