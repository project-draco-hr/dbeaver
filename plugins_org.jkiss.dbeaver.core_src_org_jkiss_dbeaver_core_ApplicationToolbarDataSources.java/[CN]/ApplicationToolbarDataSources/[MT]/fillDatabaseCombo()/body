{
  if (databaseCombo != null && !databaseCombo.isDisposed()) {
    databaseCombo.setRedraw(false);
    try {
      databaseCombo.removeAll();
      boolean isEnabled=false;
      final DBSDataSourceContainer dsContainer=getDataSourceContainer();
      if (dsContainer != null && dsContainer.isConnected()) {
        final DBPDataSource dataSource=dsContainer.getDataSource();
        DBSObjectContainer oc=DBUtils.getAdapter(DBSObjectContainer.class,dataSource);
        DBSObjectSelector os=DBUtils.getAdapter(DBSObjectSelector.class,dataSource);
        if (oc != null && os != null && os.supportsObjectSelect()) {
synchronized (dbListReads) {
            for (            DatabaseListReader reader : dbListReads) {
              if (reader.getDataSource() == dataSource) {
                return;
              }
            }
            DatabaseListReader databaseReader=new DatabaseListReader(dataSource);
            databaseReader.addJobChangeListener(new JobChangeAdapter(){
              @Override public void done(              IJobChangeEvent event){
                final DatabaseListReader job=(DatabaseListReader)event.getJob();
synchronized (dbListReads) {
                  dbListReads.remove(job);
                }
                if (!job.enabled || dsContainer.getDataSource() != job.getDataSource()) {
                  return;
                }
                UIUtils.runInUI(null,new Runnable(){
                  @Override public void run(){
                    if (databaseCombo.isDisposed()) {
                      return;
                    }
                    if (job.databasesInfo.list != null && !job.databasesInfo.list.isEmpty()) {
                      DBNModel navigatorModel=DBeaverCore.getInstance().getNavigatorModel();
                      for (                      DBSObject database : job.databasesInfo.list) {
                        if (database instanceof DBSObjectContainer) {
                          DBNDatabaseNode dbNode=navigatorModel.getNodeByObject(database);
                          if (dbNode != null) {
                            databaseCombo.add(dbNode.getNodeIconDefault(),database.getName(),database);
                          }
                        }
                      }
                    }
                    if (job.databasesInfo.active != null) {
                      int dbCount=databaseCombo.getItemCount();
                      for (int i=0; i < dbCount; i++) {
                        String dbName=databaseCombo.getItem(i);
                        if (dbName.equals(job.databasesInfo.active.getName())) {
                          databaseCombo.select(i);
                          break;
                        }
                      }
                    }
                    databaseCombo.setEnabled(job.enabled);
                  }
                }
);
              }
            }
);
            dbListReads.add(databaseReader);
            databaseReader.schedule();
          }
        }
        curDataSourceContainer=new SoftReference<DBSDataSourceContainer>(dsContainer);
      }
 else {
        curDataSourceContainer=null;
      }
      databaseCombo.setEnabled(isEnabled);
    }
  finally {
      databaseCombo.setRedraw(true);
    }
  }
}
