{
  DBDValueHandler keyValueHandler=DBUtils.findValueHandler(context,keyColumn);
  StringBuilder query=new StringBuilder();
  query.append("SELECT ").append(DBUtils.getQuotedIdentifier(keyColumn));
  String descColumns;
  if (dictionary != null) {
    descColumns=dictionary.getDescriptionColumnNames();
  }
 else {
    descColumns=DBVEntity.getDefaultDescriptionColumn(context.getProgressMonitor(),keyColumn);
  }
  if (descColumns != null) {
    query.append(", ").append(descColumns);
  }
  query.append(" FROM ").append(DBUtils.getObjectFullName(keyColumn.getParentObject()));
  List<String> conditions=new ArrayList<String>();
  if (keyPattern != null) {
    if (keyPattern instanceof CharSequence) {
      if (((CharSequence)keyPattern).length() > 0) {
        conditions.add(DBUtils.getQuotedIdentifier(keyColumn) + " LIKE ?");
      }
 else {
        keyPattern=null;
      }
    }
 else     if (keyPattern instanceof Number) {
      conditions.add(DBUtils.getQuotedIdentifier(keyColumn) + " >= ?");
    }
 else {
    }
  }
  if (preceedingKeys != null && !preceedingKeys.isEmpty()) {
    for (    DBDAttributeValue precAttribute : preceedingKeys) {
      conditions.add(DBUtils.getQuotedIdentifier(precAttribute.getAttribute()) + " = ?");
    }
  }
  if (!conditions.isEmpty()) {
    query.append(" WHERE");
    for (int i=0; i < conditions.size(); i++) {
      if (i > 0) {
        query.append(" AND");
      }
      query.append(" ").append(conditions.get(i));
    }
  }
  DBCStatement dbStat=context.prepareStatement(DBCStatementType.QUERY,query.toString(),false,false,false);
  try {
    int paramPos=0;
    if (keyPattern instanceof CharSequence) {
      keyPattern=keyPattern.toString() + "%";
    }
    if (keyPattern != null) {
      keyValueHandler.bindValueObject(context,dbStat,keyColumn,paramPos++,keyPattern);
    }
    if (preceedingKeys != null && !preceedingKeys.isEmpty()) {
      for (      DBDAttributeValue precAttribute : preceedingKeys) {
        DBDValueHandler precValueHandler=DBUtils.findValueHandler(context,precAttribute.getAttribute());
        precValueHandler.bindValueObject(context,dbStat,precAttribute.getAttribute(),paramPos++,precAttribute.getValue());
      }
    }
    dbStat.setLimit(0,maxResults);
    if (dbStat.executeStatement()) {
      DBCResultSet dbResult=dbStat.openResultSet();
      try {
        List<DBDLabelValuePair> values=new ArrayList<DBDLabelValuePair>();
        List<DBCAttributeMetaData> metaColumns=dbResult.getResultSetMetaData().getAttributes();
        List<DBDValueHandler> colHandlers=new ArrayList<DBDValueHandler>(metaColumns.size());
        for (        DBCAttributeMetaData col : metaColumns) {
          colHandlers.add(DBUtils.findValueHandler(context,col));
        }
        while (dbResult.nextRow()) {
          if (context.getProgressMonitor().isCanceled()) {
            break;
          }
          Object keyValue=keyValueHandler.fetchValueObject(context,dbResult,keyColumn,0);
          if (keyValue == null) {
            continue;
          }
          String keyLabel=keyValueHandler.getValueDisplayString(keyColumn,keyValue);
          if (descColumns != null) {
            keyLabel="";
            for (int i=1; i < colHandlers.size(); i++) {
              Object descValue=colHandlers.get(i).fetchValueObject(context,dbResult,metaColumns.get(i),i);
              if (!keyLabel.isEmpty()) {
                keyLabel+=" ";
              }
              keyLabel+=colHandlers.get(i).getValueDisplayString(metaColumns.get(i),descValue);
            }
          }
          values.add(new DBDLabelValuePair(keyLabel,keyValue));
        }
        return values;
      }
  finally {
        dbResult.close();
      }
    }
 else {
      return null;
    }
  }
  finally {
    dbStat.close();
  }
}
