{
  if (dataSource == null) {
    return true;
  }
  Boolean commitTxn=null;
  for (  DBCExecutionContext context : dataSource.getAllContexts()) {
    DBCTransactionManager txnManager=DBUtils.getTransactionManager(context);
    try {
      if (txnManager == null || txnManager.isAutoCommit()) {
        continue;
      }
      QMMCollector qmm=DBeaverCore.getInstance().getQueryManager().getMetaCollector();
      if (qmm != null) {
        QMMSessionInfo qmmSession=qmm.getSessionInfo(context);
        QMMTransactionInfo txn=qmmSession == null ? null : qmmSession.getTransaction();
        QMMTransactionSavepointInfo sp=txn == null ? null : txn.getCurrentSavepoint();
        if (sp != null && (sp.getPrevious() != null || sp.getLastExecute() != null)) {
          boolean hasUserExec=false;
          if (true) {
            hasUserExec=true;
          }
 else {
            for (QMMTransactionSavepointInfo psp=sp; psp != null; psp=psp.getPrevious()) {
              if (psp.hasUserExecutions()) {
                hasUserExec=true;
                break;
              }
            }
          }
          if (hasUserExec) {
            DBCSession session=context.openSession(monitor,DBCExecutionPurpose.UTIL,"End active transaction");
            try {
              if (commitTxn == null) {
                TransactionCloseConfirmer closeConfirmer=new TransactionCloseConfirmer(getName());
                UIUtils.runInUI(null,closeConfirmer);
switch (closeConfirmer.result) {
case IDialogConstants.YES_ID:
                  commitTxn=true;
                break;
case IDialogConstants.NO_ID:
              commitTxn=false;
            break;
default :
          return false;
      }
    }
    monitor.subTask("End active transaction");
    EndTransactionTask task=new EndTransactionTask(session,commitTxn);
    RuntimeUtils.runTask(task,END_TRANSACTION_WAIT_TIME);
  }
  finally {
    session.close();
  }
}
}
}
}
 catch (Throwable e) {
log.warn("Can't rollback active transaction before disconnect",e);
}
 finally {
monitor.worked(1);
}
}
return true;
}
