{
  super(parent,style);
  this.isFitWidth=false;
  int viewerStyle=getDefaultListStyle();
  if ((style & SWT.SHEET) == 0) {
    viewerStyle|=SWT.BORDER;
  }
  EditorActivationStrategy editorActivationStrategy;
  final SelectionAdapter enterListener=new SelectionAdapter(){
    @Override public void widgetDefaultSelected(    SelectionEvent e){
      if (doubleClickHandler != null) {
        doubleClickHandler.doubleClick(new DoubleClickEvent(itemsViewer,itemsViewer.getSelection()));
      }
    }
  }
;
  if (contentProvider instanceof ITreeContentProvider) {
    TreeViewer treeViewer=new TreeViewer(this,viewerStyle);
    final Tree tree=treeViewer.getTree();
    tree.setLinesVisible(true);
    tree.setHeaderVisible(true);
    itemsViewer=treeViewer;
    editorActivationStrategy=new EditorActivationStrategy(treeViewer);
    TreeViewerEditor.create(treeViewer,editorActivationStrategy,ColumnViewerEditor.TABBING_CYCLE_IN_ROW);
    treeViewer.getControl().addListener(SWT.MeasureItem,new Listener(){
      @Override public void handleEvent(      Event event){
      }
    }
);
    tree.addSelectionListener(enterListener);
  }
 else {
    TableViewer tableViewer=new TableViewer(this,viewerStyle);
    final Table table=tableViewer.getTable();
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    itemsViewer=tableViewer;
    editorActivationStrategy=new EditorActivationStrategy(tableViewer);
    TableViewerEditor.create(tableViewer,editorActivationStrategy,ColumnViewerEditor.TABBING_CYCLE_IN_ROW);
    table.addSelectionListener(enterListener);
  }
  renderer=createRenderer();
  itemsViewer.getColumnViewerEditor().addEditorActivationListener(new EditorActivationListener());
  itemsViewer.setContentProvider(contentProvider);
  itemsViewer.getControl().addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      if (doubleClickHandler != null) {
        doubleClickHandler.doubleClick(new DoubleClickEvent(itemsViewer,itemsViewer.getSelection()));
      }
    }
  }
);
  itemsViewer.getControl().addListener(SWT.PaintItem,new PaintListener());
  GridData gd=new GridData(GridData.FILL_BOTH);
  itemsViewer.getControl().setLayoutData(gd);
  itemsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      if (selection.isEmpty()) {
        setCurListObject(null);
      }
 else {
        setCurListObject((OBJECT_TYPE)selection.getFirstElement());
      }
      String status;
      if (selection.isEmpty()) {
        status="";
      }
 else       if (selection.size() == 1) {
        Object selectedNode=selection.getFirstElement();
        status=ObjectViewerRenderer.getCellString(selectedNode,false);
      }
 else {
        status=NLS.bind(CoreMessages.controls_object_list_status_objects,selection.size());
      }
      setInfo(status);
    }
  }
);
}
