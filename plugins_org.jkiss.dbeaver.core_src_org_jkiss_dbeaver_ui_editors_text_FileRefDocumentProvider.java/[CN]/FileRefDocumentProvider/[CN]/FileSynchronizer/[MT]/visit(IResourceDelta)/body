{
  if (delta == null) {
    return false;
  }
  IFile file=getFile();
  if (file == null) {
    return false;
  }
  delta=delta.findMember(file.getFullPath());
  if (delta == null) {
    return false;
  }
  Runnable runnable=null;
switch (delta.getKind()) {
case IResourceDelta.CHANGED:
    FileInfo info=(FileInfo)getElementInfo(fileEditorInput);
  if (info == null || !canRefreshFromFile(info)) {
    break;
  }
boolean isSynchronized=computeModificationStamp(file) == info.modificationStamp;
if ((IResourceDelta.ENCODING & delta.getFlags()) != 0 && isSynchronized) {
runnable=new SafeChange(fileEditorInput){
  @Override protected void execute(  IEditorInput input) throws Exception {
    handleElementContentChanged(input);
  }
}
;
}
if (runnable == null && (IResourceDelta.CONTENT & delta.getFlags()) != 0 && !isSynchronized) {
runnable=new SafeChange(fileEditorInput){
@Override protected void execute(IEditorInput input) throws Exception {
  handleElementContentChanged(input);
}
}
;
}
break;
case IResourceDelta.REMOVED:
if ((IResourceDelta.MOVED_TO & delta.getFlags()) != 0) {
final IPath path=delta.getMovedToPath();
runnable=new SafeChange(fileEditorInput){
@Override protected void execute(IEditorInput input) throws Exception {
handleElementMoved(input,path);
}
}
;
}
 else {
info=(FileInfo)getElementInfo(fileEditorInput);
if (info != null && canRefreshFromFile(info)) {
runnable=new SafeChange(fileEditorInput){
@Override protected void execute(IEditorInput input) throws Exception {
handleElementDeleted(input);
}
}
;
}
}
break;
}
if (runnable != null) {
update(runnable);
}
return false;
}
