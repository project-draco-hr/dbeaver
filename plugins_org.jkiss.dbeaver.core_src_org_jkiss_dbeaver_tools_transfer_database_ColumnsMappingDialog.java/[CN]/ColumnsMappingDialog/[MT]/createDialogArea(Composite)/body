{
  getShell().setText("Map columns of " + mapping.getTargetName());
  boldFont=UIUtils.makeBoldFont(parent.getFont());
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(1,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  new Label(composite,SWT.NONE).setText("Source entity: " + DBUtils.getObjectFullName(mapping.getSource()) + " ["+ mapping.getSource().getDataSource().getContainer().getName()+ "]");
  new Label(composite,SWT.NONE).setText("Target entity: " + mapping.getTargetName() + " ["+ settings.getTargetDataSource(mapping).getContainer().getName()+ "]");
  mappingViewer=new TableViewer(composite,SWT.BORDER | SWT.SINGLE | SWT.FULL_SELECTION);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=600;
  gd.heightHint=300;
  mappingViewer.getTable().setLayoutData(gd);
  mappingViewer.getTable().setLinesVisible(true);
  mappingViewer.getTable().setHeaderVisible(true);
  mappingViewer.setContentProvider(new ListContentProvider());
{
    TableViewerColumn columnSource=new TableViewerColumn(mappingViewer,SWT.LEFT);
    columnSource.setLabelProvider(new CellLabelProvider(){
      @Override public void update(      ViewerCell cell){
        DatabaseMappingAttribute attrMapping=(DatabaseMappingAttribute)cell.getElement();
        cell.setText(DBUtils.getObjectFullName(attrMapping.getSource()));
        cell.setImage(attrMapping.getIcon());
      }
    }
);
    columnSource.getColumn().setText("Source Column");
    columnSource.getColumn().setWidth(170);
  }
{
    TableViewerColumn columnSourceType=new TableViewerColumn(mappingViewer,SWT.LEFT);
    columnSourceType.setLabelProvider(new CellLabelProvider(){
      @Override public void update(      ViewerCell cell){
        cell.setText(((DatabaseMappingAttribute)cell.getElement()).getSourceType());
      }
    }
);
    columnSourceType.getColumn().setText("Source Type");
    columnSourceType.getColumn().setWidth(100);
  }
{
    TableViewerColumn columnTarget=new TableViewerColumn(mappingViewer,SWT.LEFT);
    columnTarget.setLabelProvider(new CellLabelProvider(){
      @Override public void update(      ViewerCell cell){
        DatabaseMappingAttribute mapping=(DatabaseMappingAttribute)cell.getElement();
        cell.setText(mapping.getTargetName());
        if (mapping.mappingType == DatabaseMappingType.unspecified) {
          cell.setBackground(DBeaverUI.getSharedTextColors().getColor(SharedTextColors.COLOR_WARNING));
        }
 else {
          cell.setBackground(null);
        }
        cell.setFont(boldFont);
      }
    }
);
    columnTarget.getColumn().setText("Target Column");
    columnTarget.getColumn().setWidth(170);
    columnTarget.setEditingSupport(new EditingSupport(mappingViewer){
      @Override protected CellEditor getCellEditor(      Object element){
        try {
          java.util.List<String> items=new ArrayList<String>();
          DatabaseMappingAttribute mapping=(DatabaseMappingAttribute)element;
          if (mapping.getParent().getMappingType() == DatabaseMappingType.existing && mapping.getParent().getTarget() instanceof DBSEntity) {
            DBSEntity parentEntity=(DBSEntity)mapping.getParent().getTarget();
            for (            DBSEntityAttribute attr : parentEntity.getAttributes(VoidProgressMonitor.INSTANCE)) {
              items.add(attr.getName());
            }
          }
          items.add(DatabaseConsumerPageMapping.TARGET_NAME_SKIP);
          CustomComboBoxCellEditor editor=new CustomComboBoxCellEditor(mappingViewer.getTable(),items.toArray(new String[items.size()]),SWT.DROP_DOWN);
          updateStatus(Status.OK_STATUS);
          return editor;
        }
 catch (        DBException e) {
          updateStatus(RuntimeUtils.makeExceptionStatus(e));
          return null;
        }
      }
      @Override protected boolean canEdit(      Object element){
        return true;
      }
      @Override protected Object getValue(      Object element){
        return ((DatabaseMappingAttribute)element).getTargetName();
      }
      @Override protected void setValue(      Object element,      Object value){
        try {
          String name=CommonUtils.toString(value);
          DatabaseMappingAttribute attrMapping=(DatabaseMappingAttribute)element;
          if (DatabaseConsumerPageMapping.TARGET_NAME_SKIP.equals(name)) {
            attrMapping.setMappingType(DatabaseMappingType.skip);
          }
 else {
            if (attrMapping.getParent().getMappingType() == DatabaseMappingType.existing && attrMapping.getParent().getTarget() instanceof DBSEntity) {
              DBSEntity parentEntity=(DBSEntity)attrMapping.getParent().getTarget();
              for (              DBSEntityAttribute attr : parentEntity.getAttributes(VoidProgressMonitor.INSTANCE)) {
                if (name.equalsIgnoreCase(attr.getName())) {
                  attrMapping.setTarget(attr);
                  attrMapping.setMappingType(DatabaseMappingType.existing);
                  return;
                }
              }
            }
            attrMapping.setMappingType(DatabaseMappingType.create);
            attrMapping.setTargetName(name);
          }
          updateStatus(Status.OK_STATUS);
        }
 catch (        DBException e) {
          updateStatus(RuntimeUtils.makeExceptionStatus(e));
        }
 finally {
          mappingViewer.refresh();
        }
      }
    }
);
  }
{
    TableViewerColumn columnTargetType=new TableViewerColumn(mappingViewer,SWT.LEFT);
    columnTargetType.setLabelProvider(new CellLabelProvider(){
      @Override public void update(      ViewerCell cell){
        DatabaseMappingAttribute attrMapping=(DatabaseMappingAttribute)cell.getElement();
        DBPDataSource dataSource=settings.getTargetDataSource(attrMapping);
        cell.setText(attrMapping.getTargetType(dataSource));
        cell.setFont(boldFont);
      }
    }
);
    columnTargetType.getColumn().setText("Target Type");
    columnTargetType.getColumn().setWidth(100);
    columnTargetType.setEditingSupport(new EditingSupport(mappingViewer){
      @Override protected CellEditor getCellEditor(      Object element){
        return new TextCellEditor(mappingViewer.getTable(),SWT.BORDER);
      }
      @Override protected boolean canEdit(      Object element){
        return true;
      }
      @Override protected Object getValue(      Object element){
        DatabaseMappingAttribute attrMapping=(DatabaseMappingAttribute)element;
        return attrMapping.getTargetType(settings.getTargetDataSource(attrMapping));
      }
      @Override protected void setValue(      Object element,      Object value){
        DatabaseMappingAttribute attrMapping=(DatabaseMappingAttribute)element;
        attrMapping.setTargetType(CommonUtils.toString(value));
        mappingViewer.refresh(element);
      }
    }
);
  }
{
    TableViewerColumn columnType=new TableViewerColumn(mappingViewer,SWT.LEFT);
    columnType.setLabelProvider(new CellLabelProvider(){
      @Override public void update(      ViewerCell cell){
        DatabaseMappingAttribute mapping=(DatabaseMappingAttribute)cell.getElement();
        String text="";
switch (mapping.getMappingType()) {
case unspecified:
          text="?";
        break;
case existing:
      text="existing";
    break;
case create:
  text="new";
break;
case skip:
text="skip";
break;
}
cell.setText(text);
}
}
);
columnType.getColumn().setText("Mapping");
columnType.getColumn().setWidth(60);
}
mappingViewer.setInput(attributeMappings);
return parent;
}
