{
  try {
    store.setValue(DBeaverPreferences.STATEMENT_INVALIDATE_BEFORE_EXECUTE,invalidateBeforeExecuteCheck.getSelection());
    store.setValue(DBeaverPreferences.STATEMENT_TIMEOUT,executeTimeoutText.getSelection());
    store.setValue(DBeaverPreferences.SCRIPT_COMMIT_TYPE,CommonUtils.fromOrdinal(SQLScriptCommitType.class,commitTypeCombo.getSelectionIndex()).name());
    store.setValue(DBeaverPreferences.SCRIPT_COMMIT_LINES,commitLinesText.getSelection());
    store.setValue(DBeaverPreferences.SCRIPT_ERROR_HANDLING,CommonUtils.fromOrdinal(SQLScriptErrorHandling.class,errorHandlingCombo.getSelectionIndex()).name());
    store.setValue(DBeaverPreferences.SCRIPT_FETCH_RESULT_SETS,fetchResultSetsCheck.getSelection());
    store.setValue(SQLPreferenceConstants.RESET_CURSOR_ON_EXECUTE,resetCursorCheck.getSelection());
    store.setValue(ModelPreferences.SCRIPT_STATEMENT_DELIMITER,statementDelimiterText.getText());
    store.setValue(ModelPreferences.SCRIPT_IGNORE_NATIVE_DELIMITER,ignoreNativeDelimiter.getSelection());
    store.setValue(ModelPreferences.SCRIPT_STATEMENT_DELIMITER_BLANK,blankLineDelimiter.getSelection());
    store.setValue(ModelPreferences.SQL_PARAMETERS_ENABLED,enableSQLParameters.getSelection());
    store.setValue(ModelPreferences.SQL_ANONYMOUS_PARAMETERS_ENABLED,enableSQLAnonymousParameters.getSelection());
    store.setValue(ModelPreferences.SQL_ANONYMOUS_PARAMETERS_MARK,anonymousParameterMarkText.getText());
    store.setValue(ModelPreferences.SQL_NAMED_PARAMETERS_PREFIX,namedParameterPrefixText.getText());
  }
 catch (  Exception e) {
    log.warn(e);
  }
  PrefUtils.savePreferenceStore(store);
}
