{
  final GC gc=e.gc;
  gc.setBackground(getBackground());
  this.drawBackground(gc,0,0,getSize().x,getSize().y);
  if (scrollValuesObsolete) {
    updateScrollbars();
    scrollValuesObsolete=false;
  }
  int y=0;
  if (columnHeadersVisible) {
    paintHeader(gc);
    y+=headerHeight;
  }
  final Rectangle clientArea=getClientArea();
  int availableHeight=clientArea.height - y;
  int visibleRows=availableHeight / getItemHeight() + 1;
  if (getItemCount() > 0 && availableHeight > 0) {
    RowRange range=getRowRange(getTopIndex(),availableHeight,false,false);
    if (range.height >= availableHeight)     visibleRows=range.rows;
 else     visibleRows=range.rows + (availableHeight - range.height) / getItemHeight() + 1;
  }
  int firstVisibleIndex=getTopIndex();
  int row=firstVisibleIndex;
  final int hScrollSelectionInPixels=getHScrollSelectionInPixels();
  final GridPos testPos=new GridPos(-1,-1);
  final GridCell testCell=new GridCell(NULL_ELEMENT,NULL_ELEMENT);
  boolean isGridInFocus=this.isFocusControl();
  int curLevel=0;
  int nestedRemains=-1;
  final List<int[]> nestedStack=nestedRows == null ? null : new ArrayList<int[]>();
  for (int i=0; i < visibleRows + (firstVisibleIndex - firstVisibleIndex); i++) {
    int x=0;
    x-=hScrollSelectionInPixels;
    if (row >= 0 && row < getItemCount()) {
      boolean cellInRowSelected=selectedRows.containsKey(row);
      if (rowHeaderVisible) {
        x+=rowHeaderWidth;
      }
      for (int k=0, columnsSize=columns.size(); k < columnsSize; k++) {
        GridColumn column=columns.get(k);
        int width=column.getWidth();
        if (x + width >= 0 && x < clientArea.width) {
          cellRenderer.setCell(testCell);
          cellRenderer.setBounds(x,y,width,getItemHeight());
          cellRenderer.setFocus(isGridInFocus);
          cellRenderer.setRowFocus(focusItem == row);
          cellRenderer.setCellFocus(focusItem == row && focusColumn == column);
          cellRenderer.setRowHover(hoveringItem == row);
          cellRenderer.setColumnHover(hoveringColumn == column);
          testPos.col=k;
          testPos.row=row;
          cellRenderer.setCellSelected(selectedCells.contains(testPos));
          testCell.row=rowElements[row];
          testCell.col=column.getElement();
          cellRenderer.paint(gc);
        }
        x+=column.getWidth();
      }
      if (x < clientArea.width) {
        drawEmptyCell(gc,x,y,clientArea.width - x + 1,getItemHeight(),false);
      }
      x=0;
      if (rowHeaderVisible) {
        rowHeaderRenderer.setSelected(cellInRowSelected);
        if (y >= headerHeight) {
          testCell.row=rowElements[row];
          rowHeaderRenderer.setBounds(0,y,rowHeaderWidth,getItemHeight() + 1);
          rowHeaderRenderer.setCell(testCell);
          rowHeaderRenderer.setLevel(curLevel);
          rowHeaderRenderer.paint(gc);
        }
        x+=rowHeaderWidth;
      }
      y+=getItemHeight() + 1;
      if (nestedRemains > 0) {
        nestedRemains--;
        if (nestedRemains == 0) {
          if (!nestedStack.isEmpty()) {
            int[] nst=nestedStack.remove(nestedStack.size() - 1);
            curLevel=nst[0];
            nestedRemains=nst[1];
          }
 else {
            curLevel=0;
            nestedRemains=-1;
          }
        }
      }
      if (!nestedRows.isEmpty()) {
        NestedRows nr=nestedRows.get(rowElements[row]);
        if (nr != null) {
          if (nestedRemains >= 0) {
            nestedStack.add(new int[]{curLevel,nestedRemains});
          }
          curLevel=nr.level;
          nestedRemains=nr.rows.length;
        }
      }
    }
 else {
      if (rowHeaderVisible) {
        x+=rowHeaderWidth;
      }
      for (      GridColumn column : columns) {
        drawEmptyCell(gc,x,y,column.getWidth(),getItemHeight(),false);
        x+=column.getWidth();
      }
      if (x < clientArea.width) {
        drawEmptyCell(gc,x,y,clientArea.width - x + 1,getItemHeight(),false);
      }
      x=0;
      if (rowHeaderVisible) {
        drawEmptyRowHeader(gc,x,y,rowHeaderWidth,getItemHeight() + 1);
        x+=rowHeaderWidth;
      }
      y+=getItemHeight() + 1;
    }
    row++;
  }
}
