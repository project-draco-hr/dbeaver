{
  final GC gc=e.gc;
  gc.setBackground(getBackground());
  this.drawBackground(gc,0,0,getSize().x,getSize().y);
  if (scrollValuesObsolete) {
    updateScrollbars();
    scrollValuesObsolete=false;
  }
  int x;
  int y=0;
  if (columnHeadersVisible) {
    paintHeader(gc);
    y+=headerHeight;
  }
  int availableHeight=getClientArea().height - y;
  int visibleRows=availableHeight / getItemHeight() + 1;
  if (getItemCount() > 0 && availableHeight > 0) {
    RowRange range=getRowRange(getTopIndex(),availableHeight,false,false);
    if (range.height >= availableHeight)     visibleRows=range.rows;
 else     visibleRows=range.rows + (availableHeight - range.height) / getItemHeight() + 1;
  }
  int firstVisibleIndex=getTopIndex();
  int row=firstVisibleIndex;
  final int hScrollSelectionInPixels=getHScrollSelectionInPixels();
  final GridPos testPos=new GridPos(-1,-1);
  final GridCell testCell=new GridCell(null,null);
  final Rectangle clipping=new Rectangle(-1,-1,-1,-1);
  for (int i=0; i < visibleRows + (firstVisibleIndex - firstVisibleIndex); i++) {
    x=0;
    x-=hScrollSelectionInPixels;
    if (row >= 0 && row < getItemCount()) {
      boolean cellInRowSelected=selectedRows.containsKey(row);
      if (rowHeaderVisible) {
        x+=rowHeaderWidth;
      }
      boolean isGridInFocus=this.isFocusControl();
      for (int k=0, columnsSize=columns.size(); k < columnsSize; k++) {
        GridColumn column=columns.get(k);
        int width=column.getWidth();
        if (x + width >= 0 && x < getClientArea().width) {
          final GridCellRenderer cellRenderer=column.getCellRenderer();
          cellRenderer.setCell(testCell);
          cellRenderer.setBounds(x,y,width,getItemHeight());
          int cellInHeaderDelta=headerHeight - y;
          if (cellInHeaderDelta > 0) {
            clipping.x=x - 1;
            clipping.y=y + cellInHeaderDelta;
            clipping.width=width + 1;
            clipping.height=getItemHeight() + 2 - cellInHeaderDelta;
          }
 else {
            clipping.x=x - 1;
            clipping.y=y - 1;
            clipping.width=width + 1;
            clipping.height=getItemHeight() + 2;
          }
          gc.setClipping(clipping);
          cellRenderer.setFocus(isGridInFocus);
          cellRenderer.setRowFocus(focusItem == row);
          cellRenderer.setCellFocus(focusItem == row && focusColumn == column);
          cellRenderer.setRowHover(hoveringItem == row);
          cellRenderer.setColumnHover(hoveringColumn == column);
          testPos.col=column.getIndex();
          testPos.row=row;
          if (selectedCells.contains(testPos)) {
            cellRenderer.setCellSelected(true);
          }
 else {
            cellRenderer.setCellSelected(false);
          }
          testCell.row=rowElements[row];
          testCell.col=columnElements[column.getIndex()];
          cellRenderer.paint(gc);
          gc.setClipping((Rectangle)null);
        }
        x+=column.getWidth();
      }
      if (x < getClientArea().width) {
        drawEmptyCell(gc,x,y,getClientArea().width - x + 1,getItemHeight(),false);
      }
      x=0;
      if (rowHeaderVisible) {
        rowHeaderRenderer.setSelected(cellInRowSelected);
        if (y >= headerHeight) {
          testCell.row=rowElements[row];
          rowHeaderRenderer.setBounds(0,y,rowHeaderWidth,getItemHeight() + 1);
          rowHeaderRenderer.setCell(testCell);
          rowHeaderRenderer.paint(gc);
        }
        x+=rowHeaderWidth;
      }
      y+=getItemHeight() + 1;
    }
 else {
      if (rowHeaderVisible) {
        x+=rowHeaderWidth;
      }
      for (      GridColumn column : columns) {
        drawEmptyCell(gc,x,y,column.getWidth(),getItemHeight(),false);
        x+=column.getWidth();
      }
      if (x < getClientArea().width) {
        drawEmptyCell(gc,x,y,getClientArea().width - x + 1,getItemHeight(),false);
      }
      x=0;
      if (rowHeaderVisible) {
        drawEmptyRowHeader(gc,x,y,rowHeaderWidth,getItemHeight() + 1);
        x+=rowHeaderWidth;
      }
      y+=getItemHeight() + 1;
    }
    row++;
  }
}
