{
  GridNode node=rowNodes.get(rowElements[row]);
  if (node == null || node.state == IGridContentProvider.ElementState.NONE) {
    log.error("Row [" + row + "] state can't be toggled");
    return;
  }
  if (node.state == IGridContentProvider.ElementState.EXPANDED) {
    GridNode rowParent=parentNodes[row];
    int deleteTo;
    for (deleteTo=row + 1; deleteTo < rowElements.length; deleteTo++) {
      if (parentNodes[deleteTo] == rowParent) {
        break;
      }
    }
    rowElements=ArrayUtils.deleteArea(Object.class,rowElements,row + 1,deleteTo - 1);
    parentNodes=ArrayUtils.deleteArea(GridNode.class,parentNodes,row + 1,deleteTo - 1);
    node.state=IGridContentProvider.ElementState.COLLAPSED;
  }
 else {
    List<Object> result=new ArrayList<Object>();
    List<GridNode> parents=new ArrayList<GridNode>();
    collectRows(result,parents,node,node.rows,node.level);
    rowElements=ArrayUtils.insertArea(Object.class,rowElements,row + 1,result.toArray());
    parentNodes=ArrayUtils.insertArea(GridNode.class,parentNodes,row + 1,parents.toArray());
    node.state=IGridContentProvider.ElementState.EXPANDED;
  }
  if (focusItem > row) {
    focusItem=row;
  }
  for (Iterator<GridPos> iter=selectedCells.iterator(); iter.hasNext(); ) {
    GridPos pos=iter.next();
    if (pos.row > row) {
      iter.remove();
    }
  }
  updateSelectionCache();
  computeHeaderSizes();
  redraw();
}
