{
  super.createPresentation(controller,parent);
  this.boldFont=UIUtils.makeBoldFont(parent.getFont());
  this.foregroundNull=parent.getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);
  this.spreadsheet=new Spreadsheet(parent,SWT.MULTI | SWT.VIRTUAL | SWT.H_SCROLL| SWT.V_SCROLL,controller.getSite(),this,new ContentProvider(),new GridLabelProvider());
  this.spreadsheet.setLayoutData(new GridData(GridData.FILL_BOTH));
  this.spreadsheet.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (e.detail != SWT.DRAG && e.detail != SWT.DROP_DOWN) {
        updateGridCursor((GridCell)e.data);
      }
      fireSelectionChanged(new SpreadsheetSelectionImpl());
    }
  }
);
  spreadsheet.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      SpreadsheetPresentation.this.controller.updateEditControls();
    }
    @Override public void focusLost(    FocusEvent e){
      SpreadsheetPresentation.this.controller.updateEditControls();
    }
  }
);
  this.themeManager=controller.getSite().getWorkbenchWindow().getWorkbench().getThemeManager();
  this.themeChangeListener=new IPropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent event){
      if (event.getProperty().startsWith(ThemeConstants.RESULTS_PROP_PREFIX)) {
        applyThemeSettings();
      }
    }
  }
;
  this.themeManager.addPropertyChangeListener(themeChangeListener);
  applyThemeSettings();
  this.spreadsheet.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      dispose();
    }
  }
);
  trackPresentationControl();
  UIUtils.enableHostEditorKeyBindingsSupport(controller.getSite(),spreadsheet);
}
