{
  getShell().setText(title);
  Composite group=(Composite)super.createDialogArea(parent);
  GridData gd=new GridData(GridData.FILL_BOTH);
  group.setLayoutData(gd);
  navigatorTree=new DatabaseNavigatorTree(group,rootNode,(singleSelection ? SWT.SINGLE : SWT.MULTI) | SWT.BORDER);
  gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=500;
  gd.heightHint=500;
  navigatorTree.setLayoutData(gd);
  navigatorTree.getViewer().addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof TreeLoadNode || element instanceof DBNLocalFolder) {
        return true;
      }
      if (element instanceof DBNNode) {
        if (element instanceof DBNDatabaseFolder) {
          DBNDatabaseFolder folder=(DBNDatabaseFolder)element;
          Class<? extends DBSObject> folderItemsClass=folder.getChildrenClass();
          return folderItemsClass != null && matchesType(folderItemsClass,false);
        }
        if (element instanceof DBNProject || element instanceof DBNProjectDatabases || element instanceof DBNDataSource|| (element instanceof DBSWrapper && matchesType(((DBSWrapper)element).getObject().getClass(),false))) {
          return true;
        }
      }
      return false;
    }
  }
);
  if (selectedNode != null) {
    navigatorTree.getViewer().setSelection(new StructuredSelection(selectedNode));
    selectedObjects.add(selectedNode);
  }
  navigatorTree.getViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      selectedObjects.clear();
      IStructuredSelection selection=(IStructuredSelection)navigatorTree.getViewer().getSelection();
      for (Iterator iter=selection.iterator(); iter.hasNext(); ) {
        DBNNode node=(DBNNode)iter.next();
        if (node instanceof DBSWrapper) {
          DBSObject object=DBUtils.getAdapter(DBSObject.class,((DBSWrapper)node).getObject());
          if (object != null && matchesType(object.getClass(),true)) {
            selectedObjects.add(node);
          }
        }
      }
      getButton(IDialogConstants.OK_ID).setEnabled(!selectedObjects.isEmpty());
    }
  }
);
  return group;
}
