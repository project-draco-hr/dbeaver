{
  this.presentation=presentation;
  this.colorDisabled=presentation.getControl().getDisplay().getSystemColor(SWT.COLOR_WIDGET_DARK_SHADOW);
  this.attributeList=new MetaDataTable(parent);
  this.attributeList.setFitWidth(false);
  this.attributeList.getItemsViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      DBDAttributeBinding attr=getSelectedAttribute();
      if (attr != null && !updateSelection) {
        if (isAttributeVisible(attr)) {
          updateSelection=true;
          try {
            presentation.setCurrentAttribute(attr);
          }
  finally {
            updateSelection=false;
          }
        }
      }
    }
  }
);
  if (this.presentation instanceof ISelectionProvider) {
    final ISelectionChangedListener listener=new ISelectionChangedListener(){
      @Override public void selectionChanged(      SelectionChangedEvent event){
        if (!updateSelection && MetaDataPanel.this.presentation.getController().getVisiblePanel() == MetaDataPanel.this) {
          DBDAttributeBinding attr=presentation.getCurrentAttribute();
          if (attr != null && attr != getSelectedAttribute()) {
            updateSelection=true;
            try {
              attributeList.getItemsViewer().setSelection(new StructuredSelection(attr));
            }
  finally {
              updateSelection=false;
            }
          }
        }
      }
    }
;
    ((ISelectionProvider)this.presentation).addSelectionChangedListener(listener);
    attributeList.getControl().addDisposeListener(new DisposeListener(){
      @Override public void widgetDisposed(      DisposeEvent e){
        ((ISelectionProvider)presentation).removeSelectionChangedListener(listener);
      }
    }
);
  }
  return this.attributeList;
}
