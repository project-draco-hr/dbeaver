{
  System.out.println("Create update site map...");
  FileOutputStream os=new FileOutputStream(siteFile);
  XMLBuilder siteXML=new XMLBuilder(os,"utf-8");
  siteXML.setButify(true);
  siteXML.startElement("site");
  siteXML.startElement("description");
  siteXML.addAttribute("name","DBeaver Update Site");
  siteXML.addAttribute("url","http://dbeaver.jkiss.org/update/2.0");
  siteXML.addText("DBeaver Update Site");
  siteXML.endElement();
  siteXML.startElement("category-def");
  siteXML.addAttribute("name","org.jkiss.dbeaver");
  siteXML.addAttribute("label","DBeaver");
  siteXML.startElement("description");
  siteXML.addText("Universal Database Manager");
  siteXML.endElement();
  siteXML.endElement();
  siteXML.startElement("category-def");
  siteXML.addAttribute("name","org.jkiss.dbeaver.drivers");
  siteXML.addAttribute("label","External database drivers");
  siteXML.startElement("description");
  siteXML.addText("3rd party JDBC drivers for DBeaver");
  siteXML.endElement();
  siteXML.endElement();
  for (  String featureID : RUNTIME_FEATURES) {
    File featureFile=new File(featuresDirectory,featureID + "/feature.xml");
    if (!featureFile.exists()) {
      System.out.println("Feature [" + featureID + "] not found in ["+ featuresDirectory+ "]");
      continue;
    }
    String featureVersion;
    String featureOS;
    try {
      Document pluginDocument=XMLUtils.parseDocument(featureFile);
      Element featureElement=pluginDocument.getDocumentElement();
      featureVersion=featureElement.getAttribute("version");
      if (CommonUtils.isEmpty(featureVersion)) {
        System.out.println("Feature [" + featureID + "] doesn't has version info");
        continue;
      }
      featureOS=featureElement.getAttribute("os");
    }
 catch (    XMLException e) {
      throw new IllegalArgumentException(e);
    }
    siteXML.startElement("feature");
    siteXML.addAttribute("id",featureID);
    siteXML.addAttribute("version",featureVersion);
    siteXML.addAttribute("url","features/" + featureID + "_"+ featureVersion+ ".jar");
    if (!CommonUtils.isEmpty(featureOS)) {
      siteXML.addAttribute("os",featureOS);
    }
    siteXML.startElement("category");
    siteXML.addAttribute("name","org.jkiss.dbeaver");
    siteXML.endElement();
    siteXML.endElement();
    System.out.println("\t-Runtime feature " + featureID + " added");
  }
  for (  DriverInfo driver : drivers) {
    siteXML.startElement("feature");
    siteXML.addAttribute("id",driver.getFeatureID());
    siteXML.addAttribute("version",driver.getVersion());
    siteXML.addAttribute("url","features/" + driver.getFeatureID() + "_"+ driver.getVersion()+ ".jar");
    siteXML.startElement("category");
    siteXML.addAttribute("name","org.jkiss.dbeaver.drivers");
    siteXML.endElement();
    siteXML.endElement();
    System.out.println("\t-Driver feature " + driver.getFeatureID() + " added");
  }
  siteXML.endElement();
  siteXML.flush();
  os.close();
}
