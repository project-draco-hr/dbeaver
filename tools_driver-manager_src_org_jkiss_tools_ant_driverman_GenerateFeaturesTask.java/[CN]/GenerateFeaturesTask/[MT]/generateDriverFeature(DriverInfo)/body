{
  System.out.println("\t-Generate feature " + driver.getFeatureID());
  File pluginPath=new File(pluginsPath,driver.getPluginID());
  File featurePath=new File(featuresPath,driver.getFeatureID());
  makeDirectory(pluginPath);
  makeDirectory(featurePath);
{
    String filePrefix="drivers/";
    if (!CommonUtils.isEmpty(driver.getCategory())) {
      filePrefix+=driver.getCategory() + "/";
    }
    filePrefix+=driver.getId() + "/";
    for (    String driverFile : driver.getFiles()) {
      File sourceFile=new File(driver.getPath(),driverFile);
      if (!sourceFile.exists()) {
        System.err.println("File '" + sourceFile.getAbsolutePath() + "' doesn't exist");
        continue;
      }
      System.out.println("\t\tCopy " + driverFile + " ["+ sourceFile.length()+ "]");
      File targetDir=new File(pluginPath,filePrefix);
      File targetFile=new File(targetDir,driverFile);
      makeDirectory(targetFile.getParentFile());
      copyFiles(sourceFile,targetFile);
    }
{
      File buildPropertiesFile=new File(pluginPath,"build.properties");
      PrintWriter propsWriter=new PrintWriter(new FileWriter(buildPropertiesFile));
      propsWriter.println("source.. = ");
      StringBuilder binPath=new StringBuilder("bin.includes = .,plugin.xml,META-INF/");
      for (      String file : driver.getFiles())       binPath.append(',').append(filePrefix).append(file);
      propsWriter.println(binPath.toString());
      propsWriter.println("src.includes = ");
      propsWriter.close();
    }
{
      FileWriter pluginWriter=new FileWriter(new File(pluginPath,"plugin.xml"));
      XMLBuilder pluginXML=new XMLBuilder(pluginWriter,"UTF-8");
      pluginXML.setButify(true);
      pluginXML.startElement("plugin");
      pluginXML.startElement("extension");
      pluginXML.addAttribute("point","org.jkiss.dbeaver.resources");
      for (      String file : driver.getFiles()) {
        pluginXML.startElement("resource");
        pluginXML.addAttribute("name",filePrefix + file);
        pluginXML.endElement();
      }
      pluginXML.endElement();
      pluginXML.endElement();
      pluginXML.flush();
      pluginWriter.close();
    }
{
      File metaPath=new File(pluginPath,"META-INF");
      makeDirectory(metaPath);
      PrintWriter metaWriter=new PrintWriter(new FileWriter(new File(metaPath,"MANIFEST.MF")));
      metaWriter.println("Manifest-Version: 1.0");
      metaWriter.println("Bundle-ManifestVersion: 2");
      metaWriter.println("Bundle-Name: " + driver.getName());
      metaWriter.println("Bundle-SymbolicName: " + driver.getPluginID());
      metaWriter.println("Bundle-Version: " + driver.getVersion());
      metaWriter.println("Bundle-Vendor: " + driver.getVendor());
      metaWriter.println("Bundle-ActivationPolicy: lazy");
      metaWriter.close();
    }
  }
{
{
      File buildPropertiesFile=new File(featurePath,"build.properties");
      PrintWriter propsWriter=new PrintWriter(new FileWriter(buildPropertiesFile));
      propsWriter.println("bin.includes = feature.xml,feature.properties");
      propsWriter.close();
    }
{
      File featurePropertiesFile=new File(featurePath,"feature.properties");
      PrintWriter propsWriter=new PrintWriter(new FileWriter(featurePropertiesFile));
      propsWriter.println("featureName=" + driver.getName());
      propsWriter.println("providerName=" + driver.getVendor());
      propsWriter.println("description=" + driver.getDescription());
      propsWriter.println("copyright=");
      String license=driver.getLicense();
      if (!CommonUtils.isEmpty(license)) {
        String licenseText=readFileToString(new File(driver.getPath(),license));
        propsWriter.println("license=" + licenseText.replace("\r","").replace("\n","\\n\\\n"));
      }
      propsWriter.close();
    }
{
      FileWriter pluginWriter=new FileWriter(new File(featurePath,"feature.xml"));
      XMLBuilder featureXML=new XMLBuilder(pluginWriter,"UTF-8");
      featureXML.setButify(true);
      featureXML.startElement("feature");
      featureXML.addAttribute("id",driver.getFeatureID());
      featureXML.addAttribute("label","%featureName");
      featureXML.addAttribute("version",driver.getVersion());
      featureXML.addAttribute("provider","%providerName");
      featureXML.addAttribute("plugin",driver.getPluginID());
      featureXML.startElement("description");
      featureXML.addText("%description");
      featureXML.endElement();
      featureXML.startElement("copyright");
      featureXML.addText("%copyright");
      featureXML.endElement();
      featureXML.startElement("license");
      featureXML.addText("%license");
      featureXML.endElement();
      featureXML.startElement("requires");
      featureXML.endElement();
      featureXML.startElement("plugin");
      featureXML.addAttribute("id",driver.getPluginID());
      featureXML.addAttribute("download-size",0);
      featureXML.addAttribute("install-size",0);
      featureXML.addAttribute("version",driver.getVersion());
      featureXML.addAttribute("unpack","true");
      featureXML.endElement();
      featureXML.endElement();
      featureXML.flush();
      pluginWriter.close();
    }
  }
}
