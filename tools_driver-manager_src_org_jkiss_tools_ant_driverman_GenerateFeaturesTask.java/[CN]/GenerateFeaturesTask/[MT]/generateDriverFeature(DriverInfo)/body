{
  System.out.println("\t-Generate feature " + driver.getFeatureID());
  File featurePath=new File(featuresPath,driver.getFeatureID());
  makeDirectory(featurePath);
{
    String filePrefix="drivers/" + driver.getId() + "/";
    List<String> pluginFiles=new ArrayList<String>();
    pluginFiles.addAll(driver.getFiles());
    if (!CommonUtils.isEmpty(driver.getLicense())) {
      pluginFiles.add(driver.getLicense());
    }
    for (    String driverFile : pluginFiles) {
      File sourceFile=new File(driver.getPath(),driverFile);
      if (!sourceFile.exists()) {
        System.err.println("File '" + sourceFile.getAbsolutePath() + "' doesn't exist");
        continue;
      }
      System.out.println("\t\tAdd " + driverFile + " ["+ sourceFile.length()+ "] to driver pack");
      ZipEntry zipEntry=new ZipEntry(driverFile);
      driversZip.putNextEntry(zipEntry);
      FileInputStream is=new FileInputStream(sourceFile);
      try {
        IOUtils.copyStream(is,driversZip,10000);
      }
  finally {
        is.close();
      }
    }
  }
{
{
      File buildPropertiesFile=new File(featurePath,"build.properties");
      PrintWriter propsWriter=new PrintWriter(new FileWriter(buildPropertiesFile));
      propsWriter.println("bin.includes = feature.xml,feature.properties");
      propsWriter.close();
    }
{
      File featurePropertiesFile=new File(featurePath,"feature.properties");
      PrintWriter propsWriter=new PrintWriter(new FileWriter(featurePropertiesFile));
      propsWriter.println("featureName=" + driver.getName());
      propsWriter.println("providerName=" + driver.getVendor());
      propsWriter.println("description=" + driver.getDescription());
      propsWriter.println("copyright=");
      String license=driver.getLicense();
      if (!CommonUtils.isEmpty(license)) {
        String licenseText=readFileToString(new File(driver.getPath(),license));
        propsWriter.println("license=" + licenseText.replace("\r","").replace("\n","\\n\\\n"));
      }
      propsWriter.close();
    }
{
      FileWriter pluginWriter=new FileWriter(new File(featurePath,"feature.xml"));
      XMLBuilder featureXML=new XMLBuilder(pluginWriter,"UTF-8");
      featureXML.setButify(true);
      featureXML.startElement("feature");
      featureXML.addAttribute("id",driver.getFeatureID());
      featureXML.addAttribute("label","%featureName");
      featureXML.addAttribute("version",driver.getVersion());
      featureXML.addAttribute("provider","%providerName");
      featureXML.addAttribute("plugin",driver.getPluginID());
      featureXML.startElement("description");
      featureXML.addText("%description");
      featureXML.endElement();
      featureXML.startElement("copyright");
      featureXML.addText("%copyright");
      featureXML.endElement();
      featureXML.startElement("license");
      featureXML.addText("%license");
      featureXML.endElement();
      featureXML.startElement("requires");
      featureXML.startElement("import");
      featureXML.addAttribute("feature","org.jkiss.dbeaver.ext.generic");
      featureXML.addAttribute("version","1.0.0");
      featureXML.addAttribute("match","greaterOrEqual");
      featureXML.endElement();
      featureXML.endElement();
      featureXML.startElement("plugin");
      featureXML.addAttribute("id",driver.getPluginID());
      featureXML.addAttribute("download-size",0);
      featureXML.addAttribute("install-size",0);
      featureXML.addAttribute("version",driver.getVersion());
      featureXML.addAttribute("unpack","true");
      featureXML.endElement();
      featureXML.endElement();
      featureXML.flush();
      pluginWriter.close();
    }
  }
}
