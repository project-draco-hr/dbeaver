{
  FontData fontData=getNextFontData();
  if (!fontsRejected.contains(fontData.getName())) {
    boolean isScalable=fontsListCurrent == fontsScalable;
    int height=10;
    if (!isScalable)     height=fontData.getHeight();
    Font font=new Font(Display.getCurrent(),fontData.getName(),height,SWT.NORMAL);
    fontsGc.setFont(font);
    int width=fontsGc.getAdvanceWidth((char)0x020);
    boolean isFixedWidth=true;
    for (int j=0x021; j < 0x0100 && isFixedWidth; ++j) {
      if (((char)j) == '.' && j != '.')       continue;
      if (width != fontsGc.getAdvanceWidth((char)j))       isFixedWidth=false;
    }
    font.dispose();
    if (isFixedWidth) {
      if (isScalable) {
        fontsSorted.put(fontData.getName(),scalableSizes);
      }
 else {
        Set<Integer> heights=fontsSorted.get(fontData.getName());
        if (heights == null) {
          heights=new TreeSet<Integer>();
          fontsSorted.put(fontData.getName(),heights);
        }
        heights.add(fontData.getHeight());
      }
      if (!list.isDisposed())       list.setItems(fontsSorted.keySet().toArray(new String[fontsSorted.keySet().size()]));
      refreshWidgets();
    }
 else {
      fontsRejected.add(fontData.getName());
    }
  }
  if (fontsNonScalable.size() == 0 && fontsScalable.size() == 0) {
    if (!parent.isDisposed())     fontsGc.dispose();
    fontsGc=null;
    fontsNonScalable=fontsScalable=fontsListCurrent=null;
    fontsRejected=null;
  }
 else {
    Display.getCurrent().asyncExec(new Runnable(){
      @Override public void run(){
        populateFixedCharWidthFontsAsync();
      }
    }
);
  }
}
