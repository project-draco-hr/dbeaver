{
  DBDValueHandler[] handlers=new DBDValueHandler[attributes.length];
  for (int i=0; i < attributes.length; i++) {
    handlers[i]=DBUtils.findValueHandler(session,attributes[i]);
  }
  boolean useBatch=session.getDataSource().getInfo().supportsBatchUpdates();
  if (values.size() <= 1) {
    useBatch=false;
  }
  DBCStatistics statistics=new DBCStatistics();
  DBCStatement statement=null;
  try {
    for (    Object[] rowValues : values) {
      if (statement == null) {
        statement=prepareStatement(session,rowValues);
        statistics.setQueryText(statement.getQueryString());
      }
      try {
        bindStatement(handlers,statement,rowValues);
        if (useBatch) {
          statement.addToBatch();
        }
 else {
          long startTime=System.currentTimeMillis();
          statement.executeStatement();
          statistics.addExecuteTime(System.currentTimeMillis() - startTime);
          long rowCount=statement.getUpdateRowCount();
          if (rowCount > 0) {
            statistics.addRowsUpdated(rowCount);
          }
          if (keysReceiver != null) {
            readKeys(statement.getSession(),statement,keysReceiver);
          }
        }
      }
  finally {
        if (!reuseStatement) {
          statement.close();
          statement=null;
        }
      }
    }
    values.clear();
    if (useBatch && statement != null) {
      long startTime=System.currentTimeMillis();
      int[] updatedRows=statement.executeStatementBatch();
      statistics.addExecuteTime(System.currentTimeMillis() - startTime);
      if (!ArrayUtils.isEmpty(updatedRows)) {
        for (        int rows : updatedRows) {
          statistics.addRowsUpdated(rows);
        }
      }
    }
  }
  finally {
    if (statement != null) {
      statement.close();
      statement=null;
    }
  }
  return statistics;
}
