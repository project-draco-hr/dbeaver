{
  List<AggregateFunctionDescriptor> functions=enabledFunctions;
  ResultSetModel model=presentation.getController().getModel();
  Map<IAggregateFunction,TreeItem> funcMap=new IdentityHashMap<>();
  for (  AggregateFunctionDescriptor funcDesc : functions) {
    TreeItem funcItem=new TreeItem(aggregateTable,SWT.NONE);
    funcItem.setData(funcDesc);
    funcItem.setText(0,funcDesc.getLabel());
    funcItem.setImage(0,DBeaverIcons.getImage(funcDesc.getIcon()));
    try {
      IAggregateFunction func=funcDesc.createFunction();
      funcMap.put(func,funcItem);
    }
 catch (    DBException e) {
      log.error(e);
    }
  }
  IAggregateFunction[] funcs=funcMap.keySet().toArray(new IAggregateFunction[funcMap.size()]);
  int valueCount=0;
  for (Iterator iter=selection.iterator(); iter.hasNext(); ) {
    Object element=iter.next();
    DBDAttributeBinding attr=selection.getElementAttribute(element);
    ResultSetRow row=selection.getElementRow(element);
    Object cellValue=model.getCellValue(attr,row);
    if (cellValue instanceof Number) {
      for (      IAggregateFunction func : funcs) {
        func.accumulate((Number)cellValue);
      }
      valueCount++;
    }
  }
  if (valueCount > 0) {
    for (    IAggregateFunction func : funcs) {
      Number result=func.getResult(valueCount);
      if (result != null) {
        TreeItem treeItem=funcMap.get(func);
        treeItem.setText(1,result.toString());
      }
    }
  }
}
