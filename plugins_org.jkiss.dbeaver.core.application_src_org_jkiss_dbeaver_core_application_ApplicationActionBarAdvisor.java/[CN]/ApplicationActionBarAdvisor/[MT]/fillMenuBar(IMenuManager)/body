{
  final boolean showAltHelp=isShowAltHelp();
  MenuManager fileMenu=new MenuManager(CoreMessages.actions_menu_file,IWorkbenchActionConstants.M_FILE);
  MenuManager editMenu=new MenuManager(CoreMessages.actions_menu_edit,IWorkbenchActionConstants.M_EDIT);
  MenuManager navigateMenu=new MenuManager(CoreMessages.actions_menu_navigate,IWorkbenchActionConstants.M_NAVIGATE);
  MenuManager windowMenu=new MenuManager(CoreMessages.actions_menu_window,IWorkbenchActionConstants.M_WINDOW);
  MenuManager helpMenu=new MenuManager(CoreMessages.actions_menu_help,showAltHelp ? M_ALT_HELP : IWorkbenchActionConstants.M_HELP);
  menuBar.add(fileMenu);
  menuBar.add(editMenu);
  menuBar.add(navigateMenu);
  menuBar.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));
  menuBar.add(windowMenu);
  menuBar.add(helpMenu);
{
    fileMenu.add(new GroupMarker(IWorkbenchActionConstants.FILE_START));
    fileMenu.add(new GroupMarker(IWorkbenchActionConstants.NEW_EXT));
    fileMenu.add(new Separator());
    fileMenu.add(new GroupMarker(IWorkbenchActionConstants.CLOSE_EXT));
    fileMenu.add(new Separator());
    fileMenu.add(new GroupMarker(IWorkbenchActionConstants.PRINT_EXT));
    fileMenu.add(new Separator());
    fileMenu.add(new GroupMarker(IWorkbenchActionConstants.OPEN_EXT));
    fileMenu.add(new Separator());
    fileMenu.add(new GroupMarker(IWorkbenchActionConstants.IMPORT_EXT));
    fileMenu.add(new Separator());
    fileMenu.add(new GroupMarker(IWorkbenchActionConstants.SAVE_EXT));
    fileMenu.add(new Separator());
    fileMenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));
    fileMenu.add(ContributionItemFactory.REOPEN_EDITORS.create(getActionBarConfigurer().getWindowConfigurer().getWindow()));
    fileMenu.add(new GroupMarker(IWorkbenchActionConstants.MRU));
    fileMenu.add(new Separator());
    fileMenu.add(new GroupMarker(IWorkbenchActionConstants.FILE_END));
    fileMenu.add(ActionUtils.makeAction(emergentExitAction,null,null,CoreMessages.actions_menu_exit_emergency,null,null));
  }
{
    navigateMenu.add(new GroupMarker(IWorkbenchActionConstants.NAV_START));
    navigateMenu.add(new Separator(IWorkbenchActionConstants.OPEN_EXT));
    navigateMenu.add(new Separator(IWorkbenchActionConstants.SHOW_EXT));
    navigateMenu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
    navigateMenu.add(new GroupMarker(IWorkbenchActionConstants.NAV_END));
    navigateMenu.add(new GroupMarker(IWorkbenchActionConstants.GROUP_APP));
  }
{
    windowMenu.add(newWindowAction);
    windowMenu.add(new Separator());
    windowMenu.add(new ToggleViewAction(DatabaseNavigatorView.VIEW_ID));
    windowMenu.add(new ToggleViewAction(ProjectNavigatorView.VIEW_ID));
    windowMenu.add(new ToggleViewAction(ProjectExplorerView.VIEW_ID));
{
      MenuManager showViewMenuMgr=new MenuManager("Show View","showView");
      IContributionItem showViewMenu=ContributionItemFactory.VIEWS_SHORTLIST.create(PlatformUI.getWorkbench().getActiveWorkbenchWindow());
      showViewMenuMgr.add(showViewMenu);
      windowMenu.add(showViewMenuMgr);
    }
    windowMenu.add(new Separator());
    windowMenu.add(new GroupMarker("perspective"));
    windowMenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));
    windowMenu.add(new Separator());
  }
{
    helpMenu.add(ActionUtils.makeAction(aboutAction,null,null,CoreMessages.actions_menu_about,null,null));
    helpMenu.add(showHelpAction);
    helpMenu.add(new Separator());
    if (showAltHelp) {
      helpMenu.add(ActionUtils.makeCommandContribution(getActionBarConfigurer().getWindowConfigurer().getWindow(),IWorkbenchCommandConstants.WINDOW_SHOW_KEY_ASSIST));
      helpMenu.add(new Separator());
      helpMenu.add(ActionUtils.makeCommandContribution(getActionBarConfigurer().getWindowConfigurer().getWindow(),"org.eclipse.ui.help.installationDialog"));
      helpMenu.add(checkUpdatesAction);
    }
 else {
      helpMenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));
      helpMenu.add(checkUpdatesAction);
    }
  }
}
