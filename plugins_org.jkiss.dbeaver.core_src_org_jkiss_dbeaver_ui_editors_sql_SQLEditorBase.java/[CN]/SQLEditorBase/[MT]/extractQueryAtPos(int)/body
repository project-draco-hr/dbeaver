{
  Document document=getDocument();
  if (document == null || document.getLength() == 0) {
    return null;
  }
  final int docLength=document.getLength();
  IDocumentPartitioner partitioner=document.getDocumentPartitioner(SQLPartitionScanner.SQL_PARTITIONING);
  if (partitioner != null) {
    while (currentPos < docLength && isMultiCommentPartition(partitioner,currentPos)) {
      currentPos++;
    }
  }
  int startPos=0;
  int endPos=docLength;
  boolean useBlankLines=syntaxManager.isBlankLineDelimiter();
  final String[] statementDelimiters=syntaxManager.getStatementDelimiters();
  try {
    int currentLine=document.getLineOfOffset(currentPos);
    int lineOffset=document.getLineOffset(currentLine);
    int linesCount=document.getNumberOfLines();
    int firstLine=currentLine, lastLine=currentLine;
    while (firstLine > 0) {
      if (useBlankLines) {
        if (TextUtils.isEmptyLine(document,firstLine) && isDefaultPartition(partitioner,document.getLineOffset(firstLine))) {
          break;
        }
      }
 else {
        for (        String delim : statementDelimiters) {
          final int offset=TextUtils.getOffsetOf(document,firstLine,delim);
          if (offset >= 0 && isDefaultPartition(partitioner,offset)) {
            break;
          }
        }
      }
      firstLine--;
    }
    while (lastLine < linesCount) {
      if (useBlankLines) {
        if (TextUtils.isEmptyLine(document,lastLine) && isDefaultPartition(partitioner,document.getLineOffset(lastLine))) {
          break;
        }
      }
 else {
        for (        String delim : statementDelimiters) {
          final int offset=TextUtils.getOffsetOf(document,lastLine,delim);
          if (offset >= 0 && isDefaultPartition(partitioner,offset)) {
            break;
          }
        }
      }
      lastLine++;
    }
    if (lastLine >= linesCount) {
      lastLine=linesCount - 1;
    }
    startPos=document.getLineOffset(firstLine);
    endPos=document.getLineOffset(lastLine) + document.getLineLength(lastLine);
    currentPos=lineOffset;
  }
 catch (  BadLocationException e) {
    log.warn(e);
  }
  return parseQuery(document,startPos,endPos,currentPos);
}
