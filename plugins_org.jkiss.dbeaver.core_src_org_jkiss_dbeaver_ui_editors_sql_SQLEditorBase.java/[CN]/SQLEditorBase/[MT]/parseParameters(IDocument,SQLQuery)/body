{
  boolean execQuery=SQLUtils.isExecQuery(getSQLDialect(),query.getQuery());
  List<SQLQueryParameter> parameters=null;
  ruleManager.setRange(document,query.getOffset(),query.getLength());
  int blockDepth=0;
  for (; ; ) {
    IToken token=ruleManager.nextToken();
    int tokenOffset=ruleManager.getTokenOffset();
    final int tokenLength=ruleManager.getTokenLength();
    if (token.isEOF() || tokenOffset > query.getOffset() + query.getLength()) {
      break;
    }
    if (token instanceof SQLBlockBeginToken) {
      blockDepth++;
    }
 else     if (token instanceof SQLBlockEndToken) {
      blockDepth--;
    }
    if (token instanceof SQLParameterToken && tokenLength > 0 && blockDepth <= 0) {
      try {
        String paramName=document.get(tokenOffset,tokenLength);
        if (execQuery && paramName.equals("?")) {
          continue;
        }
        if (parameters == null) {
          parameters=new ArrayList<>();
        }
        SQLQueryParameter parameter=new SQLQueryParameter(parameters.size(),paramName,tokenOffset - query.getOffset(),tokenLength);
        SQLQueryParameter previous=null;
        if (parameter.isNamed()) {
          for (int i=parameters.size(); i > 0; i--) {
            if (parameters.get(i - 1).getName().equals(paramName)) {
              previous=parameters.get(i - 1);
              break;
            }
          }
        }
        parameter.setPrevious(previous);
        parameters.add(parameter);
      }
 catch (      BadLocationException e) {
        log.warn("Can't extract query parameter",e);
      }
    }
  }
  return parameters;
}
