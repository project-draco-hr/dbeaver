{
  if (endPos - startPos <= 0) {
    return null;
  }
  SQLDialect dialect=getSQLDialect();
  ruleManager.setRange(document,startPos,endPos - startPos);
  int statementStart=startPos;
  int bracketDepth=0;
  boolean hasBlocks=false;
  boolean hasValuableTokens=false;
  for (; ; ) {
    IToken token=ruleManager.nextToken();
    int tokenOffset=ruleManager.getTokenOffset();
    final int tokenLength=ruleManager.getTokenLength();
    boolean isDelimiter=token instanceof SQLDelimiterToken;
    String delimiterText=null;
    if (isDelimiter) {
      try {
        delimiterText=document.get(tokenOffset,tokenLength);
      }
 catch (      BadLocationException e) {
        log.debug(e);
        delimiterText="";
      }
    }
    if (tokenLength == 1) {
      try {
        char aChar=document.getChar(tokenOffset);
        if (aChar == '(' || aChar == '{' || aChar == '[') {
          bracketDepth++;
        }
 else         if (aChar == ')' || aChar == '}' || aChar == ']') {
          bracketDepth--;
        }
      }
 catch (      BadLocationException e) {
        log.warn(e);
      }
    }
    if (token instanceof SQLBlockBeginToken) {
      bracketDepth++;
      hasBlocks=true;
    }
 else     if (bracketDepth > 0 && token instanceof SQLBlockEndToken) {
      bracketDepth--;
      hasBlocks=true;
    }
 else     if (isDelimiter && bracketDepth > 0) {
      continue;
    }
    if (hasValuableTokens && (token.isEOF() || (isDelimiter && tokenOffset >= currentPos) || tokenOffset > endPos)) {
      if (tokenOffset > endPos) {
        tokenOffset=endPos;
      }
      if (tokenOffset >= document.getLength()) {
        tokenOffset=document.getLength();
      }
      assert(tokenOffset >= currentPos);
      try {
        String queryText=document.get(statementStart,tokenOffset - statementStart);
        while (statementStart < tokenOffset && Character.isWhitespace(document.getChar(statementStart))) {
          statementStart++;
        }
        while (statementStart < tokenOffset && Character.isWhitespace(document.getChar(tokenOffset - 1))) {
          tokenOffset--;
        }
        if (tokenOffset == statementStart) {
          return null;
        }
        Collection<String> delimiterTexts;
        if (isDelimiter) {
          delimiterTexts=Collections.singleton(delimiterText);
        }
 else {
          delimiterTexts=syntaxManager.getStatementDelimiters();
        }
        if (isDelimiter && hasBlocks && dialect.isDelimiterAfterBlock()) {
          queryText=(queryText + delimiterText).trim();
        }
 else {
          queryText=queryText.trim();
          for (          String delim : delimiterTexts) {
            if (queryText.endsWith(delim)) {
              queryText=queryText.substring(0,queryText.length() - delim.length());
            }
          }
        }
        return new SQLQuery(queryText.trim(),statementStart,tokenOffset - statementStart);
      }
 catch (      BadLocationException ex) {
        log.warn("Can't extract query",ex);
        return null;
      }
    }
    if (isDelimiter) {
      statementStart=tokenOffset + tokenLength;
    }
    if (token.isEOF()) {
      return null;
    }
    if (!hasValuableTokens && !token.isWhitespace() && !(token instanceof SQLCommentToken)) {
      hasValuableTokens=true;
    }
  }
}
