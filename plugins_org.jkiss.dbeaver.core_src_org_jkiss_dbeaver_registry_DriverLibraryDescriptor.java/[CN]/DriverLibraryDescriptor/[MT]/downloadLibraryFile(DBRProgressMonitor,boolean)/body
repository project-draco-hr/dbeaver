{
  if (isMavenArtifact()) {
    MavenArtifact artifact=downloadMavenArtifact(monitor,updateVersion);
    if (artifact.getRepository().isLocal()) {
      return;
    }
  }
  String externalURL=getExternalURL();
  if (externalURL == null) {
    throw new IOException("Unresolved file reference: " + getPath());
  }
  final URLConnection connection=RuntimeUtils.openConnection(externalURL);
  monitor.worked(1);
  monitor.done();
  final int contentLength=connection.getContentLength();
  monitor.beginTask("Download " + externalURL,contentLength);
  boolean success=false;
  final File localFile=getLocalFile();
  if (localFile == null) {
    throw new IOException("No target file for '" + getPath() + "'");
  }
  final File localDir=localFile.getParentFile();
  if (!localDir.exists()) {
    if (!localDir.mkdirs()) {
      log.warn("Can't create directory for local driver file '" + localDir.getAbsolutePath() + "'");
    }
  }
  final OutputStream outputStream=new FileOutputStream(localFile);
  try {
    final InputStream inputStream=connection.getInputStream();
    try {
      final NumberFormat numberFormat=NumberFormat.getNumberInstance();
      byte[] buffer=new byte[10000];
      int totalRead=0;
      for (; ; ) {
        if (monitor.isCanceled()) {
          throw new InterruptedException();
        }
        monitor.subTask(numberFormat.format(totalRead) + "/" + numberFormat.format(contentLength));
        final int count=inputStream.read(buffer);
        if (count <= 0) {
          success=true;
          break;
        }
        outputStream.write(buffer,0,count);
        monitor.worked(count);
        totalRead+=count;
      }
    }
  finally {
      ContentUtils.close(inputStream);
    }
  }
  finally {
    ContentUtils.close(outputStream);
    if (!success) {
      if (!localFile.delete()) {
        log.warn("Can't delete local driver file '" + localFile.getAbsolutePath() + "'");
      }
    }
  }
  monitor.done();
}
