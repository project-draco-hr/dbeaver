{
  this.dataSource=dataSource;
  this.statement_id=JDBCUtils.safeGetString(dbResult,"statement_id");
  this.plan_id=JDBCUtils.safeGetLong(dbResult,"plan_id");
  this.timestamp=JDBCUtils.safeGetTimestamp(dbResult,"timestamp");
  this.remarks=JDBCUtils.safeGetString(dbResult,"remarks");
  this.operation=JDBCUtils.safeGetString(dbResult,"operation");
  this.options=JDBCUtils.safeGetString(dbResult,"options");
  this.objectNode=JDBCUtils.safeGetString(dbResult,"object_node");
  this.objectOwner=JDBCUtils.safeGetString(dbResult,"object_owner");
  this.objectName=JDBCUtils.safeGetString(dbResult,"object_name");
  this.objectAlias=JDBCUtils.safeGetString(dbResult,"object_alias");
  this.object_instance=JDBCUtils.safeGetLong(dbResult,"object_instance");
  this.objectType=JDBCUtils.safeGetString(dbResult,"object_type");
  this.optimizer=JDBCUtils.safeGetString(dbResult,"optimizer");
  this.search_columns=JDBCUtils.safeGetLong(dbResult,"search_columns");
  this.id=JDBCUtils.safeGetInt(dbResult,"id");
  this.depth=JDBCUtils.safeGetInt(dbResult,"depth");
  this.position=JDBCUtils.safeGetInt(dbResult,"position");
  this.cost=JDBCUtils.safeGetLong(dbResult,"cost");
  this.cardinality=JDBCUtils.safeGetLong(dbResult,"cardinality");
  this.bytes=JDBCUtils.safeGetLong(dbResult,"bytes");
  this.other_tag=JDBCUtils.safeGetString(dbResult,"other_tag");
  this.partition_start=JDBCUtils.safeGetString(dbResult,"partition_start");
  this.partition_stop=JDBCUtils.safeGetString(dbResult,"partition_stop");
  this.partition_id=JDBCUtils.safeGetLong(dbResult,"partition_id");
  this.other=JDBCUtils.safeGetString(dbResult,"other");
  this.distribution=JDBCUtils.safeGetString(dbResult,"distribution");
  this.cpu_cost=JDBCUtils.safeGetLong(dbResult,"cpu_cost");
  this.io_cost=JDBCUtils.safeGetLong(dbResult,"io_cost");
  this.temp_space=JDBCUtils.safeGetLong(dbResult,"temp_space");
  this.access_predicates=JDBCUtils.safeGetString(dbResult,"access_predicates");
  this.filter_predicates=JDBCUtils.safeGetString(dbResult,"filter_predicates");
  this.projection=JDBCUtils.safeGetString(dbResult,"projection");
  this.time=JDBCUtils.safeGetLong(dbResult,"time");
  this.qblock_name=JDBCUtils.safeGetString(dbResult,"qblock_name");
  this.other_xml=JDBCUtils.safeGetString(dbResult,"other_xml");
  Integer parent_id=JDBCUtils.safeGetInteger(dbResult,"parent_id");
  if (parent_id != null) {
    parent=prevNodes.get(parent_id);
  }
  if (parent != null) {
    if (parent.nested == null) {
      parent.nested=new ArrayList<OraclePlanNode>();
    }
    parent.nested.add(this);
  }
}
