{
  String columnName=JDBCUtils.safeGetString(dbResult,JDBCConstants.COLUMN_NAME);
  int columnTypeNum=JDBCUtils.safeGetInt(dbResult,JDBCConstants.COLUMN_TYPE);
  int valueType=JDBCUtils.safeGetInt(dbResult,JDBCConstants.DATA_TYPE);
  String typeName=JDBCUtils.safeGetString(dbResult,JDBCConstants.TYPE_NAME);
  int position=JDBCUtils.safeGetInt(dbResult,JDBCConstants.ORDINAL_POSITION);
  long columnSize=JDBCUtils.safeGetLong(dbResult,JDBCConstants.LENGTH);
  boolean notNull=JDBCUtils.safeGetInt(dbResult,JDBCConstants.NULLABLE) == DatabaseMetaData.procedureNoNulls;
  int scale=JDBCUtils.safeGetInt(dbResult,JDBCConstants.SCALE);
  int precision=JDBCUtils.safeGetInt(dbResult,JDBCConstants.PRECISION);
  DBSProcedureParameterType parameterType;
switch (columnTypeNum) {
case DatabaseMetaData.procedureColumnIn:
    parameterType=DBSProcedureParameterType.IN;
  break;
case DatabaseMetaData.procedureColumnInOut:
parameterType=DBSProcedureParameterType.INOUT;
break;
case DatabaseMetaData.procedureColumnOut:
parameterType=DBSProcedureParameterType.OUT;
break;
case DatabaseMetaData.procedureColumnReturn:
parameterType=DBSProcedureParameterType.RETURN;
break;
case DatabaseMetaData.procedureColumnResult:
parameterType=DBSProcedureParameterType.RESULTSET;
break;
default :
parameterType=DBSProcedureParameterType.UNKNOWN;
break;
}
if (CommonUtils.isEmpty(columnName) && parameterType == DBSProcedureParameterType.RETURN) {
columnName="RETURN";
}
return new MySQLProcedureParameter(parent,columnName,typeName,valueType,position,columnSize,scale,precision,notNull,parameterType);
}
