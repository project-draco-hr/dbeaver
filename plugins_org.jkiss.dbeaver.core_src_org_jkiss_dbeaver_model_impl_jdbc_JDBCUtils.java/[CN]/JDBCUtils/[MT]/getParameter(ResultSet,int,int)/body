{
  try {
switch (columnType) {
case java.sql.Types.BOOLEAN:
case java.sql.Types.BIT:
      try {
        return dbResult.getByte(columnIndex);
      }
 catch (      SQLException e) {
        return dbResult.getInt(columnIndex);
      }
case java.sql.Types.CHAR:
case java.sql.Types.VARCHAR:
case java.sql.Types.LONGVARCHAR:
    return dbResult.getString(columnIndex);
case java.sql.Types.BIGINT:
case java.sql.Types.DECIMAL:
  return dbResult.getBigDecimal(columnIndex);
case java.sql.Types.DOUBLE:
return dbResult.getDouble(columnIndex);
case java.sql.Types.FLOAT:
return dbResult.getFloat(columnIndex);
case java.sql.Types.INTEGER:
return dbResult.getInt(columnIndex);
case java.sql.Types.NUMERIC:
case java.sql.Types.REAL:
return dbResult.getBigDecimal(columnIndex);
case java.sql.Types.SMALLINT:
return dbResult.getShort(columnIndex);
case java.sql.Types.TINYINT:
return dbResult.getByte(columnIndex);
case java.sql.Types.DATE:
return dbResult.getDate(columnIndex);
case java.sql.Types.TIME:
return dbResult.getTime(columnIndex);
case java.sql.Types.TIMESTAMP:
return dbResult.getTimestamp(columnIndex);
case java.sql.Types.BLOB:
return dbResult.getBlob(columnIndex);
case java.sql.Types.CLOB:
return dbResult.getClob(columnIndex);
case java.sql.Types.VARBINARY:
case java.sql.Types.LONGVARBINARY:
return dbResult.getBlob(columnIndex);
case java.sql.Types.STRUCT:
return dbResult.getObject(columnIndex);
case java.sql.Types.ARRAY:
return dbResult.getArray(columnIndex);
default :
return new JDBCUnknownType(columnType,dbResult.getObject(columnIndex));
}
}
 catch (SQLException ex) {
}
try {
return dbResult.getObject(columnIndex);
}
 catch (SQLException ex) {
throw new DBCException(ex);
}
}
