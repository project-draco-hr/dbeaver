{
switch (getValueTypeByTypeName(typeName,valueType)) {
case java.sql.Types.BOOLEAN:
    return DBSDataKind.BOOLEAN;
case java.sql.Types.CHAR:
case java.sql.Types.VARCHAR:
case java.sql.Types.NVARCHAR:
case java.sql.Types.LONGVARCHAR:
case java.sql.Types.LONGNVARCHAR:
  return DBSDataKind.STRING;
case java.sql.Types.BIGINT:
case java.sql.Types.DECIMAL:
case java.sql.Types.DOUBLE:
case java.sql.Types.FLOAT:
case java.sql.Types.INTEGER:
case java.sql.Types.NUMERIC:
case java.sql.Types.REAL:
case java.sql.Types.SMALLINT:
return DBSDataKind.NUMERIC;
case java.sql.Types.BIT:
case java.sql.Types.TINYINT:
if (typeName.toLowerCase().contains("bool")) {
return DBSDataKind.BOOLEAN;
}
 else {
return DBSDataKind.NUMERIC;
}
case java.sql.Types.DATE:
case java.sql.Types.TIME:
case java.sql.Types.TIMESTAMP:
return DBSDataKind.DATETIME;
case java.sql.Types.BINARY:
case java.sql.Types.VARBINARY:
case java.sql.Types.LONGVARBINARY:
return DBSDataKind.BINARY;
case java.sql.Types.BLOB:
case java.sql.Types.CLOB:
case java.sql.Types.NCLOB:
return DBSDataKind.LOB;
case java.sql.Types.STRUCT:
return DBSDataKind.STRUCT;
case java.sql.Types.ARRAY:
return DBSDataKind.ARRAY;
case java.sql.Types.ROWID:
return DBSDataKind.STRING;
}
return DBSDataKind.UNKNOWN;
}
