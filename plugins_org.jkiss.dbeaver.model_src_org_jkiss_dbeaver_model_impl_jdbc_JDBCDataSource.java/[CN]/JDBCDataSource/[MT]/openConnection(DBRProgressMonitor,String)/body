{
  Driver driverInstance;
  try {
    driverInstance=getDriverInstance(monitor);
  }
 catch (  DBException e) {
    throw new DBCConnectException("Can't create driver instance",e,this);
  }
  Properties connectProps=new Properties();
{
    Map<String,String> internalProps=getInternalConnectionProperties(monitor);
    if (internalProps != null) {
      connectProps.putAll(internalProps);
    }
  }
{
    final Map<Object,Object> driverProperties=container.getDriver().getConnectionProperties();
    for (    Map.Entry<Object,Object> prop : driverProperties.entrySet()) {
      connectProps.setProperty(CommonUtils.toString(prop.getKey()),CommonUtils.toString(prop.getValue()));
    }
  }
  DBPConnectionConfiguration connectionInfo=container.getActualConnectionConfiguration();
  for (  Map.Entry<Object,Object> prop : connectionInfo.getProperties().entrySet()) {
    connectProps.setProperty(CommonUtils.toString(prop.getKey()),CommonUtils.toString(prop.getValue()));
  }
  if (!CommonUtils.isEmpty(connectionInfo.getUserName())) {
    connectProps.put(DBConstants.DATA_SOURCE_PROPERTY_USER,getConnectionUserName(connectionInfo));
  }
  if (!CommonUtils.isEmpty(connectionInfo.getUserPassword())) {
    connectProps.put(DBConstants.DATA_SOURCE_PROPERTY_PASSWORD,getConnectionUserPassword(connectionInfo));
  }
  for (Iterator<Object> iter=connectProps.keySet().iterator(); iter.hasNext(); ) {
    if (CommonUtils.toString(iter.next()).startsWith(DBConstants.INTERNAL_PROP_PREFIX)) {
      iter.remove();
    }
  }
  try {
    final String url=connectionInfo.getUrl();
    if (driverInstance != null) {
      try {
        if (!driverInstance.acceptsURL(url)) {
          log.error("Bad URL: " + url);
        }
      }
 catch (      Throwable e) {
        log.debug("Error in " + driverInstance.getClass().getName() + ".acceptsURL() - "+ url,e);
      }
    }
    Connection connection;
    if (driverInstance == null) {
      connection=DriverManager.getConnection(url,connectProps);
    }
 else {
      connection=driverInstance.connect(url,connectProps);
    }
    if (connection == null) {
      throw new DBCException("Null connection returned");
    }
    if (container.isConnectionReadOnly() && !isConnectionReadOnlyBroken()) {
      connection.setReadOnly(true);
    }
    return connection;
  }
 catch (  SQLException ex) {
    throw new DBCConnectException(ex.getMessage(),ex,this);
  }
catch (  DBCException ex) {
    throw ex;
  }
catch (  Throwable e) {
    throw new DBCConnectException("Unexpected driver error occurred while connecting to database",e);
  }
}
