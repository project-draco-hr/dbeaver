{
  final String jobName=getShell().getText();
  final SQLScriptProgressListener<T> scriptListener=getScriptListener();
  final List<T> objects=getCheckedObjects();
  final Map<T,List<String>> objectsSQL=new LinkedHashMap<>();
  for (  T object : objects) {
    final List<String> lines=new ArrayList<>();
    generateObjectCommand(lines,object);
    objectsSQL.put(object,lines);
  }
  final DataSourceJob job=new DataSourceJob(jobName,null,getExecutionContext()){
    public Exception objectProcessingError;
    @Override protected IStatus run(    final DBRProgressMonitor monitor){
      final DataSourceJob curJob=this;
      DBeaverUI.asyncExec(new Runnable(){
        @Override public void run(){
          scriptListener.beginScriptProcessing(curJob,objects);
        }
      }
);
      monitor.beginTask(jobName,objects.size());
      try (DBCSession session=getExecutionContext().openSession(monitor,DBCExecutionPurpose.UTIL,jobName)){
        for (int i=0; i < objects.size(); i++) {
          if (monitor.isCanceled()) {
            break;
          }
          final int objectNumber=i;
          final T object=objects.get(i);
          monitor.subTask("Process " + DBUtils.getObjectFullName(object,DBPEvaluationContext.UI));
          objectProcessingError=null;
          DBeaverUI.asyncExec(new Runnable(){
            @Override public void run(){
              scriptListener.beginObjectProcessing(object,objectNumber);
            }
          }
);
          try {
            final List<String> lines=objectsSQL.get(object);
            for (            String line : lines) {
              try (DBCStatement statement=DBUtils.prepareStatement(session,line,false)){
                if (statement.executeStatement()) {
                  try (DBCResultSet resultSet=statement.openResultSet()){
                    DBeaverUI.syncExec(new Runnable(){
                      @Override public void run(){
                        try {
                          scriptListener.processObjectResults(object,resultSet);
                        }
 catch (                        DBCException e) {
                          objectProcessingError=e;
                        }
                      }
                    }
);
                  }
                   if (objectProcessingError != null) {
                    break;
                  }
                }
              }
             }
          }
 catch (          Exception e) {
            objectProcessingError=e;
          }
 finally {
            DBeaverUI.asyncExec(new Runnable(){
              @Override public void run(){
                scriptListener.endObjectProcessing(object,objectProcessingError);
              }
            }
);
          }
          monitor.worked(1);
        }
      }
  finally {
        monitor.done();
        DBeaverUI.asyncExec(new Runnable(){
          @Override public void run(){
            scriptListener.endScriptProcessing();
          }
        }
);
      }
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(false);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
    }
  }
);
  job.schedule();
}
