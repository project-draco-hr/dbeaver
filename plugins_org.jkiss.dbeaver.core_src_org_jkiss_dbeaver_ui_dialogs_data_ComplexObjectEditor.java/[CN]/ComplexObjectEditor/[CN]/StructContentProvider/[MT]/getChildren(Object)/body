{
  ComplexElement[] children=childrenMap.get(parent);
  if (children != null) {
    return children;
  }
  if (parent instanceof DBDComposite) {
    DBDComposite structure=(DBDComposite)parent;
    try {
      DBSAttributeBase[] attributes=structure.getAttributes();
      children=new CompositeField[attributes.length];
      for (int i=0; i < attributes.length; i++) {
        DBSAttributeBase attr=attributes[i];
        Object value=structure.getAttributeValue(attr);
        children[i]=new CompositeField(structure.getDataType().getDataSource(),attr,value);
      }
    }
 catch (    DBException e) {
      log.error("Error getting structure meta data",e);
    }
  }
 else   if (parent instanceof DBDCollection) {
    DBDCollection array=(DBDCollection)parent;
    ArrayInfo arrayInfo=new ArrayInfo();
    arrayInfo.componentType=array.getComponentType();
    arrayInfo.valueHandler=DBUtils.findValueHandler(arrayInfo.componentType.getDataSource(),arrayInfo.componentType);
    children=new ArrayItem[array.getItemCount()];
    for (int i=0; i < children.length; i++) {
      children[i]=new ArrayItem(arrayInfo,i,array.getItem(i));
    }
  }
 else   if (parent instanceof DBDReference) {
    final DBDReference reference=(DBDReference)parent;
    DBRRunnableWithResult<Object> runnable=new DBRRunnableWithResult<Object>(){
      @Override public void run(      DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        try (DBCSession session=executionContext.openSession(monitor,DBCExecutionPurpose.UTIL,"Read reference value")){
          result=reference.getReferencedObject(session);
        }
 catch (        DBCException e) {
          throw new InvocationTargetException(e);
        }
      }
    }
;
    DBeaverUI.runInUI(DBeaverUI.getActiveWorkbenchWindow(),runnable);
    children=getChildren(runnable.getResult());
  }
 else   if (parent instanceof CompositeField) {
    Object value=((CompositeField)parent).value;
    if (isComplexType(value)) {
      children=getChildren(value);
    }
  }
 else   if (parent instanceof ArrayItem) {
    Object value=((ArrayItem)parent).value;
    if (isComplexType(value)) {
      children=getChildren(value);
    }
  }
  if (children != null) {
    childrenMap.put(parent,children);
  }
  return children;
}
