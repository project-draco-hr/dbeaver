{
  if (parent instanceof DBDStructure) {
    DBDStructure structure=(DBDStructure)parent;
    try {
      Collection<? extends DBSAttributeBase> attributes=structure.getAttributes();
      Object[] children=new Object[attributes.size()];
      int index=0;
      for (      DBSAttributeBase attr : attributes) {
        Object value=structure.getAttributeValue(attr);
        children[index++]=new FieldInfo(structure.getObjectDataType().getDataSource(),attr,value);
      }
      return children;
    }
 catch (    DBException e) {
      log.error("Error getting structure meta data",e);
    }
  }
 else   if (parent instanceof DBDArray) {
    DBDArray array=(DBDArray)parent;
    try {
      Object[] contents=array.getContents();
      ArrayItem[] items=new ArrayItem[contents.length];
      for (int i=0; i < contents.length; i++) {
        items[i]=new ArrayItem(array,i,contents[i]);
      }
      return items;
    }
 catch (    DBCException e) {
      log.error("Error getting array content",e);
    }
  }
 else   if (parent instanceof DBDReference) {
    final DBDReference reference=(DBDReference)parent;
    DBRRunnableWithResult<Object> runnable=new DBRRunnableWithResult<Object>(){
      @Override public void run(      DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        DBCExecutionContext context=dataSource.openContext(monitor,DBCExecutionPurpose.UTIL,"Read reference value");
        try {
          result=reference.getReferencedObject(context);
        }
 catch (        DBCException e) {
          throw new InvocationTargetException(e);
        }
 finally {
          context.close();
        }
      }
    }
;
    DBeaverUI.runInUI(DBeaverUI.getActiveWorkbenchWindow(),runnable);
    return getChildren(runnable.getResult());
  }
 else   if (parent instanceof FieldInfo) {
    Object value=((FieldInfo)parent).value;
    if (value instanceof DBDComplexType) {
      return getChildren(value);
    }
  }
 else   if (parent instanceof ArrayItem) {
    Object value=((ArrayItem)parent).value;
    if (value instanceof DBDComplexType) {
      return getChildren(value);
    }
  }
  return new Object[0];
}
