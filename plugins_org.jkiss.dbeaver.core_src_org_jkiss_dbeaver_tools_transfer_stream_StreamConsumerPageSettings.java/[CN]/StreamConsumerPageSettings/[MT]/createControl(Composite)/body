{
  initializeDialogUnits(parent);
  final StreamConsumerSettings settings=getWizard().getPageSettings(this,StreamConsumerSettings.class);
  Composite composite=new Composite(parent,SWT.NULL);
  GridLayout gl=new GridLayout();
  gl.marginHeight=0;
  gl.marginWidth=0;
  composite.setLayout(gl);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
{
    Group generalSettings=new Group(composite,SWT.NONE);
    generalSettings.setText(CoreMessages.dialog_export_wizard_settings_group_general);
    gl=new GridLayout(4,false);
    generalSettings.setLayout(gl);
    generalSettings.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
{
      Composite formattingGroup=UIUtils.createPlaceholder(generalSettings,3);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=4;
      formattingGroup.setLayoutData(gd);
      UIUtils.createControlLabel(formattingGroup,CoreMessages.dialog_export_wizard_settings_label_formatting);
      formatProfilesCombo=new Combo(formattingGroup,SWT.DROP_DOWN | SWT.READ_ONLY);
      gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
      gd.widthHint=200;
      formatProfilesCombo.setLayoutData(gd);
      formatProfilesCombo.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          if (formatProfilesCombo.getSelectionIndex() > 0) {
            settings.setFormatterProfile(DBeaverCore.getInstance().getDataFormatterRegistry().getCustomProfile(UIUtils.getComboSelection(formatProfilesCombo)));
          }
 else {
            settings.setFormatterProfile(null);
          }
        }
      }
);
      Button profilesManageButton=new Button(formattingGroup,SWT.PUSH);
      profilesManageButton.setText(CoreMessages.dialog_export_wizard_settings_button_edit);
      profilesManageButton.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          PreferenceDialog propDialog=PreferencesUtil.createPropertyDialogOn(getShell(),DBeaverCore.getInstance().getDataFormatterRegistry(),PrefPageDataFormat.PAGE_ID,null,getSelectedFormatterProfile(),PreferencesUtil.OPTION_NONE);
          if (propDialog != null) {
            propDialog.open();
            reloadFormatProfiles();
          }
        }
      }
);
      reloadFormatProfiles();
    }
{
      UIUtils.createControlLabel(generalSettings,CoreMessages.dialog_export_wizard_settings_label_binaries);
      lobExtractType=new Combo(generalSettings,SWT.DROP_DOWN | SWT.READ_ONLY);
      lobExtractType.setItems(new String[]{CoreMessages.dialog_export_wizard_settings_binaries_item_set_to_null,CoreMessages.dialog_export_wizard_settings_binaries_item_save_to_file,CoreMessages.dialog_export_wizard_settings_binaries_item_inline});
      lobExtractType.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
switch (lobExtractType.getSelectionIndex()) {
case EXTRACT_LOB_SKIP:
            settings.setLobExtractType(StreamConsumerSettings.LobExtractType.SKIP);
          break;
case EXTRACT_LOB_FILES:
        settings.setLobExtractType(StreamConsumerSettings.LobExtractType.FILES);
      break;
case EXTRACT_LOB_INLINE:
    settings.setLobExtractType(StreamConsumerSettings.LobExtractType.INLINE);
  break;
}
updatePageCompletion();
}
}
);
lobEncodingLabel=UIUtils.createControlLabel(generalSettings,CoreMessages.dialog_export_wizard_settings_label_encoding);
lobEncodingCombo=new Combo(generalSettings,SWT.DROP_DOWN | SWT.READ_ONLY);
lobEncodingCombo.setItems(new String[]{"Base64","Hex","Binary"});
lobEncodingCombo.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
switch (lobEncodingCombo.getSelectionIndex()) {
case LOB_ENCODING_BASE64:
settings.setLobEncoding(StreamConsumerSettings.LobEncoding.BASE64);
break;
case LOB_ENCODING_HEX:
settings.setLobEncoding(StreamConsumerSettings.LobEncoding.HEX);
break;
case LOB_ENCODING_BINARY:
settings.setLobEncoding(StreamConsumerSettings.LobEncoding.BINARY);
break;
}
}
}
);
}
}
Group exporterSettings=new Group(composite,SWT.NONE);
exporterSettings.setText(CoreMessages.dialog_export_wizard_settings_group_exporter);
exporterSettings.setLayoutData(new GridData(GridData.FILL_BOTH));
exporterSettings.setLayout(new GridLayout(1,false));
propsEditor=new PropertyTreeViewer(exporterSettings,SWT.BORDER);
setControl(composite);
}
