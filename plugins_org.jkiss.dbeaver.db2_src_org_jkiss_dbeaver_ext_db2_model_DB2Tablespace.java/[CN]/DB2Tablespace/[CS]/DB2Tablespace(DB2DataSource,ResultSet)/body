{
  super(db2DataSource,true);
  this.name=JDBCUtils.safeGetString(dbResult,"TBSPACE");
  this.owner=JDBCUtils.safeGetString(dbResult,"OWNER");
  this.ownerType=CommonUtils.valueOf(DB2OwnerType.class,JDBCUtils.safeGetString(dbResult,"OWNERTYPE"));
  this.createTime=JDBCUtils.safeGetTimestamp(dbResult,"CREATE_TIME");
  this.tbspaceId=JDBCUtils.safeGetInteger(dbResult,"TBSPACEID");
  this.tbspaceType=CommonUtils.valueOf(DB2TablespaceType.class,JDBCUtils.safeGetString(dbResult,"TBSPACETYPE"));
  this.dataType=CommonUtils.valueOf(DB2TablespaceDataType.class,JDBCUtils.safeGetString(dbResult,"DATATYPE"));
  this.extentSize=JDBCUtils.safeGetInteger(dbResult,"EXTENTSIZE");
  this.prefetchSize=JDBCUtils.safeGetInteger(dbResult,"PREFETCHSIZE");
  this.overHead=JDBCUtils.safeGetDouble(dbResult,"OVERHEAD");
  this.transferRate=JDBCUtils.safeGetDouble(dbResult,"TRANSFERRATE");
  this.writeOverHead=JDBCUtils.safeGetDouble(dbResult,"WRITEOVERHEAD");
  this.writeTransferRate=JDBCUtils.safeGetDouble(dbResult,"WRITETRANSFERRATE");
  this.pageSize=JDBCUtils.safeGetInteger(dbResult,"PAGESIZE");
  this.dbpgName=JDBCUtils.safeGetString(dbResult,"DBPGNAME");
  this.dropRecovery=JDBCUtils.safeGetBoolean(dbResult,"DROP_RECOVERY",DB2YesNo.Y.name());
  this.remarks=JDBCUtils.safeGetString(dbResult,"REMARKS");
  if (db2DataSource.isAtLeastV10_1()) {
    this.dataTag=JDBCUtils.safeGetInteger(dbResult,"DATATAG");
    this.effectivePrefetchSize=JDBCUtils.safeGetInteger(dbResult,"EFFECTIVEPREFETCHSIZE");
    String storageGroupName=JDBCUtils.safeGetString(dbResult,"SGNAME");
    if (storageGroupName != null) {
      this.storageGroup=db2DataSource.getStorageGroup(VoidProgressMonitor.INSTANCE,storageGroupName);
    }
  }
  Integer bufferpoolId=JDBCUtils.safeGetInteger(dbResult,"BUFFERPOOLID");
  bufferpool=DB2Utils.findBufferpoolById(VoidProgressMonitor.INSTANCE,db2DataSource,bufferpoolId);
}
