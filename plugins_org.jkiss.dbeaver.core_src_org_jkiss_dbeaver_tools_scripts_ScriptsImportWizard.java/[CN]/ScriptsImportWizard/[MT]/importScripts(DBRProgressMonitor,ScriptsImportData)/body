{
  List<Pattern> masks=new ArrayList<>();
  StringTokenizer st=new StringTokenizer(importData.getFileMasks(),",; ");
  while (st.hasMoreTokens()) {
    String mask=st.nextToken().trim();
    if (!CommonUtils.isEmpty(mask)) {
      mask=mask.replace("*",".*");
      masks.add(Pattern.compile(mask));
    }
  }
  List<File> filesToImport=new ArrayList<>();
  collectFiles(importData.getInputDir(),masks,filesToImport);
  if (filesToImport.isEmpty()) {
    return 0;
  }
  final IProgressMonitor nullMonitor=new NullProgressMonitor();
  int imported=filesToImport.size();
  monitor.beginTask(CoreMessages.dialog_scripts_import_wizard_monitor_import_scripts,imported);
  for (  File file : filesToImport) {
    monitor.subTask(file.getName());
    List<File> path=new ArrayList<>();
    for (File parent=file.getParentFile(); !parent.equals(importData.getInputDir()); parent=parent.getParentFile()) {
      path.add(0,parent);
    }
    final IResource srcResource=importData.getImportDir().getResource();
    if (!(srcResource instanceof IFolder)) {
      log.warn("Resource '" + srcResource + "' is not a folder");
      continue;
    }
    IFolder targetDir=(IFolder)srcResource;
    for (    File folder : path) {
      targetDir=targetDir.getFolder(folder.getName());
      if (!targetDir.exists()) {
        targetDir.create(true,true,nullMonitor);
      }
    }
    String targetName=file.getName();
    if (!targetName.toLowerCase().endsWith("." + ScriptsHandlerImpl.SCRIPT_FILE_EXTENSION)) {
      targetName+="." + ScriptsHandlerImpl.SCRIPT_FILE_EXTENSION;
    }
    final IFile targetFile=targetDir.getFile(targetName);
    if (targetFile.exists()) {
      if (importData.isOverwriteFiles()) {
        log.warn("Overwriting file '" + targetFile.getFullPath() + "'");
        targetFile.delete(true,true,monitor.getNestedMonitor());
      }
 else {
        log.warn("File '" + targetFile.getFullPath() + "' already exists - skipped");
        imported--;
        continue;
      }
    }
    FileInputStream in=new FileInputStream(file);
    try {
      targetFile.create(in,true,nullMonitor);
    }
  finally {
      ContentUtils.close(in);
    }
    if (importData.getDataSourceContainer() != null) {
      SQLEditorInput.setScriptDataSource(targetFile,importData.getDataSourceContainer());
    }
    monitor.worked(1);
  }
  monitor.done();
  return imported;
}
