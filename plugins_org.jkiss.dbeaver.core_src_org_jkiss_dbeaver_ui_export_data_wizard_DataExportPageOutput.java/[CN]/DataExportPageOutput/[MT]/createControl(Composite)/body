{
  initializeDialogUnits(parent);
  Composite composite=new Composite(parent,SWT.NULL);
  GridLayout gl=new GridLayout();
  gl.marginHeight=0;
  gl.marginWidth=0;
  composite.setLayout(gl);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
{
    Group generalSettings=UIUtils.createControlGroup(composite,CoreMessages.dialog_export_wizard_output_group_general,5,GridData.FILL_HORIZONTAL,0);
    directoryText=UIUtils.createOutputFolderChooser(generalSettings,new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        getWizard().getSettings().setOutputFolder(directoryText.getText());
        updatePageCompletion();
      }
    }
);
    UIUtils.createControlLabel(generalSettings,CoreMessages.dialog_export_wizard_output_label_file_name_pattern);
    fileNameText=new Text(generalSettings,SWT.BORDER);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    fileNameText.setLayoutData(gd);
    fileNameText.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        getWizard().getSettings().setOutputFilePattern(fileNameText.getText());
        updatePageCompletion();
      }
    }
);
{
      UIUtils.createControlLabel(generalSettings,CoreMessages.dialog_export_wizard_output_label_encoding);
      encodingCombo=UIUtils.createEncodingCombo(generalSettings,getWizard().getSettings().getOutputEncoding());
      encodingCombo.addModifyListener(new ModifyListener(){
        @Override public void modifyText(        ModifyEvent e){
          int index=encodingCombo.getSelectionIndex();
          if (index >= 0) {
            getWizard().getSettings().setOutputEncoding(encodingCombo.getItem(index));
          }
          updatePageCompletion();
        }
      }
);
      encodingBOMLabel=UIUtils.createControlLabel(generalSettings,CoreMessages.dialog_export_wizard_output_label_insert_bom);
      encodingBOMLabel.setToolTipText(CoreMessages.dialog_export_wizard_output_label_insert_bom_tooltip);
      encodingBOMCheckbox=new Button(generalSettings,SWT.CHECK);
      encodingBOMCheckbox.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END,GridData.VERTICAL_ALIGN_BEGINNING,true,false,1,1));
      encodingBOMCheckbox.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          getWizard().getSettings().setOutputEncodingBOM(encodingBOMCheckbox.getSelection());
        }
      }
);
      new Label(generalSettings,SWT.NONE);
    }
    compressCheckbox=UIUtils.createLabelCheckbox(generalSettings,CoreMessages.dialog_export_wizard_output_checkbox_compress,false);
    compressCheckbox.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING,GridData.VERTICAL_ALIGN_BEGINNING,true,false,4,1));
    compressCheckbox.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        getWizard().getSettings().setCompressResults(compressCheckbox.getSelection());
      }
    }
);
  }
{
    Group generalSettings=UIUtils.createControlGroup(composite,CoreMessages.dialog_export_wizard_output_group_progress,4,GridData.FILL_HORIZONTAL,0);
    Label threadsNumLabel=UIUtils.createControlLabel(generalSettings,CoreMessages.dialog_export_wizard_output_label_max_threads);
    threadsNumText=new Spinner(generalSettings,SWT.BORDER);
    threadsNumText.setMinimum(1);
    threadsNumText.setMaximum(10);
    threadsNumText.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        try {
          getWizard().getSettings().setMaxJobCount(Integer.parseInt(threadsNumText.getText()));
        }
 catch (        NumberFormatException e1) {
        }
      }
    }
);
    if (getWizard().getSettings().getDataProviders().size() < 2) {
      threadsNumLabel.setEnabled(false);
      threadsNumText.setEnabled(false);
    }
    threadsNumText.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING,GridData.VERTICAL_ALIGN_BEGINNING,false,false,3,1));
    if (false) {
      UIUtils.createControlLabel(generalSettings,CoreMessages.dialog_export_wizard_output_label_extract_type);
      rowsExtractType=new Combo(generalSettings,SWT.DROP_DOWN | SWT.READ_ONLY);
      rowsExtractType.setItems(new String[]{CoreMessages.dialog_export_wizard_output_combo_extract_type_item_single_query,CoreMessages.dialog_export_wizard_output_combo_extract_type_item_by_segments});
      rowsExtractType.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          DataExportSettings exportSettings=getWizard().getSettings();
switch (rowsExtractType.getSelectionIndex()) {
case EXTRACT_TYPE_SEGMENTS:
            exportSettings.setExtractType(DataExportSettings.ExtractType.SEGMENTS);
          break;
case EXTRACT_TYPE_SINGLE_QUERY:
        exportSettings.setExtractType(DataExportSettings.ExtractType.SINGLE_QUERY);
      break;
  }
  updatePageCompletion();
}
}
);
segmentSizeLabel=UIUtils.createControlLabel(generalSettings,CoreMessages.dialog_export_wizard_output_label_segment_size);
segmentSizeLabel.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END,GridData.VERTICAL_ALIGN_BEGINNING,false,false,1,1));
segmentSizeText=new Text(generalSettings,SWT.BORDER);
segmentSizeText.addModifyListener(new ModifyListener(){
@Override public void modifyText(ModifyEvent e){
  try {
    getWizard().getSettings().setSegmentSize(Integer.parseInt(segmentSizeText.getText()));
  }
 catch (  NumberFormatException e1) {
  }
}
}
);
segmentSizeText.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END,GridData.VERTICAL_ALIGN_BEGINNING,false,false,1,1));
}
newConnectionCheckbox=UIUtils.createLabelCheckbox(generalSettings,CoreMessages.dialog_export_wizard_output_checkbox_new_connection,true);
newConnectionCheckbox.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
getWizard().getSettings().setOpenNewConnections(newConnectionCheckbox.getSelection());
}
}
);
newConnectionCheckbox.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING,GridData.VERTICAL_ALIGN_BEGINNING,false,false,3,1));
rowCountCheckbox=UIUtils.createLabelCheckbox(generalSettings,CoreMessages.dialog_export_wizard_output_checkbox_select_row_count,true);
rowCountCheckbox.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
getWizard().getSettings().setQueryRowCount(rowCountCheckbox.getSelection());
}
}
);
rowCountCheckbox.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING,GridData.VERTICAL_ALIGN_BEGINNING,false,false,3,1));
showFolderCheckbox=UIUtils.createLabelCheckbox(generalSettings,CoreMessages.dialog_export_wizard_output_checkbox_open_folder,true);
showFolderCheckbox.addSelectionListener(new SelectionAdapter(){
@Override public void widgetSelected(SelectionEvent e){
getWizard().getSettings().setOpenFolderOnFinish(showFolderCheckbox.getSelection());
}
}
);
showFolderCheckbox.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING,GridData.VERTICAL_ALIGN_BEGINNING,false,false,3,1));
}
setControl(composite);
}
