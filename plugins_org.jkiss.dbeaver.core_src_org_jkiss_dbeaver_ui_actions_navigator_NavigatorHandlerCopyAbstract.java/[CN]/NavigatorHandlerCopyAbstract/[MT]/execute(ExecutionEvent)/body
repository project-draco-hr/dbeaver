{
  final ISelection selection=HandlerUtil.getCurrentSelection(event);
  final IWorkbenchWindow workbenchWindow=HandlerUtil.getActiveWorkbenchWindow(event);
  if (selection instanceof IStructuredSelection) {
    final IStructuredSelection structSelection=(IStructuredSelection)selection;
    UIUtils.runInUI(workbenchWindow.getShell(),new Runnable(){
      @Override public void run(){
        List<DBNNode> selectedNodes=new ArrayList<DBNNode>();
        List<DBPNamedObject> selectedObjects=new ArrayList<DBPNamedObject>();
        List<String> selectedFiles=new ArrayList<String>();
        StringBuilder buf=new StringBuilder();
        for (Iterator<?> iter=structSelection.iterator(); iter.hasNext(); ) {
          Object object=iter.next();
          String objectValue=getObjectDisplayString(object);
          if (objectValue == null) {
            continue;
          }
          DBNNode node=RuntimeUtils.getObjectAdapter(object,DBNNode.class);
          DBPNamedObject dbObject=null;
          if (node instanceof DBNDatabaseNode) {
            dbObject=((DBNDatabaseNode)node).getObject();
          }
          if (dbObject == null) {
            dbObject=RuntimeUtils.getObjectAdapter(object,DBPNamedObject.class);
          }
          if (node != null) {
            selectedNodes.add(node);
          }
          if (node instanceof DBNResource && ((DBNResource)node).getResource() instanceof IFile) {
            final IFile file=(IFile)((DBNResource)node).getResource();
            selectedFiles.add(file.getLocation().makeAbsolute().toFile().getAbsolutePath());
          }
          if (dbObject != null) {
            selectedObjects.add(dbObject);
          }
          if (buf.length() > 0) {
            buf.append(GeneralUtils.getDefaultLineSeparator());
          }
          buf.append(objectValue);
        }
{
          List<Object> dataList=new ArrayList<Object>();
          List<Transfer> dataTypeList=new ArrayList<Transfer>();
          if (buf.length() > 0) {
            dataList.add(buf.toString());
            dataTypeList.add(TextTransfer.getInstance());
          }
          if (!selectedNodes.isEmpty()) {
            dataList.add(selectedNodes);
            dataTypeList.add(TreeNodeTransfer.getInstance());
          }
          if (!selectedObjects.isEmpty()) {
            dataList.add(selectedObjects);
            dataTypeList.add(DatabaseObjectTransfer.getInstance());
          }
          if (!selectedFiles.isEmpty()) {
            dataList.add(selectedFiles.toArray(new String[selectedFiles.size()]));
            dataTypeList.add(FileTransfer.getInstance());
          }
          if (!dataList.isEmpty()) {
            Clipboard clipboard=new Clipboard(workbenchWindow.getShell().getDisplay());
            clipboard.setContents(dataList.toArray(),dataTypeList.toArray(new Transfer[dataTypeList.size()]));
            clipboard.dispose();
            ObjectPropertyTester.firePropertyChange(ObjectPropertyTester.PROP_CAN_PASTE);
          }
        }
      }
    }
);
  }
  return null;
}
