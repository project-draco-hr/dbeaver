{
  Shell shell=getShell();
  shell.setText(CoreMessages.dialog_search_objects_title);
  shell.setImage(DBIcon.FIND.getImage());
  SashForm divider=new SashForm(parent,SWT.VERTICAL | SWT.SMOOTH);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=600;
  divider.setLayoutData(gd);
{
    searchGroup=new Composite(divider,SWT.NONE);
    searchGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    searchGroup.setLayout(new GridLayout(3,false));
    UIUtils.createControlLabel(searchGroup,CoreMessages.dialog_search_objects_label_object_name);
    searchText=new Combo(searchGroup,SWT.DROP_DOWN);
    searchText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    if (nameMask != null) {
      searchText.setText(nameMask);
    }
    for (    String history : searchHistory) {
      searchText.add(history);
    }
    searchText.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        nameMask=searchText.getText();
        checkSearchEnabled();
      }
    }
);
    searchButton=new Button(searchGroup,SWT.PUSH);
    searchButton.setText(CoreMessages.dialog_search_objects_button_search);
    searchButton.setImage(DBIcon.FIND.getImage());
    gd=new GridData(GridData.HORIZONTAL_ALIGN_END);
    searchButton.setLayoutData(gd);
    searchButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        performSearch();
      }
    }
);
{
      Composite optionsGroup2=UIUtils.createPlaceholder(searchGroup,5,5);
      gd=new GridData(GridData.FILL_HORIZONTAL | GridData.HORIZONTAL_ALIGN_BEGINNING);
      gd.horizontalSpan=3;
      optionsGroup2.setLayoutData(gd);
      UIUtils.createControlLabel(optionsGroup2,CoreMessages.dialog_search_objects_label_name_match);
      final Combo matchCombo=new Combo(optionsGroup2,SWT.DROP_DOWN | SWT.READ_ONLY);
      matchCombo.add(CoreMessages.dialog_search_objects_combo_starts_with,MATCH_INDEX_STARTS_WITH);
      matchCombo.add(CoreMessages.dialog_search_objects_combo_contains,MATCH_INDEX_CONTAINS);
      matchCombo.add(CoreMessages.dialog_search_objects_combo_like,MATCH_INDEX_LIKE);
      matchCombo.select(0);
      matchCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      if (matchTypeIndex >= 0) {
        matchCombo.select(matchTypeIndex);
      }
      matchCombo.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          matchTypeIndex=matchCombo.getSelectionIndex();
        }
      }
);
      if (maxResults <= 0) {
        maxResults=100;
      }
      final Spinner maxResultsSpinner=UIUtils.createLabelSpinner(optionsGroup2,CoreMessages.dialog_search_objects_spinner_max_results,maxResults,1,10000);
      maxResultsSpinner.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      maxResultsSpinner.addModifyListener(new ModifyListener(){
        @Override public void modifyText(        ModifyEvent e){
          maxResults=maxResultsSpinner.getSelection();
        }
      }
);
      final Button caseCheckbox=UIUtils.createCheckbox(optionsGroup2,CoreMessages.dialog_search_objects_case_sensitive,caseSensitive);
      maxResultsSpinner.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
      caseCheckbox.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          caseSensitive=caseCheckbox.getSelection();
        }
      }
);
    }
    Composite optionsGroup=new Composite(searchGroup,SWT.NONE);
    GridLayout layout=new GridLayout(2,true);
    layout.marginHeight=0;
    layout.marginWidth=0;
    optionsGroup.setLayout(layout);
    gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=3;
    optionsGroup.setLayoutData(gd);
{
      final DBeaverCore core=DBeaverCore.getInstance();
      Group sourceGroup=UIUtils.createControlGroup(optionsGroup,CoreMessages.dialog_search_objects_group_objects_source,1,GridData.FILL_BOTH,0);
      final DBNProject rootNode=core.getNavigatorModel().getRoot().getProject(core.getProjectRegistry().getActiveProject());
      dataSourceTree=new DatabaseNavigatorTree(sourceGroup,rootNode.getDatabases(),SWT.SINGLE);
      gd=new GridData(GridData.FILL_BOTH);
      dataSourceTree.setLayoutData(gd);
      dataSourceTree.getViewer().addFilter(new ViewerFilter(){
        @Override public boolean select(        Viewer viewer,        Object parentElement,        Object element){
          if (element instanceof TreeLoadNode) {
            return true;
          }
          if (element instanceof DBNNode) {
            if (element instanceof DBNDatabaseFolder) {
              DBNDatabaseFolder folder=(DBNDatabaseFolder)element;
              Class<? extends DBSObject> folderItemsClass=folder.getChildrenClass();
              return folderItemsClass != null && DBSObjectContainer.class.isAssignableFrom(folderItemsClass);
            }
            if (element instanceof DBNProjectDatabases || element instanceof DBNDataSource || (element instanceof DBSWrapper && ((DBSWrapper)element).getObject() instanceof DBSObjectContainer)) {
              return true;
            }
          }
          return false;
        }
      }
);
      dataSourceTree.getViewer().addSelectionChangedListener(new ISelectionChangedListener(){
        @Override public void selectionChanged(        SelectionChangedEvent event){
          IStructuredSelection structSel=(IStructuredSelection)event.getSelection();
          for (Iterator<?> iter=structSel.iterator(); iter.hasNext(); ) {
            Object object=iter.next();
            if (object instanceof DBNDataSource) {
              DBNDataSource dsNode=(DBNDataSource)object;
              dsNode.initializeNode(null,new DBRProcessListener(){
                @Override public void onProcessFinish(                IStatus status){
                  if (status.isOK()) {
                    Display.getDefault().asyncExec(new Runnable(){
                      @Override public void run(){
                        if (!dataSourceTree.isDisposed()) {
                          fillObjectTypes();
                        }
                      }
                    }
);
                  }
                }
              }
);
            }
          }
        }
      }
);
    }
{
      Group typesGroup=UIUtils.createControlGroup(optionsGroup,CoreMessages.dialog_search_objects_group_object_types,1,GridData.FILL_BOTH,0);
      typesTable=new Table(typesGroup,SWT.BORDER | SWT.CHECK | SWT.H_SCROLL| SWT.V_SCROLL);
      typesTable.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          for (          TableItem item : typesTable.getItems()) {
            DBSObjectType objectType=(DBSObjectType)item.getData();
            if (item.getChecked()) {
              checkedTypes.add(objectType);
            }
 else {
              checkedTypes.remove(objectType);
            }
          }
          checkSearchEnabled();
        }
      }
);
      typesTable.setLayoutData(new GridData(GridData.FILL_BOTH));
      TableColumn typeColumn=new TableColumn(typesTable,SWT.LEFT);
      typeColumn.setText(CoreMessages.dialog_search_objects_column_type);
      TableColumn descColumn=new TableColumn(typesTable,SWT.LEFT);
      descColumn.setText(CoreMessages.dialog_search_objects_column_description);
    }
  }
{
    itemList=new SearchResultsControl(divider);
    itemList.createProgressPanel();
    itemList.setInfo(CoreMessages.dialog_search_objects_item_list_info);
    gd=new GridData(GridData.FILL_BOTH);
    gd.widthHint=700;
    gd.heightHint=500;
    itemList.setLayoutData(gd);
  }
  divider.setWeights(new int[]{40,60});
  shell.addShellListener(new ShellListener());
  shell.setDefaultButton(searchButton);
  if (currentDataSource != null) {
    DBNNode selNode=DBeaverCore.getInstance().getNavigatorModel().findNode(currentDataSource);
    if (selNode != null) {
      dataSourceTree.getViewer().setSelection(new StructuredSelection(selNode),true);
    }
 else {
      dataSourceTree.getViewer().setSelection(new StructuredSelection());
    }
    fillObjectTypes();
  }
  return divider;
}
