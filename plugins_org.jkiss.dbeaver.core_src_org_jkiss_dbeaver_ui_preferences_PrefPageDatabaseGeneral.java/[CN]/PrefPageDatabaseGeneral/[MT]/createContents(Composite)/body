{
  Composite composite=UIUtils.createPlaceholder(parent,1,5);
{
    Group groupObjects=UIUtils.createControlGroup(composite,CoreMessages.pref_page_ui_general_group_general,1,GridData.VERTICAL_ALIGN_BEGINNING,300);
    automaticUpdateCheck=UIUtils.createCheckbox(groupObjects,CoreMessages.pref_page_ui_general_checkbox_automatic_updates,false);
    automaticUpdateCheck.setLayoutData(new GridData(GridData.BEGINNING,GridData.BEGINNING,true,false,2,1));
  }
{
    Group agentGroup=UIUtils.createControlGroup(composite,"Taskbar",2,SWT.NONE,0);
    longOperationsCheck=UIUtils.createCheckbox(agentGroup,"Enable long-time operations notification",false);
    longOperationsCheck.setLayoutData(new GridData(GridData.BEGINNING,GridData.BEGINNING,true,false,2,1));
    longOperationsCheck.setToolTipText("Shows special notification in system taskbar after long-time operation (e.g. SQL query) finish.");
    longOperationsTimeout=UIUtils.createLabelSpinner(agentGroup,"Long-time operation timeout",0,0,Integer.MAX_VALUE);
    if (RuntimeUtils.isPlatformMacOS()) {
      ControlEnableState.disable(agentGroup);
    }
  }
{
    Group groupEditors=UIUtils.createControlGroup(composite,CoreMessages.pref_page_ui_general_group_editors,1,GridData.VERTICAL_ALIGN_BEGINNING,0);
    keepEditorsOnRestart=UIUtils.createCheckbox(groupEditors,CoreMessages.pref_page_ui_general_keep_database_editors,false);
    keepEditorsOnRestart.setToolTipText("Remembers open editors (e.g. table editors) and reopens them after DBeaver restart.");
    refreshEditorOnOpen=UIUtils.createCheckbox(groupEditors,CoreMessages.pref_page_ui_general_refresh_editor_on_open,false);
    refreshEditorOnOpen.setToolTipText("Refreshes object from database every time you open this object's editor.\nYou may need this option if your database structure changes frequently (e.g. by SQL scripts).");
    syncEditorDataSourceWithNavigator=UIUtils.createCheckbox(groupEditors,"Auto-sync editor connection with navigator selection",false);
    syncEditorDataSourceWithNavigator.setLayoutData(new GridData(GridData.BEGINNING,GridData.BEGINNING,true,false,2,1));
    syncEditorDataSourceWithNavigator.setToolTipText("Automatically sets editor (e.g. SQL editor) connection from selected navigator node.\nMakes sense if you need to change active connection/schema frequently.");
  }
{
    Group navigatorGroup=UIUtils.createControlGroup(composite,CoreMessages.pref_page_database_general_group_navigator,2,SWT.NONE,0);
    expandOnConnectCheck=UIUtils.createCheckbox(navigatorGroup,"Expand navigator tree on connect",false);
    expandOnConnectCheck.setLayoutData(new GridData(GridData.BEGINNING,GridData.BEGINNING,true,false,2,1));
    sortCaseInsensitiveCheck=UIUtils.createCheckbox(navigatorGroup,"Order elements alphabetically",false);
    sortCaseInsensitiveCheck.setLayoutData(new GridData(GridData.BEGINNING,GridData.BEGINNING,true,false,2,1));
    groupByDriverCheck=UIUtils.createCheckbox(navigatorGroup,"Group databases by driver",false);
    groupByDriverCheck.setLayoutData(new GridData(GridData.BEGINNING,GridData.BEGINNING,true,false,2,1));
    groupByDriverCheck.setEnabled(false);
    editorFullName=UIUtils.createCheckbox(navigatorGroup,"Show full object names in editors",false);
    editorFullName.setLayoutData(new GridData(GridData.BEGINNING,GridData.BEGINNING,true,false,2,1));
    doubleClickBehavior=UIUtils.createLabelCombo(navigatorGroup,"Double-click on connection",SWT.DROP_DOWN | SWT.READ_ONLY);
    doubleClickBehavior.add("Open Properties",NavigatorViewBase.DoubleClickBehavior.EDIT.ordinal());
    doubleClickBehavior.add("Connect / Disconnect",NavigatorViewBase.DoubleClickBehavior.CONNECT.ordinal());
    doubleClickBehavior.add("Open SQL Editor",NavigatorViewBase.DoubleClickBehavior.SQL_EDITOR.ordinal());
    doubleClickBehavior.add("Expand / Collapse",NavigatorViewBase.DoubleClickBehavior.EXPAND.ordinal());
  }
  performDefaults();
  return composite;
}
