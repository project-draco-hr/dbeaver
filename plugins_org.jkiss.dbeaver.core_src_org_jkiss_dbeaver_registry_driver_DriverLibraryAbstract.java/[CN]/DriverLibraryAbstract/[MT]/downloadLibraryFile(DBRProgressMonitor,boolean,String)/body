{
  final File localFile=getLocalFile();
  if (localFile == null) {
    throw new IOException("No target file for '" + getPath() + "'");
  }
  if (!forceUpdate && localFile.exists()) {
    return;
  }
  final File localDir=localFile.getParentFile();
  if (!localDir.exists()) {
    if (!localDir.mkdirs()) {
      log.warn("Can't create directory for local driver file '" + localDir.getAbsolutePath() + "'");
    }
  }
  String externalURL=getExternalURL();
  if (externalURL == null) {
    throw new IOException("Unresolved file reference: " + getPath());
  }
  final URLConnection connection=RuntimeUtils.openConnection(externalURL);
  int contentLength=connection.getContentLength();
  if (contentLength < 0) {
    contentLength=0;
  }
  int bufferLength=contentLength / 10;
  if (bufferLength > 1000000) {
    bufferLength=1000000;
  }
  if (bufferLength < 50000) {
    bufferLength=50000;
  }
  monitor.beginTask(taskName + " - " + externalURL,contentLength);
  boolean success=false;
  try (final OutputStream outputStream=new FileOutputStream(localFile)){
    try (final InputStream inputStream=connection.getInputStream()){
      final NumberFormat numberFormat=NumberFormat.getNumberInstance();
      byte[] buffer=new byte[bufferLength];
      int totalRead=0;
      for (; ; ) {
        if (monitor.isCanceled()) {
          throw new InterruptedException();
        }
        monitor.subTask(numberFormat.format(totalRead) + "/" + numberFormat.format(contentLength));
        final int count=inputStream.read(buffer);
        if (count <= 0) {
          success=true;
          break;
        }
        outputStream.write(buffer,0,count);
        monitor.worked(count);
        totalRead+=count;
      }
    }
   }
  finally {
    if (!success) {
      if (!localFile.delete()) {
        log.warn("Can't delete local driver file '" + localFile.getAbsolutePath() + "'");
      }
    }
    monitor.done();
  }
}
