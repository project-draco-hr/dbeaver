{
  Composite placeholder=UIUtils.createPlaceholder(parent,1);
  Composite configGroup=UIUtils.createControlGroup(placeholder,CoreMessages.dialog_project_import_wizard_file_group_input,3,GridData.FILL_HORIZONTAL,0);
  final Text fileNameText=UIUtils.createLabelText(configGroup,CoreMessages.dialog_project_import_wizard_file_label_file,null);
  fileNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String fileName=fileNameText.getText();
      if (CommonUtils.isEmpty(fileName)) {
        importData.setImportFile(null);
        clearArchive();
      }
 else {
        importData.setImportFile(new File(fileName));
        loadArchive();
      }
      updateState();
    }
  }
);
  Button openFolder=new Button(configGroup,SWT.PUSH);
  openFolder.setImage(DBIcon.TREE_FOLDER.getImage());
  openFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      FileDialog fd=new FileDialog(getShell(),SWT.OPEN | SWT.SINGLE);
      fd.setText(CoreMessages.dialog_project_import_wizard_file_dialog_export_archive_text);
      fd.setFilterPath(curFolder);
      String[] filterExt={"*.dbp","*.*"};
      fd.setFilterExtensions(filterExt);
      String selected=fd.open();
      if (selected != null) {
        curFolder=fd.getFilterPath();
        fileNameText.setText(selected);
      }
    }
  }
);
  final Button importDriverCheck=UIUtils.createCheckbox(configGroup,CoreMessages.dialog_project_import_wizard_file_checkbox_import_libraries,true);
  importDriverCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      importData.setImportDriverLibraries(importDriverCheck.getSelection());
    }
  }
);
  GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  gd.horizontalSpan=3;
  importDriverCheck.setLayoutData(gd);
  Group projectsGroup=UIUtils.createControlGroup(placeholder,CoreMessages.dialog_project_import_wizard_file_group_projects,1,GridData.FILL_BOTH,0);
  projectsTable=new Table(projectsGroup,SWT.MULTI | SWT.CHECK | SWT.BORDER| SWT.FULL_SELECTION);
  projectsTable.setHeaderVisible(true);
  projectsTable.setLinesVisible(true);
  gd=new GridData(GridData.FILL_BOTH);
  projectsTable.setLayoutData(gd);
  projectsTable.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateProjectsSelection();
      updateState();
    }
  }
);
  UIUtils.createTableColumn(projectsTable,SWT.LEFT,CoreMessages.dialog_project_import_wizard_file_column_source_name);
  UIUtils.createTableColumn(projectsTable,SWT.LEFT,CoreMessages.dialog_project_import_wizard_file_column_target_name);
  final TableEditor tableEditor=new TableEditor(projectsTable);
  tableEditor.horizontalAlignment=SWT.LEFT;
  tableEditor.verticalAlignment=SWT.TOP;
  tableEditor.grabHorizontal=true;
  projectsTable.addMouseListener(new MouseAdapter(){
    private void disposeOldEditor(){
      Control oldEditor=tableEditor.getEditor();
      if (oldEditor != null)       oldEditor.dispose();
    }
    @Override public void mouseUp(    MouseEvent e){
      disposeOldEditor();
      TableItem item=projectsTable.getItem(new Point(e.x,e.y));
      if (item == null) {
        return;
      }
      showEditor(item);
    }
    private void showEditor(    final TableItem item){
      Text text=new Text(projectsTable,SWT.BORDER);
      text.setText(item.getText(1));
      text.addModifyListener(new ModifyListener(){
        @Override public void modifyText(        ModifyEvent e){
          Text text=(Text)tableEditor.getEditor();
          item.setText(1,text.getText());
          updateProjectsSelection();
          updateState();
        }
      }
);
      text.selectAll();
      text.setFocus();
      tableEditor.setEditor(text,item,1);
    }
  }
);
  UIUtils.packColumns(projectsTable);
  setControl(placeholder);
}
