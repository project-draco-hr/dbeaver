{
  final Color shadowColor=viewer.getControl().getDisplay().getSystemColor(SWT.COLOR_WIDGET_DARK_SHADOW);
  final LabelProvider mainLabelProvider=(LabelProvider)viewer.getLabelProvider();
  columnController=new ViewerColumnController("projectExplorer",viewer);
  columnController.addColumn("Name","Resource name",SWT.LEFT,true,true,new TreeColumnViewerLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      return mainLabelProvider.getText(element);
    }
    @Override public Image getImage(    Object element){
      return mainLabelProvider.getImage(element);
    }
  }
));
  columnController.addColumn("DataSource","Datasource(s) associated with resource",SWT.LEFT,true,false,new TreeColumnViewerLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      DBNNode node=(DBNNode)element;
      if (node instanceof DBNDatabaseNode) {
        return ((DBNDatabaseNode)node).getDataSourceContainer().getName();
      }
 else       if (node instanceof DBNResource) {
        Collection<DBPDataSourceContainer> containers=((DBNResource)node).getAssociatedDataSources();
        if (!CommonUtils.isEmpty(containers)) {
          StringBuilder text=new StringBuilder();
          for (          DBPDataSourceContainer container : containers) {
            if (text.length() > 0) {
              text.append(", ");
            }
            text.append(container.getName());
          }
          return text.toString();
        }
      }
      return "";
    }
    @Override public Image getImage(    Object element){
      return null;
    }
  }
));
  columnController.addColumn("Preview","Script content preview",SWT.LEFT,false,false,new LazyLabelProvider(shadowColor){
    @Override public String getLazyText(    Object element){
      return ((DBNNode)element).getNodeDescription();
    }
  }
);
  columnController.addColumn("Size","File size",SWT.LEFT,false,false,new TreeColumnViewerLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      DBNNode node=(DBNNode)element;
      if (node instanceof DBNResource) {
        IResource resource=((DBNResource)node).getResource();
        if (resource instanceof IFile) {
          return String.valueOf(resource.getLocation().toFile().length());
        }
      }
      return "";
    }
  }
));
  columnController.addColumn("Modified","Time the file was last modified",SWT.LEFT,false,false,new TreeColumnViewerLabelProvider(new LabelProvider(){
    private SimpleDateFormat sdf=new SimpleDateFormat(UIUtils.DEFAULT_TIMESTAMP_PATTERN);
    @Override public String getText(    Object element){
      DBNNode node=(DBNNode)element;
      if (node instanceof DBNResource) {
        IResource resource=((DBNResource)node).getResource();
        if (resource instanceof IFile) {
          return sdf.format(new Date(resource.getLocation().toFile().lastModified()));
        }
      }
      return "";
    }
  }
));
  columnController.addColumn("Type","Resource type",SWT.LEFT,false,false,new TreeColumnViewerLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      DBNNode node=(DBNNode)element;
      if (node instanceof DBNResource) {
        IResource resource=((DBNResource)node).getResource();
        ProgramInfo program=ProgramInfo.getProgram(resource);
        if (program != null) {
          return program.getProgram().getName();
        }
      }
      return "";
    }
  }
));
  columnController.createColumns();
}
