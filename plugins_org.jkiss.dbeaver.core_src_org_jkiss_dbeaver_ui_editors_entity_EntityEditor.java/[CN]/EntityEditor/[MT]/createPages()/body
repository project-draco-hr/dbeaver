{
  final IDatabaseEditorInput editorInput=getEditorInput();
  if (editorInput instanceof ErrorEditorInput) {
    ErrorEditorInput errorInput=(ErrorEditorInput)editorInput;
    try {
      addPage(new ErrorEditorPartEx(errorInput.getError()),errorInput);
      setPageImage(0,PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK));
      setPageText(0,"Error");
    }
 catch (    PartInitException e) {
      log.error(e);
    }
  }
  commandListener=new DBECommandAdapter(){
    @Override public void onCommandChange(    DBECommand command){
      firePropertyChange(IEditorPart.PROP_DIRTY);
    }
  }
;
  DBECommandContext commandContext=getCommandContext();
  if (commandContext != null) {
    commandContext.addCommandListener(commandListener);
  }
  addPropertyListener(new IPropertyListener(){
    @Override public void propertyChanged(    Object source,    int propId){
      if (propId == IEditorPart.PROP_DIRTY) {
        EntityEditorPropertyTester.firePropertyChange(EntityEditorPropertyTester.PROP_DIRTY);
        EntityEditorPropertyTester.firePropertyChange(EntityEditorPropertyTester.PROP_CAN_UNDO);
        EntityEditorPropertyTester.firePropertyChange(EntityEditorPropertyTester.PROP_CAN_REDO);
      }
    }
  }
);
  super.createPages();
  DBSObject databaseObject=editorInput.getDatabaseObject();
  EditorDefaults editorDefaults=null;
  if (databaseObject == null) {
    log.debug("Null database object in EntityEditor");
  }
 else {
synchronized (defaultPageMap) {
      editorDefaults=defaultPageMap.get(databaseObject.getClass().getName());
    }
    EntityEditorsRegistry editorsRegistry=EntityEditorsRegistry.getInstance();
    EntityEditorDescriptor defaultEditor=editorsRegistry.getMainEntityEditor(databaseObject);
    hasPropertiesEditor=false;
    if (defaultEditor != null) {
      hasPropertiesEditor=addEditorTab(defaultEditor);
    }
    if (hasPropertiesEditor) {
      DBNNode node=editorInput.getNavigatorNode();
      int propEditorIndex=getPageCount() - 1;
      setPageText(propEditorIndex,CoreMessages.editors_entity_properties_text);
      setPageToolTip(propEditorIndex,node.getNodeType() + CoreMessages.editors_entity_properties_tooltip_suffix);
      setPageImage(propEditorIndex,DBeaverIcons.getImage(node.getNodeIconDefault()));
    }
  }
  addContributions(EntityEditorDescriptor.POSITION_PROPS);
  addContributions(EntityEditorDescriptor.POSITION_START);
  addContributions(EntityEditorDescriptor.POSITION_MIDDLE);
  addContributions(EntityEditorDescriptor.POSITION_END);
  String defPageId=editorInput.getDefaultPageId();
  if (defPageId == null && editorDefaults != null) {
    defPageId=editorDefaults.pageId;
  }
  if (defPageId != null) {
    IEditorPart defEditorPage=editorMap.get(defPageId);
    if (defEditorPage != null) {
      setActiveEditor(defEditorPage);
    }
  }
  this.activeEditor=getActiveEditor();
  if (activeEditor instanceof ITabbedFolderContainer) {
    String defFolderId=editorInput.getDefaultFolderId();
    if (defFolderId == null && editorDefaults != null) {
      defFolderId=editorDefaults.folderId;
    }
    if (defFolderId != null) {
      ((ITabbedFolderContainer)activeEditor).switchFolder(defFolderId);
    }
  }
  UIUtils.setHelp(getContainer(),IHelpContextIds.CTX_ENTITY_EDITOR);
}
