{
  Composite dialogGroup=(Composite)super.createDialogArea(parent);
  Object value=getValueController().getValue();
  if (value == null) {
    value="";
  }
 else {
    value=DBUtils.getDefaultValueDisplayString(value);
  }
  String stringValue=value == null ? "" : value.toString();
  boolean isForeignKey=super.isForeignKey();
  Label label=new Label(dialogGroup,SWT.NONE);
  label.setText(CoreMessages.dialog_data_label_value);
  boolean readOnly=getValueController().isReadOnly();
  boolean useHex=!isForeignKey;
  long maxSize=getValueController().getAttributeMetaData().getMaxLength();
  final CTabFolder container=new CTabFolder(dialogGroup,SWT.TOP);
  lengthLabel=new Label(container,SWT.RIGHT);
  lengthLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  container.setTopRight(lengthLabel,SWT.FILL);
  container.setLayoutData(new GridData(GridData.FILL_BOTH));
{
    int style=SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.WRAP;
    if (!useHex) {
      style|=SWT.BORDER;
    }
    if (readOnly) {
      style|=SWT.READ_ONLY;
    }
    textEdit=new Text(container,style);
    textEdit.setText(stringValue);
    if (maxSize > 0) {
      textEdit.setTextLimit((int)maxSize);
    }
    textEdit.setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_WHITE));
    GridData gd=new GridData(isForeignKey ? GridData.FILL_HORIZONTAL : GridData.FILL_BOTH);
    gd.widthHint=300;
    if (!isForeignKey) {
      gd.heightHint=200;
      gd.grabExcessVerticalSpace=true;
    }
    textEdit.setLayoutData(gd);
    textEdit.setFocus();
    textEdit.setEditable(!readOnly);
    textEdit.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        updateValueLength();
      }
    }
);
    CTabItem item=new CTabItem(container,SWT.NO_FOCUS);
    item.setText("Text");
    item.setImage(DBIcon.TYPE_TEXT.getImage());
    item.setControl(textEdit);
  }
  Point minSize=null;
  if (useHex) {
    hexEditControl=new HexEditControl(container,SWT.NONE,6,8);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.heightHint=200;
    gd.minimumWidth=hexEditControl.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
    hexEditControl.setLayoutData(gd);
    setBinaryContent(stringValue);
    minSize=hexEditControl.computeSize(SWT.DEFAULT,SWT.DEFAULT);
    minSize.x+=50;
    minSize.y+=50;
    CTabItem item=new CTabItem(container,SWT.NO_FOCUS);
    item.setText("Hex");
    item.setImage(DBIcon.TYPE_BINARY.getImage());
    item.setControl(hexEditControl);
  }
  container.setSelection(0);
  container.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
switch (container.getSelectionIndex()) {
case 0:
{
          try {
            BinaryContent content=hexEditControl.getContent();
            ByteBuffer buffer=ByteBuffer.allocate((int)content.length());
            content.get(buffer,0);
            String stringValue=new String(buffer.array());
            textEdit.setText(stringValue);
          }
 catch (          IOException e) {
            log.error(e);
          }
          break;
        }
case 1:
{
        String stringValue=textEdit.getText();
        setBinaryContent(stringValue);
        break;
      }
  }
}
}
);
updateValueLength();
if (isForeignKey) {
super.createEditorSelector(dialogGroup,textEdit);
}
if (minSize != null) {
getShell().setMinimumSize(minSize);
}
return dialogGroup;
}
