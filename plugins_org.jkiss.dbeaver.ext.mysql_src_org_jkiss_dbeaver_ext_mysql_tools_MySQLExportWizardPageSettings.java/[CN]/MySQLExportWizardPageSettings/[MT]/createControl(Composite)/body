{
  Composite composite=UIUtils.createPlaceholder(parent,1);
  Group methodGroup=UIUtils.createControlGroup(composite,MySQLMessages.tools_db_export_wizard_page_settings_group_exe_method,1,GridData.FILL_HORIZONTAL,0);
  methodCombo=new Combo(methodGroup,SWT.DROP_DOWN | SWT.READ_ONLY);
  methodCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  methodCombo.add(MySQLMessages.tools_db_export_wizard_page_settings_combo_item_online_backup);
  methodCombo.add(MySQLMessages.tools_db_export_wizard_page_settings_combo_item_lock_tables);
  methodCombo.add(MySQLMessages.tools_db_export_wizard_page_settings_combo_item_normal);
  methodCombo.select(wizard.method.ordinal());
  SelectionListener changeListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateState();
    }
  }
;
  Group settingsGroup=UIUtils.createControlGroup(composite,MySQLMessages.tools_db_export_wizard_page_settings_group_settings,3,GridData.FILL_HORIZONTAL,0);
  noCreateStatementsCheck=UIUtils.createCheckbox(settingsGroup,MySQLMessages.tools_db_export_wizard_page_settings_checkbox_no_create,wizard.noCreateStatements);
  noCreateStatementsCheck.addSelectionListener(changeListener);
  addDropStatementsCheck=UIUtils.createCheckbox(settingsGroup,MySQLMessages.tools_db_export_wizard_page_settings_checkbox_add_drop,wizard.addDropStatements);
  addDropStatementsCheck.addSelectionListener(changeListener);
  disableKeysCheck=UIUtils.createCheckbox(settingsGroup,MySQLMessages.tools_db_export_wizard_page_settings_checkbox_disable_keys,wizard.disableKeys);
  disableKeysCheck.addSelectionListener(changeListener);
  extendedInsertsCheck=UIUtils.createCheckbox(settingsGroup,MySQLMessages.tools_db_export_wizard_page_settings_checkbox_ext_inserts,wizard.extendedInserts);
  extendedInsertsCheck.addSelectionListener(changeListener);
  dumpEventsCheck=UIUtils.createCheckbox(settingsGroup,MySQLMessages.tools_db_export_wizard_page_settings_checkbox_dump_events,wizard.dumpEvents);
  dumpEventsCheck.addSelectionListener(changeListener);
  commentsCheck=UIUtils.createCheckbox(settingsGroup,MySQLMessages.tools_db_export_wizard_page_settings_checkbox_addnl_comments,wizard.comments);
  commentsCheck.addSelectionListener(changeListener);
  removeDefiner=UIUtils.createCheckbox(settingsGroup,MySQLMessages.tools_db_export_wizard_page_settings_checkbox_remove_definer,wizard.comments);
  removeDefiner.addSelectionListener(changeListener);
  Group outputGroup=UIUtils.createControlGroup(composite,MySQLMessages.tools_db_export_wizard_page_settings_group_output,3,GridData.FILL_HORIZONTAL,0);
  outputFileText=UIUtils.createLabelText(outputGroup,MySQLMessages.tools_db_export_wizard_page_settings_label_out_text,null);
  if (wizard.getOutputFolder() != null) {
    outputFileText.setText(wizard.getOutputFolder().getAbsolutePath());
  }
  outputFileText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      updateState();
    }
  }
);
  Button browseButton=new Button(outputGroup,SWT.PUSH);
  browseButton.setImage(DBeaverIcons.getImage(DBIcon.TREE_FOLDER));
  browseButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      File file=DialogUtils.selectFileForSave(getShell(),MySQLMessages.tools_db_export_wizard_page_settings_file_selector_title,new String[]{"*.sql","*.txt","*.*"},outputFileText.getText());
      if (file != null) {
        outputFileText.setText(file.getAbsolutePath());
        updateState();
      }
    }
  }
);
  createSecurityGroup(composite);
  setControl(composite);
}
