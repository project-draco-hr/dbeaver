{
  Object value=getValueController().getValue();
  Composite dialogGroup=(Composite)super.createDialogArea(parent);
  Label label=new Label(dialogGroup,SWT.NONE);
  label.setText(CoreMessages.dialog_data_label_value);
  int style=SWT.BORDER;
  if (getValueController().isReadOnly()) {
    style|=SWT.READ_ONLY;
  }
  DBSTypedObject valueType=getValueController().getValueType();
  boolean isDate=valueType.getTypeID() == java.sql.Types.DATE;
  boolean isTime=valueType.getTypeID() == java.sql.Types.TIME;
  boolean isTimeStamp=valueType.getTypeID() == java.sql.Types.TIMESTAMP;
  dateEditor=isDate || isTimeStamp ? new DateTime(dialogGroup,SWT.CALENDAR | style) : null;
  timeEditor=isTime || isTimeStamp ? new DateTime(dialogGroup,SWT.TIME | SWT.LONG | style) : null;
  if (dateEditor != null) {
    GridData gd=new GridData();
    gd.horizontalAlignment=GridData.CENTER;
    dateEditor.setLayoutData(gd);
    if (value instanceof Date) {
      Calendar cl=Calendar.getInstance();
      cl.setTime((Date)value);
      dateEditor.setDate(cl.get(Calendar.YEAR),cl.get(Calendar.MONTH),cl.get(Calendar.DAY_OF_MONTH));
    }
  }
  if (timeEditor != null) {
    GridData gd=new GridData();
    gd.horizontalAlignment=GridData.CENTER;
    timeEditor.setLayoutData(gd);
    if (value instanceof Date) {
      Calendar cl=Calendar.getInstance();
      cl.setTime((Date)value);
      timeEditor.setTime(cl.get(Calendar.HOUR_OF_DAY),cl.get(Calendar.MINUTE),cl.get(Calendar.SECOND));
    }
  }
  return dialogGroup;
}
