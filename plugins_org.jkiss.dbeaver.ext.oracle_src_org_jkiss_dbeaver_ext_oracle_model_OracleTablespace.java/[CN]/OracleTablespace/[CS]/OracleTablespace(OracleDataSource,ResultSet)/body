{
  super(dataSource,true);
  this.name=JDBCUtils.safeGetString(dbResult,"TABLESPACE_NAME");
  this.blockSize=JDBCUtils.safeGetLong(dbResult,"BLOCK_SIZE");
  this.initialExtent=JDBCUtils.safeGetLong(dbResult,"INITIAL_EXTENT");
  this.nextExtent=JDBCUtils.safeGetLong(dbResult,"NEXT_EXTENT");
  this.minExtents=JDBCUtils.safeGetLong(dbResult,"MIN_EXTENTS");
  this.maxExtents=JDBCUtils.safeGetLong(dbResult,"MAX_EXTENTS");
  this.pctIncrease=JDBCUtils.safeGetLong(dbResult,"PCT_INCREASE");
  this.minExtLen=JDBCUtils.safeGetLong(dbResult,"MIN_EXTLEN");
  this.status=CommonUtils.valueOf(Status.class,JDBCUtils.safeGetString(dbResult,"STATUS"),true);
  this.contents=CommonUtils.valueOf(Contents.class,JDBCUtils.safeGetString(dbResult,"CONTENTS"),true);
  this.logging=CommonUtils.valueOf(Logging.class,JDBCUtils.safeGetString(dbResult,"LOGGING"),true);
  this.forceLogging=JDBCUtils.safeGetBoolean(dbResult,"FORCE_LOGGING","Y");
  this.extentManagement=CommonUtils.valueOf(ExtentManagement.class,JDBCUtils.safeGetString(dbResult,"EXTENT_MANAGEMENT"),true);
  this.allocationType=CommonUtils.valueOf(AllocationType.class,JDBCUtils.safeGetString(dbResult,"ALLOCATION_TYPE"),true);
  this.pluggedIn=JDBCUtils.safeGetBoolean(dbResult,"PLUGGED_IN","Y");
  this.segmentSpaceManagement=CommonUtils.valueOf(SegmentSpaceManagement.class,JDBCUtils.safeGetString(dbResult,"SEGMENT_SPACE_MANAGEMENT"),true);
  this.defTableCompression="ENABLED".equals(JDBCUtils.safeGetString(dbResult,"DEF_TAB_COMPRESSION"));
  this.retention=CommonUtils.valueOf(Retention.class,JDBCUtils.safeGetString(dbResult,"RETENTION"),true);
  this.bigFile=JDBCUtils.safeGetBoolean(dbResult,"BIGFILE","Y");
}
