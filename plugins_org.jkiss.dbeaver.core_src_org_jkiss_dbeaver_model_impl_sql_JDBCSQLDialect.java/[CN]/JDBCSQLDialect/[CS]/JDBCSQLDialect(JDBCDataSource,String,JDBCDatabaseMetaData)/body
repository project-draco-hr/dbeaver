{
  this.dataSource=dataSource;
  this.name=name;
  try {
    this.identifierQuoteString=metaData.getIdentifierQuoteString();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.identifierQuoteString="\"";
  }
  if (identifierQuoteString != null) {
    identifierQuoteString=identifierQuoteString.trim();
    if (identifierQuoteString.isEmpty()) {
      identifierQuoteString=null;
    }
  }
  try {
switch (metaData.getSQLStateType()) {
case DatabaseMetaData.sqlStateXOpen:
      this.sqlStateType=SQLStateType.XOPEN;
    break;
case DatabaseMetaData.sqlStateSQL99:
  this.sqlStateType=SQLStateType.SQL99;
break;
default :
this.sqlStateType=SQLStateType.UNKNOWN;
break;
}
}
 catch (Throwable e) {
log.debug(e.getMessage());
this.sqlStateType=SQLStateType.UNKNOWN;
}
try {
supportsSubqueries=metaData.supportsCorrelatedSubqueries();
}
 catch (SQLException e) {
log.debug(e);
}
try {
this.supportsUnquotedMixedCase=metaData.supportsMixedCaseIdentifiers();
}
 catch (SQLException e) {
log.debug(e.getMessage());
this.supportsUnquotedMixedCase=false;
}
try {
this.supportsQuotedMixedCase=metaData.supportsMixedCaseQuotedIdentifiers();
}
 catch (SQLException e) {
log.debug(e.getMessage());
this.supportsQuotedMixedCase=false;
}
try {
if (metaData.storesUpperCaseIdentifiers()) {
this.unquotedIdentCase=DBPIdentifierCase.UPPER;
}
 else if (metaData.storesLowerCaseIdentifiers()) {
this.unquotedIdentCase=DBPIdentifierCase.LOWER;
}
 else {
this.unquotedIdentCase=DBPIdentifierCase.MIXED;
}
}
 catch (SQLException e) {
log.debug(e.getMessage());
this.unquotedIdentCase=DBPIdentifierCase.MIXED;
}
try {
if (metaData.storesUpperCaseQuotedIdentifiers()) {
this.quotedIdentCase=DBPIdentifierCase.UPPER;
}
 else if (metaData.storesLowerCaseQuotedIdentifiers()) {
this.quotedIdentCase=DBPIdentifierCase.LOWER;
}
 else {
this.quotedIdentCase=DBPIdentifierCase.MIXED;
}
}
 catch (SQLException e) {
log.debug(e.getMessage());
this.quotedIdentCase=DBPIdentifierCase.MIXED;
}
try {
this.searchStringEscape=metaData.getSearchStringEscape();
}
 catch (Throwable e) {
log.debug(e.getMessage());
this.searchStringEscape="\\";
}
try {
this.catalogSeparator=metaData.getCatalogSeparator();
if (CommonUtils.isEmpty(this.catalogSeparator)) {
this.catalogSeparator=String.valueOf(SQLConstants.STRUCT_SEPARATOR);
}
}
 catch (Throwable e) {
log.debug(e.getMessage());
this.catalogSeparator=String.valueOf(SQLConstants.STRUCT_SEPARATOR);
}
try {
catalogUsage=(metaData.supportsCatalogsInDataManipulation() ? SQLDialect.USAGE_DML : 0) | (metaData.supportsCatalogsInTableDefinitions() ? SQLDialect.USAGE_DDL : 0) | (metaData.supportsCatalogsInProcedureCalls() ? SQLDialect.USAGE_PROC : 0)| (metaData.supportsCatalogsInIndexDefinitions() ? SQLDialect.USAGE_INDEX : 0)| (metaData.supportsCatalogsInPrivilegeDefinitions() ? SQLDialect.USAGE_PRIV : 0);
}
 catch (SQLException e) {
log.debug(e.getMessage());
catalogUsage=SQLDialect.USAGE_NONE;
}
try {
schemaUsage=(metaData.supportsSchemasInDataManipulation() ? SQLDialect.USAGE_DML : 0) | (metaData.supportsSchemasInTableDefinitions() ? SQLDialect.USAGE_DDL : 0) | (metaData.supportsSchemasInProcedureCalls() ? SQLDialect.USAGE_PROC : 0)| (metaData.supportsSchemasInIndexDefinitions() ? SQLDialect.USAGE_INDEX : 0)| (metaData.supportsSchemasInPrivilegeDefinitions() ? SQLDialect.USAGE_PRIV : 0);
}
 catch (SQLException e) {
log.debug(e.getMessage());
schemaUsage=SQLDialect.USAGE_NONE;
}
try {
validCharacters=metaData.getExtraNameCharacters();
}
 catch (SQLException e) {
log.debug(e.getMessage());
validCharacters="";
}
try {
this.isCatalogAtStart=metaData.isCatalogAtStart();
}
 catch (Throwable e) {
log.debug(e.getMessage());
this.isCatalogAtStart=true;
}
loadKeywords(metaData);
}
