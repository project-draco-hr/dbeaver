{
  if (prop.getValueTransformer() != null) {
    newValue=prop.getValueTransformer().transform(editableValue,newValue);
  }
  final Object oldValue=getPropertyValue(monitor,editableValue,prop);
  if (!updatePropertyValue(monitor,editableValue,prop,newValue,false)) {
    return;
  }
  if (lastCommand == null || lastCommand.getObject() != editableValue || lastCommand.property != prop) {
    final DBEObjectEditor<DBPObject> objectEditor=getObjectEditor(DBEObjectEditor.class);
    if (objectEditor == null) {
      log.error("Can't obtain object editor for " + getEditableValue());
      return;
    }
    final DBEPropertyHandler<DBPObject> propertyHandler=objectEditor.makePropertyHandler((DBPObject)editableValue,prop);
    PropertyChangeCommand curCommand=new PropertyChangeCommand((DBPObject)editableValue,prop,propertyHandler,oldValue,newValue);
    getCommandContext().addCommand(curCommand,commandReflector);
    lastCommand=curCommand;
  }
 else {
    lastCommand.setNewValue(newValue);
    getCommandContext().updateCommand(lastCommand,commandReflector);
  }
  if (prop.getId().equals(DBConstants.PROP_ID_NAME) && editableValue instanceof DBSObject) {
    DBEObjectMaker objectManager=getObjectEditor(DBEObjectMaker.class);
    if (objectManager != null) {
      DBSObjectCache cache=objectManager.getObjectsCache((DBSObject)editableValue);
      if (cache != null && cache.isFullyCached()) {
        List<? extends DBSObject> cachedObjects=CommonUtils.copyList(cache.getCachedObjects());
        cache.setCache(cachedObjects);
      }
    }
  }
}
