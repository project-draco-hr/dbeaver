{
  Composite dialogGroup=(Composite)super.createDialogArea(parent);
  final Composite panel=UIUtils.createPlaceholder(dialogGroup,1,5);
  panel.setLayoutData(new GridData(GridData.FILL_BOTH));
{
    final Composite tableGroup=UIUtils.createPlaceholder(panel,2);
    tableGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    UIUtils.createLabelText(tableGroup,CoreMessages.dialog_struct_edit_fk_label_table,ownTable.getFullQualifiedName(),SWT.READ_ONLY | SWT.BORDER);
  }
  ItemListControl tableList;
{
    DBNNode rootNode=ownerTableNode.getParentNode();
    UIUtils.createControlLabel(panel,CoreMessages.dialog_struct_edit_fk_label_ref_table);
    tableList=new ItemListControl(panel,SWT.SINGLE | SWT.SHEET | SWT.BORDER,null,rootNode,null);
    if (progressProvider != null) {
      tableList.substituteProgressPanel(progressProvider.getProgressControl());
    }
 else {
      tableList.createProgressPanel();
    }
    tableList.loadData();
    final GridData gd=new GridData(GridData.FILL_BOTH);
    gd.widthHint=500;
    gd.heightHint=150;
    tableList.setLayoutData(gd);
    tableList.getSelectionProvider().addSelectionChangedListener(new ISelectionChangedListener(){
      @Override public void selectionChanged(      SelectionChangedEvent event){
        handleRefTableSelect(event.getSelection());
      }
    }
);
  }
  final Composite pkGroup=UIUtils.createPlaceholder(panel,2);
{
    pkGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    uniqueKeyCombo=UIUtils.createLabelCombo(pkGroup,CoreMessages.dialog_struct_edit_fk_combo_unik,SWT.DROP_DOWN | SWT.READ_ONLY);
    uniqueKeyCombo.setEnabled(false);
    uniqueKeyCombo.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        handleUniqueKeySelect();
      }
    }
);
  }
{
    UIUtils.createControlLabel(panel,CoreMessages.dialog_struct_edit_fk_label_columns);
    columnsTable=new Table(panel,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER);
    columnsTable.setHeaderVisible(true);
    columnsTable.setLinesVisible(true);
    final GridData gd=new GridData(GridData.FILL_BOTH);
    gd.widthHint=500;
    gd.heightHint=100;
    columnsTable.setLayoutData(gd);
    UIUtils.createTableColumn(columnsTable,SWT.LEFT,CoreMessages.dialog_struct_edit_fk_column_column);
    UIUtils.createTableColumn(columnsTable,SWT.LEFT,CoreMessages.dialog_struct_edit_fk_column_col_type);
    UIUtils.createTableColumn(columnsTable,SWT.LEFT,CoreMessages.dialog_struct_edit_fk_column_ref_col);
    UIUtils.createTableColumn(columnsTable,SWT.LEFT,CoreMessages.dialog_struct_edit_fk_column_ref_col_type);
    UIUtils.packColumns(columnsTable);
    final TableEditor tableEditor=new TableEditor(columnsTable);
    tableEditor.horizontalAlignment=SWT.CENTER;
    tableEditor.verticalAlignment=SWT.TOP;
    tableEditor.grabHorizontal=true;
    tableEditor.minimumWidth=50;
    columnsTable.addMouseListener(new ColumnsMouseListener(tableEditor,columnsTable));
  }
  final Composite cascadeGroup=UIUtils.createPlaceholder(panel,4,5);
{
    cascadeGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    final Combo onDeleteCombo=UIUtils.createLabelCombo(cascadeGroup,CoreMessages.dialog_struct_edit_fk_combo_on_delete,SWT.DROP_DOWN | SWT.READ_ONLY);
    onDeleteCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    final Combo onUpdateCombo=UIUtils.createLabelCombo(cascadeGroup,CoreMessages.dialog_struct_edit_fk_combo_on_update,SWT.DROP_DOWN | SWT.READ_ONLY);
    onUpdateCombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    for (    DBSForeignKeyModifyRule modifyRule : supportedModifyRules) {
      onDeleteCombo.add(modifyRule.getName());
      onUpdateCombo.add(modifyRule.getName());
    }
    onDeleteCombo.select(0);
    onUpdateCombo.select(0);
    onDeleteRule=onUpdateRule=supportedModifyRules[0];
    onDeleteCombo.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        onDeleteRule=supportedModifyRules[onDeleteCombo.getSelectionIndex()];
      }
    }
);
    onUpdateCombo.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        onUpdateRule=supportedModifyRules[onUpdateCombo.getSelectionIndex()];
      }
    }
);
  }
  panel.setTabList(new Control[]{tableList,pkGroup,columnsTable,cascadeGroup});
  return dialogGroup;
}
