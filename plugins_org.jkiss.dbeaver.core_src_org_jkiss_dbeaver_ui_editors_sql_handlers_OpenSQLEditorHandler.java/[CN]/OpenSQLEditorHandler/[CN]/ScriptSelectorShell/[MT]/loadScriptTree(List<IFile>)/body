{
  scriptFiles=new ArrayList<>(scriptFiles);
  Collections.sort(scriptFiles,new Comparator<IFile>(){
    @Override public int compare(    IFile o1,    IFile o2){
      return (int)(o2.getLocation().toFile().lastModified() / 1000 - o1.getLocation().toFile().lastModified() / 1000);
    }
  }
);
  scriptTable.removeAll();
  IFolder prevParent=null;
  TreeItem prevParentNode=null;
  for (  IFile scriptFile : scriptFiles) {
    IFolder parent=(IFolder)scriptFile.getParent();
    TreeItem parentNode=null;
    if (CommonUtils.equalObjects(parent,prevParent)) {
      parentNode=prevParentNode;
    }
    if (parentNode == null && !CommonUtils.equalObjects(parent,rootFolder)) {
      parentNode=new TreeItem(scriptTable,SWT.NONE);
      parentNode.setImage(0,DBeaverIcons.getImage(DBIcon.TREE_FOLDER));
      parentNode.setText(0,parent.getName());
    }
    final TreeItem item=parentNode == null ? new TreeItem(scriptTable,SWT.NONE) : new TreeItem(parentNode,SWT.NONE);
    item.setData(scriptFile);
    item.setImage(DBeaverIcons.getImage(UIIcon.SQL_SCRIPT));
    item.setText(0,scriptFile.getName() + "  ");
    item.setExpanded(true);
    String desc=SQLUtils.getScriptDescription(scriptFile);
    if (CommonUtils.isEmptyTrimmed(desc)) {
      desc="<empty>";
    }
    item.setText(1,desc);
    if (parentNode != null) {
      parentNode.setExpanded(true);
    }
    prevParent=parent;
    prevParentNode=parentNode;
  }
}
