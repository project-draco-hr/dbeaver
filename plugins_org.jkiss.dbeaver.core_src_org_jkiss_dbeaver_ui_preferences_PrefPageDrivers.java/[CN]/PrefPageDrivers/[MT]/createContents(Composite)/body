{
  Composite composite=UIUtils.createPlaceholder(parent,1,5);
{
    Group mavenGroup=UIUtils.createControlGroup(composite,"Maven repositories",2,GridData.FILL_HORIZONTAL,300);
    mavenRepoTable=new Table(mavenGroup,SWT.BORDER | SWT.FULL_SELECTION);
    UIUtils.createTableColumn(mavenRepoTable,SWT.LEFT,"Id");
    UIUtils.createTableColumn(mavenRepoTable,SWT.LEFT,"URL");
    mavenRepoTable.setHeaderVisible(true);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.heightHint=60;
    mavenRepoTable.setLayoutData(gd);
    Composite buttonsPH=UIUtils.createPlaceholder(mavenGroup,1);
    UIUtils.createToolButton(buttonsPH,"Add",new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String urlString=EnterNameDialog.chooseName(getShell(),"Enter Maven repository URL","http://");
        if (urlString != null) {
          try {
            URL url=new URL(urlString);
            new TableItem(mavenRepoTable,SWT.NONE).setText(new String[]{url.getHost(),urlString});
          }
 catch (          MalformedURLException e1) {
            UIUtils.showErrorDialog(getShell(),"Bad URL","Bad Maven repository URL",e1);
          }
        }
      }
    }
);
    final Button removeButton=UIUtils.createToolButton(buttonsPH,"Remove",new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        mavenRepoTable.remove(mavenRepoTable.getSelectionIndices());
        mavenRepoTable.notifyListeners(SWT.Selection,new Event());
      }
    }
);
    removeButton.setEnabled(false);
    mavenRepoTable.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        boolean enabled=false;
        TableItem[] selection=mavenRepoTable.getSelection();
        if (selection.length == 1) {
          enabled=true;
          if (selection[0].getData() instanceof MavenRepository && ((MavenRepository)selection[0].getData()).isPredefined()) {
            enabled=false;
          }
        }
        removeButton.setEnabled(enabled);
      }
    }
);
  }
{
    Group repoGroup=UIUtils.createControlGroup(composite,"File repositories",2,GridData.FILL_HORIZONTAL,300);
    sourceList=new List(repoGroup,SWT.BORDER | SWT.SINGLE);
    sourceList.setLayoutData(new GridData(GridData.FILL_BOTH));
    Composite buttonsPH=UIUtils.createPlaceholder(repoGroup,1);
    UIUtils.createToolButton(buttonsPH,"Add",new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String url=EnterNameDialog.chooseName(getShell(),"Enter drivers location URL","http://");
        if (url != null) {
          sourceList.add(url);
        }
      }
    }
);
    final Button removeButton=UIUtils.createToolButton(buttonsPH,"Remove",new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        sourceList.remove(sourceList.getSelectionIndices());
        sourceList.notifyListeners(SWT.Selection,new Event());
      }
    }
);
    removeButton.setEnabled(false);
    final Button upButton=UIUtils.createToolButton(buttonsPH,"Up",new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        int index=sourceList.getSelectionIndex();
        String prevValue=sourceList.getItem(index - 1);
        sourceList.setItem(index - 1,sourceList.getItem(index));
        sourceList.setItem(index,prevValue);
        sourceList.setSelection(index - 1);
        sourceList.notifyListeners(SWT.Selection,new Event());
      }
    }
);
    upButton.setEnabled(false);
    final Button downButton=UIUtils.createToolButton(buttonsPH,"Down",new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        int index=sourceList.getSelectionIndex();
        String nextValue=sourceList.getItem(index + 1);
        sourceList.setItem(index + 1,sourceList.getItem(index));
        sourceList.setItem(index,nextValue);
        sourceList.setSelection(index + 1);
        sourceList.notifyListeners(SWT.Selection,new Event());
      }
    }
);
    downButton.setEnabled(false);
    sourceList.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        if (sourceList.getSelectionIndex() >= 0) {
          removeButton.setEnabled(sourceList.getItemCount() > 1);
          upButton.setEnabled(sourceList.getSelectionIndex() > 0);
          downButton.setEnabled(sourceList.getSelectionIndex() < sourceList.getItemCount() - 1);
        }
 else {
          removeButton.setEnabled(false);
          upButton.setEnabled(false);
          downButton.setEnabled(false);
        }
      }
    }
);
  }
{
    Group proxyObjects=UIUtils.createControlGroup(composite,CoreMessages.pref_page_ui_general_group_http_proxy,4,GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING,300);
    proxyHostText=UIUtils.createLabelText(proxyObjects,CoreMessages.pref_page_ui_general_label_proxy_host,null);
    proxyPortSpinner=UIUtils.createLabelSpinner(proxyObjects,CoreMessages.pref_page_ui_general_spinner_proxy_port,0,0,65535);
    proxyUserText=UIUtils.createLabelText(proxyObjects,CoreMessages.pref_page_ui_general_label_proxy_user,null);
    proxyPasswordText=UIUtils.createLabelText(proxyObjects,CoreMessages.pref_page_ui_general_label_proxy_password,null,SWT.PASSWORD | SWT.BORDER);
  }
{
    Group drivers=UIUtils.createControlGroup(composite,CoreMessages.pref_page_drivers_group_location,2,GridData.FILL_HORIZONTAL,300);
    customDriversHome=UIUtils.createOutputFolderChooser(drivers,"Local folder",null);
  }
  performDefaults();
  return composite;
}
