{
  DBPPreferenceStore store=DBeaverCore.getGlobalPreferenceStore();
  store.setValue(DBeaverPreferences.UI_PROXY_HOST,proxyHostText.getText());
  store.setValue(DBeaverPreferences.UI_PROXY_PORT,proxyPortSpinner.getSelection());
  store.setValue(DBeaverPreferences.UI_PROXY_USER,proxyUserText.getText());
  String password=proxyPasswordText.getText();
  if (!CommonUtils.isEmpty(password) && encrypter != null) {
    try {
      password=encrypter.encrypt(password);
    }
 catch (    EncryptionException e) {
      log.warn(e);
    }
  }
  store.setValue(DBeaverPreferences.UI_PROXY_PASSWORD,password);
  store.setValue(DBeaverPreferences.UI_DRIVERS_HOME,customDriversHome.getText());
{
    StringBuilder sources=new StringBuilder();
    for (    String item : sourceList.getItems()) {
      if (sources.length() > 0)       sources.append('|');
      sources.append(item);
    }
    store.setValue(DBeaverPreferences.UI_DRIVERS_SOURCES,sources.toString());
  }
{
    StringBuilder mavenRepos=new StringBuilder();
    for (    TableItem item : mavenRepoTable.getItems()) {
      String repoId=item.getText(0);
      String repoURL=item.getText(1);
      MavenRepository repository=MavenRegistry.getInstance().findRepository(repoId);
      if (repository != null && repository.isPredefined()) {
        continue;
      }
      if (mavenRepos.length() > 0)       mavenRepos.append('|');
      mavenRepos.append(repoId).append(':').append(repoURL);
    }
    store.setValue(DBeaverPreferences.UI_MAVEN_REPOSITORIES,mavenRepos.toString());
    MavenRegistry.getInstance().loadCustomRepositories();
  }
  PrefUtils.savePreferenceStore(store);
  return super.performOk();
}
