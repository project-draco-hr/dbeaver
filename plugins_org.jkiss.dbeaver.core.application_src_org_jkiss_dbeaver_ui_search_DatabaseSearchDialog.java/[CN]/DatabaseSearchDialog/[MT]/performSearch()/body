{
  TabItem selectedItem=providersFolder.getItem(providersFolder.getSelectionIndex());
  ObjectSearchProvider provider=(ObjectSearchProvider)selectedItem.getData("provider");
  IObjectSearchPage page=(IObjectSearchPage)selectedItem.getData("page");
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  DatabaseSearchView resultsView;
  try {
    resultsView=(DatabaseSearchView)activePage.showView(DatabaseSearchView.VIEW_ID);
    activePage.bringToTop(resultsView);
  }
 catch (  PartInitException e) {
    UIUtils.showErrorDialog(getShell(),"Search","Can't open search view",e);
    return;
  }
  IObjectSearchQuery query;
  try {
    query=page.createQuery();
  }
 catch (  DBException e) {
    UIUtils.showErrorDialog(getShell(),"Search","Can't create search query",e);
    return;
  }
  IObjectSearchResultPage resultsPage;
  try {
    resultsPage=resultsView.openResultPage(provider,query,false);
  }
 catch (  DBException e) {
    UIUtils.showErrorDialog(getShell(),"Search","Can't open search results page",e);
    return;
  }
  saveState();
  setSearchEnabled(false);
  final ControlEnableState disableState=ControlEnableState.disable(providersFolder);
  DatabaseSearchJob job=new DatabaseSearchJob(query,resultsPage);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      UIUtils.runInUI(getShell(),new Runnable(){
        @Override public void run(){
          if (!providersFolder.isDisposed()) {
            setSearchEnabled(true);
            disableState.restore();
          }
        }
      }
);
    }
  }
);
  job.schedule();
}
