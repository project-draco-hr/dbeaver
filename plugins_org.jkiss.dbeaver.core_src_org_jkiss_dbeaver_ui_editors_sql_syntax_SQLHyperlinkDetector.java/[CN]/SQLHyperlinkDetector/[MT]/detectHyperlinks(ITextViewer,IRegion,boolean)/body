{
  if (region == null || textViewer == null || dataSourceProvider.getDataSource() == null) {
    return null;
  }
  IDocument document=textViewer.getDocument();
  if (document == null) {
    return null;
  }
  SQLIdentifierDetector wordDetector=new SQLIdentifierDetector(syntaxManager.getStructSeparator(),syntaxManager.getQuoteSymbol());
  SQLIdentifierDetector.WordRegion wordRegion=wordDetector.detectIdentifier(document,region);
  if (wordRegion.word.length() == 0) {
    return null;
  }
  String fullName=wordRegion.identifier;
  String tableName=wordRegion.word;
  boolean caseSensitive=false;
  if (wordDetector.isQuoted(tableName)) {
    tableName=DBUtils.getUnQuotedIdentifier(tableName,syntaxManager.getQuoteSymbol());
    caseSensitive=true;
  }
  String containerName=null;
  if (!CommonUtils.equalObjects(fullName,tableName)) {
    int divPos=fullName.indexOf(syntaxManager.getStructSeparator());
    if (divPos != -1) {
      containerName=fullName.substring(0,divPos);
      if (wordDetector.isQuoted(containerName)) {
        containerName=DBUtils.getUnQuotedIdentifier(containerName,syntaxManager.getQuoteSymbol());
      }
    }
  }
  if (syntaxManager.getDialect().getKeywordType(fullName) == DBPKeywordType.KEYWORD) {
    return null;
  }
  DBSStructureAssistant structureAssistant=DBUtils.getAdapter(DBSStructureAssistant.class,dataSourceProvider.getDataSource());
  if (structureAssistant == null) {
    return null;
  }
  ObjectLookupCache tlc=linksCache.get(fullName);
  if (tlc == null) {
    tlc=new ObjectLookupCache();
    linksCache.put(fullName,tlc);
    TablesFinderJob job=new TablesFinderJob(structureAssistant,containerName,tableName,caseSensitive,tlc);
    job.schedule();
  }
  if (tlc.loading) {
    for (int i=0; i < 20; i++) {
      try {
        Thread.sleep(50);
      }
 catch (      InterruptedException e) {
        break;
      }
      if (!tlc.loading) {
        break;
      }
    }
  }
  if (tlc.loading) {
    return null;
  }
 else {
    if (tlc.references.isEmpty()) {
      return null;
    }
    final IRegion hlRegion=new Region(wordRegion.identStart,wordRegion.identEnd - wordRegion.identStart);
    IHyperlink[] links=new IHyperlink[tlc.references.size()];
    for (int i=0, objectsSize=tlc.references.size(); i < objectsSize; i++) {
      links[i]=new EntityHyperlink(tlc.references.get(i),hlRegion);
    }
    return links;
  }
}
