{
  if (region == null || textViewer == null || dataSourceProvider.getDataSource() == null) {
    return null;
  }
  IDocument document=textViewer.getDocument();
  if (document == null) {
    return null;
  }
  SQLIdentifierDetector wordDetector=new SQLIdentifierDetector(syntaxManager.getStructSeparator(),syntaxManager.getQuoteSymbol());
  SQLIdentifierDetector.WordRegion wordRegion=wordDetector.detectIdentifier(document,region);
  if (wordRegion.word.length() == 0) {
    return null;
  }
  if (syntaxManager.getKeywordManager().getKeywordType(wordRegion.identifier) == DBPKeywordType.KEYWORD) {
    return null;
  }
  DBSStructureAssistant structureAssistant=DBUtils.getAdapter(DBSStructureAssistant.class,dataSourceProvider.getDataSource());
  if (structureAssistant == null) {
    return null;
  }
  String tableName=wordRegion.word;
  ObjectLookupCache tlc=linksCache.get(tableName);
  if (tlc == null) {
    tlc=new ObjectLookupCache();
    linksCache.put(tableName,tlc);
    TablesFinderJob job=new TablesFinderJob(structureAssistant,tableName,wordDetector.isQuoted(wordRegion.identifier),tlc);
    job.schedule();
  }
  if (tlc.loading) {
    for (int i=0; i < 5; i++) {
      try {
        Thread.sleep(50);
      }
 catch (      InterruptedException e) {
        break;
      }
      if (!tlc.loading) {
        break;
      }
    }
  }
  if (tlc.loading) {
    return null;
  }
 else {
    if (tlc.references.isEmpty()) {
      return null;
    }
    if (tlc.references.isEmpty()) {
      linksCache.remove(tableName);
      return null;
    }
    final IRegion hlRegion=new Region(wordRegion.wordStart,wordRegion.wordEnd - wordRegion.wordStart);
    IHyperlink[] links=new IHyperlink[tlc.references.size()];
    for (int i=0, objectsSize=tlc.references.size(); i < objectsSize; i++) {
      links[i]=new EntityHyperlink(tlc.references.get(i),hlRegion);
    }
    return links;
  }
}
