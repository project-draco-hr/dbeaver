{
  if (dataSourceContainer instanceof DataSourceDescriptor && !dataSourceContainer.isConnected()) {
    final DataSourceDescriptor dataSourceDescriptor=(DataSourceDescriptor)dataSourceContainer;
    if (!ArrayUtils.isEmpty(Job.getJobManager().find(dataSourceDescriptor))) {
      return;
    }
    final String oldName=dataSourceDescriptor.getConnectionInfo().getUserName();
    final String oldPassword=dataSourceDescriptor.getConnectionInfo().getUserPassword();
    if (!dataSourceDescriptor.isSavePassword()) {
      if (!askForPassword(dataSourceDescriptor,null)) {
        updateDataSourceObject(dataSourceDescriptor);
        return;
      }
    }
    for (    DBWHandlerConfiguration handler : dataSourceDescriptor.getConnectionInfo().getDeclaredHandlers()) {
      if (handler.isEnabled() && handler.isSecured() && !handler.isSavePassword()) {
        if (!askForPassword(dataSourceDescriptor,handler)) {
          updateDataSourceObject(dataSourceDescriptor);
          return;
        }
      }
    }
    final ConnectJob connectJob=new ConnectJob(dataSourceDescriptor);
    final JobChangeAdapter jobChangeAdapter=new JobChangeAdapter(){
      @Override public void done(      IJobChangeEvent event){
        if (event.getResult().isOK()) {
          if (!dataSourceDescriptor.isSavePassword()) {
          }
        }
        if (onFinish != null) {
          onFinish.onProcessFinish(event.getResult());
        }
      }
    }
;
    if (monitor != null) {
      final IStatus result=connectJob.runSync(monitor);
      jobChangeAdapter.done(new IJobChangeEvent(){
        @Override public long getDelay(){
          return 0;
        }
        @Override public Job getJob(){
          return connectJob;
        }
        @Override public IStatus getResult(){
          return result;
        }
      }
);
      if (!result.isOK()) {
        if (onFinish != null) {
          onFinish.onProcessFinish(result);
        }
 else {
          UIUtils.showErrorDialog(null,connectJob.getName(),null,result);
        }
      }
    }
 else {
      connectJob.addJobChangeListener(jobChangeAdapter);
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          connectJob.schedule();
        }
      }
);
    }
  }
}
