{
  if (value == null) {
    statement.setNull(paramIndex,paramType.getTypeID());
  }
 else {
    Number number=(Number)value;
switch (paramType.getTypeID()) {
case java.sql.Types.BIGINT:
      if (number instanceof BigInteger) {
        statement.setBigDecimal(paramIndex,new BigDecimal((BigInteger)number));
      }
 else {
        statement.setLong(paramIndex,number.longValue());
      }
    statement.setLong(paramIndex,number.longValue());
  break;
case java.sql.Types.FLOAT:
statement.setFloat(paramIndex,number.floatValue());
break;
case java.sql.Types.DOUBLE:
case java.sql.Types.REAL:
statement.setDouble(paramIndex,number.doubleValue());
break;
case java.sql.Types.INTEGER:
statement.setInt(paramIndex,number.intValue());
break;
case java.sql.Types.SMALLINT:
statement.setShort(paramIndex,number.shortValue());
break;
case java.sql.Types.TINYINT:
statement.setShort(paramIndex,number.shortValue());
break;
case java.sql.Types.BIT:
statement.setByte(paramIndex,number.byteValue());
break;
case java.sql.Types.NUMERIC:
if (number instanceof Long) {
statement.setLong(paramIndex,number.intValue());
}
 else if (number instanceof Integer) {
statement.setInt(paramIndex,number.intValue());
}
 else if (number instanceof Short) {
statement.setShort(paramIndex,number.shortValue());
}
 else if (number instanceof Byte) {
statement.setByte(paramIndex,number.byteValue());
}
 else if (number instanceof Float) {
statement.setFloat(paramIndex,number.floatValue());
}
 else if (number instanceof BigDecimal) {
statement.setBigDecimal(paramIndex,(BigDecimal)number);
}
 else if (number instanceof BigInteger) {
statement.setBigDecimal(paramIndex,new BigDecimal((BigInteger)number));
}
 else {
statement.setDouble(paramIndex,number.doubleValue());
}
break;
default :
if (paramType.getScale() >= 0) {
statement.setDouble(paramIndex,number.doubleValue());
}
 else {
statement.setLong(paramIndex,number.longValue());
}
break;
}
}
}
