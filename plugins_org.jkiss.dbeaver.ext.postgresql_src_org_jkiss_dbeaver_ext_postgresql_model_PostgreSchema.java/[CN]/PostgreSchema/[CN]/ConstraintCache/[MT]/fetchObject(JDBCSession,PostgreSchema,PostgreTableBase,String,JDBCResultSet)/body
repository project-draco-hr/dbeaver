{
  String name=JDBCUtils.safeGetString(resultSet,"conname");
  String type=JDBCUtils.safeGetString(resultSet,"contype");
  if (type == null) {
    log.warn("Null constraint type");
    return null;
  }
  DBSEntityConstraintType constraintType;
switch (type) {
case "c":
    constraintType=DBSEntityConstraintType.CHECK;
  break;
case "f":
constraintType=DBSEntityConstraintType.FOREIGN_KEY;
break;
case "p":
constraintType=DBSEntityConstraintType.PRIMARY_KEY;
break;
case "u":
constraintType=DBSEntityConstraintType.UNIQUE_KEY;
break;
case "t":
constraintType=PostgreConstants.CONSTRAINT_TRIGGER;
break;
case "x":
constraintType=PostgreConstants.CONSTRAINT_EXCLUSIVE;
break;
default :
log.warn("Unsupported PG constraint type: " + type);
return null;
}
try {
if (constraintType == DBSEntityConstraintType.FOREIGN_KEY) {
return new PostgreTableForeignKey(table,name,resultSet);
}
 else {
return new PostgreTableConstraint(table,name,constraintType,resultSet);
}
}
 catch (DBException e) {
log.error(e);
return null;
}
}
