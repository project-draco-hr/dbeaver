{
  if (queries.isEmpty()) {
    return;
  }
  final DBPDataSourceContainer container=getDataSourceContainer();
  if (checkSession) {
    try {
      DBRProgressListener connectListener=new DBRProgressListener(){
        @Override public void onTaskFinished(        IStatus status){
          if (!status.isOK() || container == null || !container.isConnected()) {
            UIUtils.showErrorDialog(getSite().getShell(),CoreMessages.editors_sql_error_cant_obtain_session,null,status);
            return;
          }
          try {
            Thread.sleep(100);
          }
 catch (          InterruptedException e) {
          }
          UIUtils.runInUI(null,new Runnable(){
            @Override public void run(){
              processQueries(queries,newTab,export,false);
            }
          }
);
        }
      }
;
      if (!checkSession(connectListener)) {
        return;
      }
    }
 catch (    DBException ex) {
      ResultSetViewer viewer=getActiveResultSetViewer();
      if (viewer != null) {
        viewer.setStatus(ex.getMessage(),true);
      }
      UIUtils.showErrorDialog(getSite().getShell(),CoreMessages.editors_sql_error_cant_obtain_session,ex.getMessage());
      return;
    }
  }
  if (sashForm.getMaximizedControl() != null) {
    sashForm.setMaximizedControl(null);
  }
  if (getActivePreferenceStore().getBoolean(SQLPreferenceConstants.AUTO_SAVE_ON_EXECUTE) && isDirty()) {
    doSave(new NullProgressMonitor());
  }
  final boolean isSingleQuery=(queries.size() == 1);
  if (!newTab || !isSingleQuery) {
    closeExtraResultTabs(null);
  }
  if (newTab) {
    for (int i=0; i < queries.size(); i++) {
      SQLQuery query=queries.get(i);
      QueryProcessor queryProcessor=(i == 0 && !isSingleQuery ? curQueryProcessor : createQueryProcessor(queries.size() == 1));
      queryProcessor.processQueries(Collections.singletonList(query),true,export);
    }
  }
 else {
    if (curQueryProcessor.getFirstResults().isPinned()) {
      curQueryProcessor=queryProcessors.get(0);
    }
    closeExtraResultTabs(curQueryProcessor);
    resultTabs.setSelection(curQueryProcessor.getFirstResults().tabItem);
    curQueryProcessor.processQueries(queries,false,export);
  }
}
