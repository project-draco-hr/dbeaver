{
  if (queries.isEmpty()) {
    return;
  }
  if (curJobRunning) {
    UIUtils.showErrorDialog(getSite().getShell(),CoreMessages.editors_sql_error_cant_execute_query_title,CoreMessages.editors_sql_error_cant_execute_query_message);
    return;
  }
  try {
    checkSession();
  }
 catch (  DBException ex) {
    this.setStatus(ex.getMessage(),true);
    UIUtils.showErrorDialog(getSite().getShell(),CoreMessages.editors_sql_error_cant_obtain_session,ex.getMessage());
    return;
  }
{
    final ITextSelection originalSelection=(ITextSelection)getSelectionProvider().getSelection();
    final boolean isSingleQuery=(queries.size() == 1);
    final SQLQueryJob job=new SQLQueryJob(isSingleQuery ? CoreMessages.editors_sql_job_execute_query : CoreMessages.editors_sql_job_execute_script,this,queries,resultsView.getDataReceiver());
    job.addQueryListener(new ISQLQueryListener(){
      private long lastUIUpdateTime=-1l;
      @Override public void onStartJob(){
        curJobRunning=true;
        if (!isSingleQuery) {
          UIUtils.runInUI(null,new Runnable(){
            @Override public void run(){
              sashForm.setMaximizedControl(editorControl);
            }
          }
);
        }
      }
      @Override public void onStartQuery(      final SQLStatementInfo query){
        final long curTime=System.currentTimeMillis();
        if (lastUIUpdateTime <= 0 || (curTime - lastUIUpdateTime >= SCRIPT_UI_UPDATE_PERIOD)) {
          UIUtils.runInUI(null,new Runnable(){
            @Override public void run(){
              selectAndReveal(query.getOffset(),query.getLength());
              setStatus(query.getQuery(),false);
            }
          }
);
          lastUIUpdateTime=System.currentTimeMillis();
        }
      }
      @Override public void onEndQuery(      final SQLQueryResult result){
        if (isDisposed()) {
          return;
        }
        if (isSingleQuery) {
          UIUtils.runInUI(null,new Runnable(){
            @Override public void run(){
              if (result.getError() == null) {
                if (result.getRowCount() != null) {
                }
 else                 if (result.getUpdateCount() != null) {
                  if (result.getUpdateCount() == 0) {
                    setStatus(CoreMessages.editors_sql_status_statement_executed_no_rows_updated,false);
                  }
 else {
                    setStatus(String.valueOf(result.getUpdateCount()) + CoreMessages.editors_sql_status_rows_updated,false);
                  }
                }
 else {
                  setStatus(CoreMessages.editors_sql_status_statement_executed,false);
                }
                resultsView.setExecutionTime(result.getQueryTime());
              }
 else {
                setStatus(result.getError().getMessage(),true);
              }
              if (queries.size() < 2) {
                getSelectionProvider().setSelection(originalSelection);
              }
              DBeaverUI.taskFinished();
            }
          }
);
        }
      }
      @Override public void onEndJob(      final boolean hasErrors){
        curJobRunning=false;
        if (isDisposed()) {
          return;
        }
        UIUtils.runInUI(null,new Runnable(){
          @Override public void run(){
            if (!hasErrors && queries.size() > 1) {
              getSelectionProvider().setSelection(originalSelection);
            }
            if (!isSingleQuery) {
              sashForm.setMaximizedControl(null);
            }
          }
        }
);
      }
    }
);
    closeJob();
    if (isSingleQuery) {
      curJob=job;
      resultsView.refresh();
    }
 else {
      job.schedule();
    }
  }
}
