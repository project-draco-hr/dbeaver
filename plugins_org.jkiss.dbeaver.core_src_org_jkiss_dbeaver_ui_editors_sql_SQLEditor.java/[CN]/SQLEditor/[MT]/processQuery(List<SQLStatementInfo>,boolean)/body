{
  if (queries.isEmpty()) {
    return;
  }
  if (curJobRunning > 0) {
    UIUtils.showErrorDialog(getSite().getShell(),CoreMessages.editors_sql_error_cant_execute_query_title,CoreMessages.editors_sql_error_cant_execute_query_message);
    return;
  }
  try {
    checkSession();
  }
 catch (  DBException ex) {
    this.setStatus(ex.getMessage(),true);
    UIUtils.showErrorDialog(getSite().getShell(),CoreMessages.editors_sql_error_cant_obtain_session,ex.getMessage());
    return;
  }
{
    final ITextSelection originalSelection=(ITextSelection)getSelectionProvider().getSelection();
    final boolean isSingleQuery=(queries.size() == 1);
    final SQLQueryJob job=new SQLQueryJob(isSingleQuery ? CoreMessages.editors_sql_job_execute_query : CoreMessages.editors_sql_job_execute_script,this,queries,resultsView.getDataReceiver());
    job.addQueryListener(new ISQLQueryListener(){
      private long lastUIUpdateTime=-1l;
      @Override public void onStartJob(){
        if (!isSingleQuery) {
          UIUtils.runInUI(null,new Runnable(){
            @Override public void run(){
              sashForm.setMaximizedControl(editorControl);
            }
          }
);
        }
      }
      @Override public void onStartQuery(      final SQLStatementInfo query){
        curJobRunning++;
        final long curTime=System.currentTimeMillis();
        if (lastUIUpdateTime <= 0 || (curTime - lastUIUpdateTime >= SCRIPT_UI_UPDATE_PERIOD)) {
          selectStatementInEditor(query);
          lastUIUpdateTime=System.currentTimeMillis();
        }
      }
      @Override public void onEndQuery(      final SQLQueryResult result){
        curJobRunning--;
        if (isDisposed()) {
          return;
        }
        if (result.hasError()) {
          selectStatementInEditor(result.getStatement());
        }
        if (isSingleQuery) {
          UIUtils.runInUI(null,new Runnable(){
            @Override public void run(){
              processQueryResult(result);
            }
          }
);
        }
      }
      private void selectStatementInEditor(      final SQLStatementInfo query){
        UIUtils.runInUI(null,new Runnable(){
          @Override public void run(){
            selectAndReveal(query.getOffset(),query.getLength());
            setStatus(query.getQuery(),false);
          }
        }
);
      }
      private void processQueryResult(      SQLQueryResult result){
        if (!result.hasError()) {
          if (result.getRowCount() != null) {
          }
 else           if (result.getUpdateCount() != null) {
            if (result.getUpdateCount() == 0) {
              setStatus(CoreMessages.editors_sql_status_statement_executed_no_rows_updated,false);
            }
 else {
              setStatus(String.valueOf(result.getUpdateCount()) + CoreMessages.editors_sql_status_rows_updated,false);
            }
          }
 else {
            setStatus(CoreMessages.editors_sql_status_statement_executed,false);
          }
          resultsView.setExecutionTime(result.getQueryTime());
        }
 else {
          setStatus(result.getError().getMessage(),true);
        }
        if (queries.size() < 2) {
          getSelectionProvider().setSelection(originalSelection);
        }
        if (result.getQueryTime() > DBeaverCore.getGlobalPreferenceStore().getLong(PrefConstants.AGENT_LONG_OPERATION_TIMEOUT) * 1000) {
          DBeaverUI.notifyAgent("Query completed [" + getEditorInput().getPath().lastSegment() + "]"+ ContentUtils.getDefaultLineSeparator()+ CommonUtils.truncateString(result.getStatement().getQuery(),200),!result.hasError() ? IStatus.INFO : IStatus.ERROR);
        }
      }
      @Override public void onEndJob(      final boolean hasErrors){
        if (isDisposed()) {
          return;
        }
        UIUtils.runInUI(null,new Runnable(){
          @Override public void run(){
            if (!hasErrors && queries.size() > 1) {
              getSelectionProvider().setSelection(originalSelection);
            }
            if (!isSingleQuery) {
              sashForm.setMaximizedControl(null);
            }
          }
        }
);
      }
    }
);
    if (isSingleQuery) {
      closeJob();
      curJob=job;
      if (export) {
        ActiveWizardDialog dialog=new ActiveWizardDialog(getSite().getWorkbenchWindow(),new DataTransferWizard(Collections.singletonList(new DatabaseTransferProducer(getDataContainer(),null))),new StructuredSelection(this));
        dialog.open();
      }
 else {
        resultsView.refresh();
      }
    }
 else {
      job.schedule();
    }
  }
}
