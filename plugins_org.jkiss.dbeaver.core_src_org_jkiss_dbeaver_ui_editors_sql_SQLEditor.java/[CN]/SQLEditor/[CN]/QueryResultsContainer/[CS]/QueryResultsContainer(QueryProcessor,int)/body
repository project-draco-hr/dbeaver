{
  this.queryProcessor=queryProcessor;
  this.resultSetNumber=resultSetNumber;
  viewer=new ResultSetViewer(resultTabs,getSite(),this);
  selectionProvider.trackProvider(viewer.getSpreadsheet(),viewer);
  viewer.getSpreadsheet().addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    FocusEvent e){
      IFindReplaceTarget viewerFRT=(IFindReplaceTarget)viewer.getAdapter(IFindReplaceTarget.class);
      if (viewerFRT != null) {
        findReplaceTarget.setTarget(viewerFRT);
      }
    }
  }
);
  int tabIndex=Math.max(resultTabs.getItemCount() - 3,0);
  tabItem=new CTabItem(resultTabs,SWT.NONE,tabIndex);
  int queryIndex=queryProcessors.indexOf(queryProcessor);
  String tabName=getResultsTabName(resultSetNumber,queryIndex,null);
  tabItem.setText(tabName);
  tabItem.setImage(IMG_DATA_GRID);
  tabItem.setData(this);
  if (queryIndex > 0 || resultSetNumber > 0) {
    tabItem.setShowClose(true);
  }
  tabItem.setControl(viewer.getControl());
  tabItem.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      QueryResultsContainer.this.queryProcessor.removeResults(QueryResultsContainer.this);
    }
  }
);
}
