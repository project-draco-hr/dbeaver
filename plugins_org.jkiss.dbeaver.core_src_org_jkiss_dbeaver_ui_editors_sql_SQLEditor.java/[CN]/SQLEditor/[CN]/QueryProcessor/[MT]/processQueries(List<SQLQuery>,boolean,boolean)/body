{
  if (queries.isEmpty()) {
    return;
  }
  if (curJobRunning.get() > 0) {
    UIUtils.showErrorDialog(getSite().getShell(),CoreMessages.editors_sql_error_cant_execute_query_title,CoreMessages.editors_sql_error_cant_execute_query_message);
    return;
  }
  final DBCExecutionContext executionContext=getExecutionContext();
  if (executionContext == null) {
    UIUtils.showErrorDialog(getSite().getShell(),CoreMessages.editors_sql_error_cant_execute_query_title,CoreMessages.editors_sql_status_not_connected_to_database);
    return;
  }
  final boolean isSingleQuery=(queries.size() == 1);
{
    showScriptPositionRuler(true);
    QueryResultsContainer resultsContainer=getFirstResults();
    SQLQueryListener listener=new SQLEditorQueryListener(this);
    final SQLQueryJob job=new SQLQueryJob(getSite(),isSingleQuery ? CoreMessages.editors_sql_job_execute_query : CoreMessages.editors_sql_job_execute_script,executionContext,resultsContainer,queries,this,listener);
    if (export) {
      curJob=job;
      ActiveWizardDialog dialog=new ActiveWizardDialog(getSite().getWorkbenchWindow(),new DataTransferWizard(new IDataTransferProducer[]{new DatabaseTransferProducer(resultsContainer,null)},null),new StructuredSelection(this));
      dialog.open();
    }
 else     if (isSingleQuery) {
      closeJob();
      curJob=job;
      ResultSetViewer rsv=resultsContainer.getResultSetViewer();
      if (rsv != null) {
        rsv.resetDataFilter(false);
        rsv.resetHistory();
        rsv.refresh();
      }
    }
 else {
      if (fetchResults) {
        job.setFetchResultSets(true);
      }
      job.schedule();
    }
  }
}
