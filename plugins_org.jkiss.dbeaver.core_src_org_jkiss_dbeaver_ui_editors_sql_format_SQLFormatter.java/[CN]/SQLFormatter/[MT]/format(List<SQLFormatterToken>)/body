{
  if (argList.isEmpty()) {
    return argList;
  }
  SQLFormatterToken token=argList.get(0);
  if (token.getType() == SQLFormatterConstants.SPACE) {
    argList.remove(0);
    if (argList.isEmpty()) {
      return argList;
    }
  }
  token=argList.get(argList.size() - 1);
  if (token.getType() == SQLFormatterConstants.SPACE) {
    argList.remove(argList.size() - 1);
    if (argList.isEmpty()) {
      return argList;
    }
  }
  for (int index=0; index < argList.size(); index++) {
    token=argList.get(index);
    if (token.getType() == SQLFormatterConstants.KEYWORD) {
switch (formatterCfg.getKeywordCase()) {
case SQLFormatterConfiguration.KEYWORD_NONE:
        break;
case SQLFormatterConfiguration.KEYWORD_UPPER_CASE:
      token.setString(token.getString().toUpperCase());
    break;
case SQLFormatterConfiguration.KEYWORD_LOWER_CASE:
  token.setString(token.getString().toLowerCase());
break;
}
}
}
for (int index=argList.size() - 1; index >= 1; index--) {
token=argList.get(index);
SQLFormatterToken prevToken=argList.get(index - 1);
if (token.getType() == SQLFormatterConstants.SPACE && (prevToken.getType() == SQLFormatterConstants.SYMBOL || prevToken.getType() == SQLFormatterConstants.COMMENT)) {
argList.remove(index);
}
 else if ((token.getType() == SQLFormatterConstants.SYMBOL || token.getType() == SQLFormatterConstants.COMMENT) && prevToken.getType() == SQLFormatterConstants.SPACE) {
argList.remove(index - 1);
}
 else if (token.getType() == SQLFormatterConstants.SPACE) {
token.setString(" ");
}
}
for (int index=0; index < argList.size() - 2; index++) {
SQLFormatterToken t0=argList.get(index);
SQLFormatterToken t1=argList.get(index + 1);
SQLFormatterToken t2=argList.get(index + 2);
if (t0.getType() == SQLFormatterConstants.KEYWORD && t1.getType() == SQLFormatterConstants.SPACE && t2.getType() == SQLFormatterConstants.KEYWORD) {
if (((t0.getString().equalsIgnoreCase("ORDER") || t0.getString().equalsIgnoreCase("GROUP")) && t2.getString().equalsIgnoreCase("BY"))) {
t0.setString(t0.getString() + " " + t2.getString());
argList.remove(index + 1);
argList.remove(index + 1);
}
}
if (t0.getString().equals("(") && t1.getString().equals("+") && t2.getString().equals(")")) {
t0.setString("(+)");
argList.remove(index + 1);
argList.remove(index + 1);
}
}
int indent=0;
final List<Integer> bracketIndent=new ArrayList<Integer>();
SQLFormatterToken prev=new SQLFormatterToken(SQLFormatterConstants.SPACE," ");
boolean encounterBetween=false;
for (int index=0; index < argList.size(); index++) {
token=argList.get(index);
String tokenString=token.getString().toUpperCase();
if (token.getType() == SQLFormatterConstants.SYMBOL) {
if (tokenString.equals("(")) {
functionBracket.add(formatterCfg.isFunction(prev.getString()) ? Boolean.TRUE : Boolean.FALSE);
bracketIndent.add(indent);
indent++;
index+=insertReturnAndIndent(argList,index + 1,indent);
}
 else if (tokenString.equals(")")) {
indent=bracketIndent.remove(bracketIndent.size() - 1);
index+=insertReturnAndIndent(argList,index,indent);
functionBracket.remove(functionBracket.size() - 1);
}
 else if (tokenString.equals(",")) {
index+=insertReturnAndIndent(argList,index + 1,indent);
}
 else if (tokenString.equals(";")) {
indent=0;
index+=insertReturnAndIndent(argList,index,indent);
}
}
 else if (token.getType() == SQLFormatterConstants.KEYWORD) {
if (tokenString.equals("DELETE") || tokenString.equals("SELECT") || tokenString.equals("UPDATE")) {
indent++;
index+=insertReturnAndIndent(argList,index + 1,indent);
}
if (tokenString.equals("INSERT") || tokenString.equals("INTO") || tokenString.equals("CREATE")|| tokenString.equals("DROP")|| tokenString.equals("TRUNCATE")|| tokenString.equals("TABLE")|| tokenString.equals("CASE")) {
indent++;
index+=insertReturnAndIndent(argList,index + 1,indent);
}
if (tokenString.equals("FROM") || tokenString.equals("WHERE") || tokenString.equals("SET")|| tokenString.equals("ORDER BY")|| tokenString.equals("GROUP BY")|| tokenString.equals("HAVING")) {
index+=insertReturnAndIndent(argList,index,indent - 1);
index+=insertReturnAndIndent(argList,index + 1,indent);
}
if (tokenString.equals("VALUES")) {
indent--;
index+=insertReturnAndIndent(argList,index,indent);
}
if (tokenString.equals("END")) {
indent--;
index+=insertReturnAndIndent(argList,index,indent);
}
if (tokenString.equals("OR") || tokenString.equals("THEN") || tokenString.equals("ELSE")) {
index+=insertReturnAndIndent(argList,index,indent);
}
if (tokenString.equals("ON") || tokenString.equals("USING")) {
index+=insertReturnAndIndent(argList,index,indent + 1);
}
if (tokenString.equals("UNION") || tokenString.equals("INTERSECT") || tokenString.equals("EXCEPT")) {
indent-=2;
index+=insertReturnAndIndent(argList,index,indent);
indent++;
}
if (tokenString.equals("BETWEEN")) {
encounterBetween=true;
}
if (tokenString.equals("AND")) {
if (!encounterBetween) {
index+=insertReturnAndIndent(argList,index,indent);
}
encounterBetween=false;
}
}
 else if (token.getType() == SQLFormatterConstants.COMMENT) {
Pair<String,String> mlComments=formatterCfg.getSyntaxManager().getKeywordManager().getMultiLineComments();
if (mlComments != null) {
if (token.getString().startsWith(mlComments.getFirst())) {
index+=insertReturnAndIndent(argList,index + 1,indent);
}
}
}
prev=token;
}
for (int index=argList.size() - 1; index >= 4; index--) {
if (index >= argList.size()) {
continue;
}
SQLFormatterToken t0=argList.get(index);
SQLFormatterToken t1=argList.get(index - 1);
SQLFormatterToken t2=argList.get(index - 2);
SQLFormatterToken t3=argList.get(index - 3);
SQLFormatterToken t4=argList.get(index - 4);
if (t4.getString().equalsIgnoreCase("(") && t3.getString().trim().isEmpty() && t1.getString().trim().isEmpty()&& t0.getString().equalsIgnoreCase(")")) {
t4.setString(t4.getString() + t2.getString() + t0.getString());
argList.remove(index);
argList.remove(index - 1);
argList.remove(index - 2);
argList.remove(index - 3);
}
}
for (int index=1; index < argList.size(); index++) {
prev=argList.get(index - 1);
token=argList.get(index);
if (prev.getType() != SQLFormatterConstants.SPACE && token.getType() != SQLFormatterConstants.SPACE && !token.getString().startsWith("(")) {
if (prev.getString().equals(",")) {
continue;
}
if (formatterCfg.isFunction(prev.getString()) && token.getString().equals("(")) {
continue;
}
if (token.getType() == SQLFormatterConstants.VALUE && prev.getType() == SQLFormatterConstants.NAME) {
continue;
}
argList.add(index,new SQLFormatterToken(SQLFormatterConstants.SPACE," "));
}
}
return argList;
}
