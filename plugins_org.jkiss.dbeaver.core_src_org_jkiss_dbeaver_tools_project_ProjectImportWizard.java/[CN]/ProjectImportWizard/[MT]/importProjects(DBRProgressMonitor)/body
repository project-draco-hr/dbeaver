{
  try (ZipFile zipFile=new ZipFile(data.getImportFile(),ZipFile.OPEN_READ)){
    ZipEntry metaEntry=zipFile.getEntry(ExportConstants.META_FILENAME);
    if (metaEntry == null) {
      throw new DBException("Cannot find meta file");
    }
    final Map<String,String> libMap=new HashMap<>();
    final Map<String,String> driverMap=new HashMap<>();
    InputStream metaStream=zipFile.getInputStream(metaEntry);
    if (metaStream == null) {
      throw new DBException("Cannot open meta file '" + metaEntry.getName() + "'");
    }
    try {
      final Document metaDocument=XMLUtils.parseDocument(metaStream);
{
        final Element libsElement=XMLUtils.getChildElement(metaDocument.getDocumentElement(),ExportConstants.TAG_LIBRARIES);
        if (libsElement != null) {
          final Collection<Element> libList=XMLUtils.getChildElementList(libsElement,RegistryConstants.TAG_FILE);
          monitor.beginTask(CoreMessages.dialog_project_import_wizard_monitor_load_libraries,libList.size());
          for (          Element libElement : libList) {
            libMap.put(libElement.getAttribute(ExportConstants.ATTR_PATH),libElement.getAttribute(ExportConstants.ATTR_FILE));
            monitor.worked(1);
          }
          monitor.done();
        }
      }
{
        final Element driversElement=XMLUtils.getChildElement(metaDocument.getDocumentElement(),RegistryConstants.TAG_DRIVERS);
        if (driversElement != null) {
          final Collection<Element> driverList=XMLUtils.getChildElementList(driversElement,RegistryConstants.TAG_DRIVER);
          monitor.beginTask(CoreMessages.dialog_project_import_wizard_monitor_import_drivers,driverList.size());
          for (          Element driverElement : driverList) {
            if (monitor.isCanceled()) {
              break;
            }
            importDriver(monitor,driverElement,zipFile,libMap,driverMap);
            monitor.worked(1);
          }
          DataSourceProviderRegistry.getInstance().saveDrivers();
          monitor.done();
        }
      }
{
        final Element projectsElement=XMLUtils.getChildElement(metaDocument.getDocumentElement(),ExportConstants.TAG_PROJECTS);
        if (projectsElement != null) {
          final Collection<Element> projectList=XMLUtils.getChildElementList(projectsElement,ExportConstants.TAG_PROJECT);
          monitor.beginTask(CoreMessages.dialog_project_import_wizard_monitor_import_projects,projectList.size());
          for (          Element projectElement : projectList) {
            if (monitor.isCanceled()) {
              break;
            }
            importProject(monitor,projectElement,zipFile,driverMap);
            monitor.worked(1);
          }
          monitor.done();
        }
      }
    }
 catch (    XMLException e) {
      throw new DBException("Cannot parse meta file",e);
    }
catch (    CoreException e) {
      throw new DBException("Cannot persist project",e);
    }
 finally {
      metaStream.close();
    }
  }
 }
