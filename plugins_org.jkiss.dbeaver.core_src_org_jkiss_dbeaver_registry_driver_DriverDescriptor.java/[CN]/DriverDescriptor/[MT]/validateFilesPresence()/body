{
  boolean localLibsExists=false;
  final List<DBPDriverLibrary> downloadCandidates=new ArrayList<>();
  for (  DBPDriverLibrary library : libraries) {
    if (library.isDisabled()) {
      continue;
    }
    if (!library.matchesCurrentPlatform()) {
      continue;
    }
    if (library.isDownloadable()) {
      boolean allExists=true;
      List<DriverFileInfo> files=resolvedFiles.get(library);
      if (files == null) {
        allExists=false;
      }
 else {
        for (        DriverFileInfo file : files) {
          if (!file.file.exists()) {
            allExists=false;
            break;
          }
        }
      }
      if (!allExists) {
        downloadCandidates.add(library);
      }
    }
 else {
      localLibsExists=true;
    }
  }
  boolean downloaded=false;
  if (!downloadCandidates.isEmpty() || (!localLibsExists && !fileSources.isEmpty())) {
    final DriverDependencies dependencies=new DriverDependencies(downloadCandidates);
    UIUtils.runInUI(null,new Runnable(){
      @Override public void run(){
        DriverDownloadDialog.downloadDriverFiles(null,DriverDescriptor.this,dependencies);
      }
    }
);
    downloaded=true;
    for (    DBPDriverDependencies.DependencyNode node : dependencies.getLibraryMap()) {
      List<DriverFileInfo> info=new ArrayList<>();
      resolvedFiles.put(node.library,info);
      collectLibraryFiles(node,info);
    }
    providerDescriptor.getRegistry().saveDrivers();
  }
  List<File> result=new ArrayList<>();
  for (  DBPDriverLibrary library : libraries) {
    if (library.isDisabled() || !library.matchesCurrentPlatform()) {
      continue;
    }
    if (library.isDownloadable()) {
      List<DriverFileInfo> files=resolvedFiles.get(library);
      if (files != null) {
        for (        DriverFileInfo file : files) {
          result.add(file.file);
        }
      }
    }
 else {
      result.add(library.getLocalFile());
    }
  }
  if (DBeaverCore.getGlobalPreferenceStore().getBoolean(DBeaverPreferences.UI_DRIVERS_VERSION_UPDATE) && !downloaded) {
    try {
      DBeaverUI.runInProgressService(new DBRRunnableWithProgress(){
        @Override public void run(        DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          try {
            checkDriverVersion(monitor);
          }
 catch (          IOException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
);
    }
 catch (    InvocationTargetException e) {
      log.error(e.getTargetException());
    }
catch (    InterruptedException e) {
    }
  }
  return result;
}
