{
switch (localName) {
case RegistryConstants.TAG_PROVIDER:
{
      curProvider=null;
      curDriver=null;
      String idAttr=atts.getValue(RegistryConstants.ATTR_ID);
      if (CommonUtils.isEmpty(idAttr)) {
        log.warn("No id for driver provider");
        return;
      }
      curProvider=DataSourceProviderRegistry.getInstance().getDataSourceProvider(idAttr);
      if (curProvider == null) {
        log.warn("Datasource provider '" + idAttr + "' not found. Bad provider description.");
      }
      break;
    }
case RegistryConstants.TAG_DRIVER:
{
    curDriver=null;
    if (curProvider == null) {
      String providerId=atts.getValue(RegistryConstants.ATTR_PROVIDER);
      if (!CommonUtils.isEmpty(providerId)) {
        curProvider=DataSourceProviderRegistry.getInstance().getDataSourceProvider(providerId);
        if (curProvider == null) {
          log.warn("Datasource provider '" + providerId + "' not found. Bad driver description.");
        }
      }
      if (curProvider == null) {
        log.warn("Driver outside of datasource provider");
        return;
      }
    }
    String idAttr=atts.getValue(RegistryConstants.ATTR_ID);
    curDriver=curProvider.getDriver(idAttr);
    if (curDriver == null) {
      curDriver=new DriverDescriptor(curProvider,idAttr);
      curProvider.addDriver(curDriver);
    }
    if (curProvider.isDriversManagable()) {
      curDriver.setCategory(atts.getValue(RegistryConstants.ATTR_CATEGORY));
      curDriver.setName(atts.getValue(RegistryConstants.ATTR_NAME));
      curDriver.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));
      curDriver.setDriverClassName(atts.getValue(RegistryConstants.ATTR_CLASS));
      curDriver.setSampleURL(atts.getValue(RegistryConstants.ATTR_URL));
      curDriver.setDriverDefaultPort(atts.getValue(RegistryConstants.ATTR_PORT));
      curDriver.setEmbedded(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_EMBEDDED),false));
    }
    curDriver.setCustomDriverLoader(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_CUSTOM_DRIVER_LOADER),false));
    curDriver.setModified(true);
    String disabledAttr=atts.getValue(RegistryConstants.ATTR_DISABLED);
    if (CommonUtils.getBoolean(disabledAttr)) {
      curDriver.setDisabled(true);
    }
    break;
  }
case RegistryConstants.TAG_LIBRARY:
{
  if (curDriver == null) {
    log.warn("File outside of driver");
    return;
  }
  DBPDriverLibrary.FileType type;
  String typeStr=atts.getValue(RegistryConstants.ATTR_TYPE);
  if (CommonUtils.isEmpty(typeStr)) {
    type=DBPDriverLibrary.FileType.jar;
  }
 else {
    try {
      type=DBPDriverLibrary.FileType.valueOf(typeStr);
    }
 catch (    IllegalArgumentException e) {
      log.warn(e);
      type=DBPDriverLibrary.FileType.jar;
    }
  }
  String path=normalizeLibraryPath(atts.getValue(RegistryConstants.ATTR_PATH));
  DBPDriverLibrary lib=curDriver.getDriverLibrary(path);
  String disabledAttr=atts.getValue(RegistryConstants.ATTR_DISABLED);
  if (lib != null && CommonUtils.getBoolean(disabledAttr)) {
    lib.setDisabled(true);
  }
 else   if (lib == null) {
    lib=DriverLibraryAbstract.createFromPath(curDriver,type,path);
    curDriver.libraries.add(lib);
  }
  curLibrary=lib;
  break;
}
case RegistryConstants.TAG_FILE:
{
String path=atts.getValue(RegistryConstants.ATTR_PATH);
if (CommonUtils.isEmpty(path)) {
  log.warn("Empty path for library file");
}
 else {
  DriverFileInfo info=new DriverFileInfo(atts.getValue(CommonUtils.notEmpty(RegistryConstants.ATTR_ID)),atts.getValue(CommonUtils.notEmpty(RegistryConstants.ATTR_VERSION)),new File(path));
  curDriver.addLibraryFile(curLibrary,info);
}
break;
}
case RegistryConstants.TAG_CLIENT_HOME:
curDriver.addClientHomeId(atts.getValue(RegistryConstants.ATTR_ID));
break;
case RegistryConstants.TAG_PARAMETER:
{
if (curDriver == null) {
log.warn("Parameter outside of driver");
return;
}
final String paramName=atts.getValue(RegistryConstants.ATTR_NAME);
final String paramValue=atts.getValue(RegistryConstants.ATTR_VALUE);
if (!CommonUtils.isEmpty(paramName) && !CommonUtils.isEmpty(paramValue)) {
curDriver.setDriverParameter(paramName,paramValue,false);
}
break;
}
case RegistryConstants.TAG_PROPERTY:
{
if (curDriver == null) {
log.warn("Property outside of driver");
return;
}
final String paramName=atts.getValue(RegistryConstants.ATTR_NAME);
final String paramValue=atts.getValue(RegistryConstants.ATTR_VALUE);
if (!CommonUtils.isEmpty(paramName) && !CommonUtils.isEmpty(paramValue)) {
curDriver.setConnectionProperty(paramName,paramValue);
}
break;
}
}
}
