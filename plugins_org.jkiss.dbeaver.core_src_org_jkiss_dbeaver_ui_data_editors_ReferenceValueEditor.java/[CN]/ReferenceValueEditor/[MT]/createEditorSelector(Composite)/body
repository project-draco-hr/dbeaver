{
  if (!(valueController instanceof IAttributeController) || valueController.isReadOnly()) {
    return false;
  }
  refConstraint=getEnumerableConstraint();
  if (refConstraint == null) {
    return false;
  }
  if (refConstraint instanceof DBSEntityAssociation) {
    final DBSEntityAssociation association=(DBSEntityAssociation)refConstraint;
    if (association.getReferencedConstraint() != null) {
      final DBSEntity refTable=association.getReferencedConstraint().getParentObject();
      Composite labelGroup=UIUtils.createPlaceholder(parent,2);
      labelGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      Link dictLabel=UIUtils.createLink(labelGroup,NLS.bind(CoreMessages.dialog_value_view_label_dictionary,refTable.getName()),new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          final IWorkbenchWindow window=valueController.getValueSite().getWorkbenchWindow();
          DBeaverUI.runInUI(window,new DBRRunnableWithProgress(){
            @Override public void run(            DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              DBNDatabaseNode tableNode=DBeaverCore.getInstance().getNavigatorModel().getNodeByObject(monitor,refTable,true);
              if (tableNode != null) {
                NavigatorHandlerObjectOpen.openEntityEditor(tableNode,DatabaseDataEditor.class.getName(),window);
              }
            }
          }
);
        }
      }
);
      dictLabel.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
      Link hintLabel=UIUtils.createLink(labelGroup,"(<a>Define Description</a>)",new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          EditDictionaryDialog dialog=new EditDictionaryDialog(parent.getShell(),"Dictionary structure",refTable);
          if (dialog.open() == IDialogConstants.OK_ID) {
            loaderJob.schedule();
          }
        }
      }
);
      hintLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.HORIZONTAL_ALIGN_END));
    }
  }
  editorSelector=new Table(parent,SWT.BORDER | SWT.SINGLE | SWT.FULL_SELECTION| SWT.H_SCROLL| SWT.V_SCROLL);
  editorSelector.setLinesVisible(true);
  editorSelector.setHeaderVisible(true);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=150;
  editorSelector.setLayoutData(gd);
  UIUtils.createTableColumn(editorSelector,SWT.LEFT,CoreMessages.dialog_value_view_column_value);
  UIUtils.createTableColumn(editorSelector,SWT.LEFT,CoreMessages.dialog_value_view_column_description);
  UIUtils.packColumns(editorSelector);
  editorSelector.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TableItem[] selection=editorSelector.getSelection();
      if (selection != null && selection.length > 0) {
        Object value=selection[0].getData();
        try {
          valueEditor.primeEditorValue(value);
        }
 catch (        DBException e1) {
          log.error(e1);
        }
      }
    }
  }
);
  Control control=valueEditor.getControl();
  ModifyListener modifyListener=new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      Object curEditorValue;
      try {
        curEditorValue=valueEditor.extractEditorValue();
      }
 catch (      DBException e1) {
        log.error(e1);
        return;
      }
      final String curTextValue=valueController.getValueHandler().getValueDisplayString(((IAttributeController)valueController).getBinding(),curEditorValue,DBDDisplayFormat.UI);
      boolean valueFound=false;
      for (      TableItem item : editorSelector.getItems()) {
        if (item.getText(0).equals(curTextValue)) {
          editorSelector.select(editorSelector.indexOf(item));
          editorSelector.showItem(item);
          valueFound=true;
          break;
        }
      }
      if (!valueFound) {
        if (loaderJob.getState() == Job.RUNNING) {
          loaderJob.cancel();
          loaderJob=new SelectorLoaderJob();
        }
        loaderJob.setPattern(curEditorValue);
        if (loaderJob.getState() != Job.WAITING) {
          loaderJob.schedule(100);
        }
      }
    }
  }
;
  if (control instanceof Text) {
    ((Text)control).addModifyListener(modifyListener);
  }
 else   if (control instanceof StyledText) {
    ((StyledText)control).addModifyListener(modifyListener);
  }
  loaderJob=new SelectorLoaderJob();
  final Object curValue=valueController.getValue();
  if (curValue instanceof Number) {
    loaderJob.setPattern(curValue);
  }
  loaderJob.schedule(500);
  return true;
}
