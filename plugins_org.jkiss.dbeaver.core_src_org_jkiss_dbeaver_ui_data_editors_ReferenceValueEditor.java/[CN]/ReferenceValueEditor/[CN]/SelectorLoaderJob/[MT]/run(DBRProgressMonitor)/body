{
  if (editorSelector.isDisposed()) {
    return Status.OK_STATUS;
  }
  final Map<Object,String> keyValues=new TreeMap<>();
  try {
    IAttributeController attributeController=(IAttributeController)valueController;
    final DBSEntityAttribute tableColumn=attributeController.getBinding().getEntityAttribute();
    if (tableColumn == null) {
      return Status.OK_STATUS;
    }
    final DBSEntityAttributeRef fkColumn=DBUtils.getConstraintAttribute(monitor,refConstraint,tableColumn);
    if (fkColumn == null) {
      return Status.OK_STATUS;
    }
    DBSEntityAssociation association;
    if (refConstraint instanceof DBSEntityAssociation) {
      association=(DBSEntityAssociation)refConstraint;
    }
 else {
      return Status.OK_STATUS;
    }
    final DBSEntityAttribute refColumn=DBUtils.getReferenceAttribute(monitor,association,tableColumn);
    if (refColumn == null) {
      return Status.OK_STATUS;
    }
    List<DBDAttributeValue> precedingKeys=null;
    List<? extends DBSEntityAttributeRef> allColumns=CommonUtils.safeList(refConstraint.getAttributeReferences(monitor));
    if (allColumns.size() > 1 && allColumns.get(0) != fkColumn) {
      List<DBDAttributeBinding> rowAttributes=attributeController.getRowController().getRowAttributes();
      precedingKeys=new ArrayList<>();
      for (      DBSEntityAttributeRef precColumn : allColumns) {
        if (precColumn == fkColumn) {
          break;
        }
        DBSEntityAttribute precAttribute=precColumn.getAttribute();
        if (precAttribute != null) {
          DBDAttributeBinding rowAttr=DBUtils.findBinding(rowAttributes,precAttribute);
          if (rowAttr != null) {
            Object precValue=attributeController.getRowController().getAttributeValue(rowAttr);
            precedingKeys.add(new DBDAttributeValue(precAttribute,precValue));
          }
        }
      }
    }
    final DBSEntityAttribute fkAttribute=fkColumn.getAttribute();
    if (fkAttribute != null) {
      try (DBCSession session=getExecutionContext().openSession(monitor,DBCExecutionPurpose.UTIL,NLS.bind(CoreMessages.dialog_value_view_context_name,fkAttribute.getName()))){
        final DBSEntityConstraint refConstraint=association.getReferencedConstraint();
        DBSConstraintEnumerable enumConstraint=(DBSConstraintEnumerable)refConstraint;
        Collection<DBDLabelValuePair> enumValues=enumConstraint.getKeyEnumeration(session,refColumn,pattern,precedingKeys,100);
        for (        DBDLabelValuePair pair : enumValues) {
          keyValues.put(pair.getValue(),pair.getLabel());
        }
        if (monitor.isCanceled()) {
          return Status.CANCEL_STATUS;
        }
        final DBDValueHandler colHandler=DBUtils.findValueHandler(session,fkAttribute);
        UIUtils.runInUI(null,new Runnable(){
          @Override public void run(){
            updateDictionarySelector(keyValues,fkColumn,colHandler);
          }
        }
);
      }
     }
  }
 catch (  DBException e) {
    log.warn(e);
  }
  return Status.OK_STATUS;
}
