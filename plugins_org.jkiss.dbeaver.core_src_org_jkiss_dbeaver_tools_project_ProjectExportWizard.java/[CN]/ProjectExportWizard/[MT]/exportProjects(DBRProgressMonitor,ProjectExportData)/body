{
  if (!exportData.getOutputFolder().exists()) {
    if (!exportData.getOutputFolder().mkdirs()) {
      throw new IOException("Cannot create directory '" + exportData.getOutputFolder().getAbsolutePath() + "'");
    }
  }
  String archiveName=exportData.getArchiveFileName() + ExportConstants.ARCHIVE_FILE_EXT;
  File archiveFile=new File(exportData.getOutputFolder(),archiveName);
  FileOutputStream exportStream=new FileOutputStream(archiveFile);
  try {
    ByteArrayOutputStream metaBuffer=new ByteArrayOutputStream(10000);
    ZipOutputStream archiveStream=new ZipOutputStream(exportStream);
    XMLBuilder meta=new XMLBuilder(metaBuffer,ContentUtils.DEFAULT_FILE_CHARSET_NAME);
    meta.startElement(ExportConstants.TAG_ARCHIVE);
    meta.addAttribute(ExportConstants.ATTR_VERSION,ExportConstants.ARCHIVE_VERSION_CURRENT);
    exportData.initExport(DBeaverCore.getInstance().getProjectRegistry(),meta,archiveStream);
{
      meta.startElement(ExportConstants.TAG_SOURCE);
      meta.addAttribute(ExportConstants.ATTR_TIME,Long.valueOf(System.currentTimeMillis()));
      meta.addAttribute(ExportConstants.ATTR_ADDRESS,InetAddress.getLocalHost().getHostAddress());
      meta.addAttribute(ExportConstants.ATTR_HOST,InetAddress.getLocalHost().getHostName());
      meta.endElement();
    }
    Map<IProject,Integer> resCountMap=new HashMap<IProject,Integer>();
    monitor.beginTask(CoreMessages.dialog_project_export_wizard_monitor_collect_info,exportData.getProjectsToExport().size());
    for (    IProject project : exportData.getProjectsToExport()) {
      final DataSourceRegistry dataSourceRegistry=exportData.projectRegistry.getDataSourceRegistry(project);
      if (dataSourceRegistry != null) {
        for (        DataSourceDescriptor dataSourceDescriptor : dataSourceRegistry.getDataSources()) {
          exportData.usedDrivers.add(dataSourceDescriptor.getDriver());
        }
      }
      resCountMap.put(project,getChildCount(exportData,project));
      monitor.worked(1);
    }
    monitor.done();
{
      monitor.beginTask(CoreMessages.dialog_project_export_wizard_monitor_export_driver_info,1);
      exportData.meta.startElement(RegistryConstants.TAG_DRIVERS);
      for (      DriverDescriptor driver : exportData.usedDrivers) {
        driver.serialize(exportData.meta,true);
      }
      exportData.meta.endElement();
      monitor.done();
    }
{
      exportData.meta.startElement(ExportConstants.TAG_PROJECTS);
      for (      IProject project : exportData.getProjectsToExport()) {
        monitor.beginTask(NLS.bind(CoreMessages.dialog_project_export_wizard_monitor_export_project,project.getName()),resCountMap.get(project));
        try {
          exportProject(monitor,exportData,project);
        }
  finally {
          monitor.done();
        }
      }
      exportData.meta.endElement();
    }
    if (exportData.isExportDrivers()) {
      Set<File> libFiles=new HashSet<File>();
      Map<String,File> libPathMap=new HashMap<String,File>();
      for (      DriverDescriptor driver : exportData.usedDrivers) {
        for (        DriverFileDescriptor fileDescriptor : driver.getFiles()) {
          final File libraryFile=fileDescriptor.getFile();
          if (!fileDescriptor.isDisabled() && libraryFile.exists()) {
            libFiles.add(libraryFile);
            libPathMap.put(fileDescriptor.getPath(),libraryFile);
          }
        }
      }
      if (!libFiles.isEmpty()) {
        monitor.beginTask(CoreMessages.dialog_project_export_wizard_monitor_export_libraries,libFiles.size());
        final ZipEntry driversFolder=new ZipEntry(ExportConstants.DIR_DRIVERS + "/");
        driversFolder.setComment("Database driver libraries");
        exportData.archiveStream.putNextEntry(driversFolder);
        exportData.archiveStream.closeEntry();
        exportData.meta.startElement(ExportConstants.TAG_LIBRARIES);
        Set<String> libFileNames=new HashSet<String>();
        for (        String libPath : libPathMap.keySet()) {
          final File libFile=libPathMap.get(libPath);
          final String libFileName=libFile.getName();
          if (libFileNames.contains(libFileName)) {
            log.warn("Duplicate driver library file name: " + libFileName);
            continue;
          }
          libFileNames.add(libFileName);
          monitor.subTask(libFileName);
          exportData.meta.startElement(RegistryConstants.TAG_FILE);
          exportData.meta.addAttribute(ExportConstants.ATTR_PATH,libPath);
          exportData.meta.addAttribute(ExportConstants.ATTR_FILE,"drivers/" + libFileName);
          exportData.meta.endElement();
          final ZipEntry driverFile=new ZipEntry(ExportConstants.DIR_DRIVERS + "/" + libFileName);
          driverFile.setComment("Driver library");
          exportData.archiveStream.putNextEntry(driverFile);
          InputStream is=new FileInputStream(libFile);
          try {
            IOUtils.copyStream(is,exportData.archiveStream,COPY_BUFFER_SIZE);
          }
  finally {
            ContentUtils.close(is);
          }
          exportData.archiveStream.closeEntry();
          monitor.worked(1);
        }
        exportData.meta.endElement();
        monitor.done();
      }
    }
{
      exportData.meta.endElement();
      exportData.meta.flush();
      archiveStream.putNextEntry(new ZipEntry(ExportConstants.META_FILENAME));
      archiveStream.write(metaBuffer.toByteArray());
      archiveStream.closeEntry();
    }
    archiveStream.finish();
  }
  finally {
    ContentUtils.close(exportStream);
  }
}
