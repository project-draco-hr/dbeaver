{
  super.initialize(monitor);
  Object omitCatalog=getContainer().getDriver().getDriverParameter(GenericConstants.PARAM_OMIT_CATALOG);
  Object omitTypeCache=getContainer().getDriver().getDriverParameter(GenericConstants.PARAM_OMIT_TYPE_CACHE);
  if (omitTypeCache == null || !CommonUtils.toBoolean(omitTypeCache)) {
    try {
      dataTypeCache.getObjects(monitor,this);
    }
 catch (    DBException e) {
      log.warn("Can't fetch database data types",e);
    }
  }
 else {
    dataTypeCache.fillStandardTypes(this);
  }
  JDBCSession session=openSession(monitor,DBCExecutionPurpose.META,"Read generic metadata");
  try {
    JDBCDatabaseMetaData metaData=session.getMetaData();
    boolean catalogsFiltered=false;
    if (omitCatalog == null || !CommonUtils.toBoolean(omitCatalog)) {
      monitor.subTask("Extract catalogs");
      monitor.worked(1);
      final GenericMetaObject catalogObject=getMetaObject(GenericConstants.OBJECT_CATALOG);
      final DBSObjectFilter catalogFilters=getContainer().getObjectFilter(GenericCatalog.class,null);
      final List<String> catalogNames=new ArrayList<String>();
      try {
        JDBCResultSet dbResult=metaData.getCatalogs();
        try {
          while (dbResult.next()) {
            String catalogName=GenericUtils.safeGetString(catalogObject,dbResult,JDBCConstants.TABLE_CAT);
            if (CommonUtils.isEmpty(catalogName)) {
              catalogName=GenericUtils.safeGetStringTrimmed(catalogObject,dbResult,JDBCConstants.TABLE_QUALIFIER);
              if (CommonUtils.isEmpty(catalogName)) {
                continue;
              }
            }
            if (catalogFilters == null || catalogFilters.matches(catalogName)) {
              catalogNames.add(catalogName);
              monitor.subTask("Extract catalogs - " + catalogName);
            }
 else {
              catalogsFiltered=true;
            }
            if (monitor.isCanceled()) {
              break;
            }
          }
        }
  finally {
          dbResult.close();
        }
      }
 catch (      UnsupportedOperationException e) {
      }
catch (      SQLFeatureNotSupportedException e) {
      }
catch (      SQLException e) {
        log.warn(e);
      }
      if (!catalogNames.isEmpty() || catalogsFiltered) {
        this.catalogs=new ArrayList<GenericCatalog>();
        for (        String catalogName : catalogNames) {
          GenericCatalog catalog=new GenericCatalog(this,catalogName);
          this.catalogs.add(catalog);
        }
      }
    }
    if (CommonUtils.isEmpty(catalogs) && !catalogsFiltered) {
      monitor.subTask("Extract schemas");
      monitor.worked(1);
      List<GenericSchema> tmpSchemas=loadSchemas(session,null);
      if (tmpSchemas != null) {
        this.schemas=tmpSchemas;
      }
      if (CommonUtils.isEmpty(schemas)) {
        this.structureContainer=new DataSourceObjectContainer();
      }
    }
    determineSelectedEntity(session);
  }
 catch (  SQLException ex) {
    throw new DBException("Error reading metadata",ex,this);
  }
 finally {
    session.close();
  }
}
