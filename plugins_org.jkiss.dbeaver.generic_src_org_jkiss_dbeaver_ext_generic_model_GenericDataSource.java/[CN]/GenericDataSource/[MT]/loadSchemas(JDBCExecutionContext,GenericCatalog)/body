{
  try {
    DBSObjectFilter schemaFilters=getContainer().getObjectFilter(GenericSchema.class,null);
    List<GenericSchema> tmpSchemas=new ArrayList<GenericSchema>();
    JDBCResultSet dbResult;
    boolean catalogSchemas;
    try {
      dbResult=context.getMetaData().getSchemas(catalog == null ? null : catalog.getName(),schemaFilters != null && schemaFilters.hasSingleMask() ? schemaFilters.getSingleMask() : null);
      catalogSchemas=true;
    }
 catch (    Throwable e) {
      dbResult=context.getMetaData().getSchemas();
      catalogSchemas=false;
    }
    try {
      while (dbResult.next()) {
        if (context.getProgressMonitor().isCanceled()) {
          break;
        }
        String schemaName=getMetadataReader().fetchSchemaName(dbResult,catalog == null ? null : catalog.getName());
        if (CommonUtils.isEmpty(schemaName)) {
          log.debug("Schema name is empty");
          continue;
        }
        if (schemaFilters != null && !schemaFilters.matches(schemaName)) {
          continue;
        }
        context.getProgressMonitor().subTask("Schema " + schemaName);
        GenericSchema schema;
        if (catalog == null) {
          schema=new GenericSchema(this,schemaName);
        }
 else {
          schema=new GenericSchema(catalog,schemaName);
        }
        tmpSchemas.add(schema);
      }
    }
  finally {
      dbResult.close();
    }
    return tmpSchemas;
  }
 catch (  UnsupportedOperationException e) {
    log.debug(e);
    return null;
  }
catch (  SQLFeatureNotSupportedException e) {
    log.debug(e);
    return null;
  }
catch (  Exception ex) {
    log.warn("Could not read schema list",ex);
    return null;
  }
}
