{
  Composite composite=new Composite(parent,2);
  composite.setLayout(new GridLayout(2,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  dlgInplace=UIUtils.createCheckbox(composite,DB2Messages.dialog_table_tools_reorg_inplace,false);
  dlgInplace.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (dlgInplace.getSelection()) {
        dlgTruncate.setEnabled(true);
        dlgTruncate.setSelection(true);
        dlgUseTempTS.setEnabled(false);
        dlgIndexScan.setEnabled(false);
        dlgReorgLobsTS.setEnabled(false);
        dlgUseLobsTemp.setEnabled(false);
        dlgResetDictionary.setEnabled(false);
        dlgAccesReadWrite.setEnabled(true);
        dlgAccesNo.setEnabled(false);
        dlgAccesNo.setSelection(false);
        dlgAccesReadWrite.setSelection(false);
        dlgAccesReadOnly.setSelection(true);
      }
 else {
        dlgTruncate.setEnabled(false);
        dlgTruncate.setSelection(false);
        dlgUseTempTS.setEnabled(true);
        dlgIndexScan.setEnabled(true);
        dlgReorgLobsTS.setEnabled(true);
        dlgUseLobsTemp.setEnabled(true);
        dlgResetDictionary.setEnabled(true);
        dlgAccesNo.setEnabled(true);
        dlgAccesReadWrite.setEnabled(false);
        dlgAccesReadWrite.setSelection(false);
        dlgAccesReadOnly.setSelection(false);
        dlgAccesNo.setSelection(true);
      }
      updateSQL();
    }
  }
);
  UIUtils.createPlaceholder(composite,1);
  dlgUseIndex=UIUtils.createCheckbox(composite,DB2Messages.dialog_table_tools_reorg_useindex,false);
  dlgUseIndex.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (dlgUseIndex.getSelection()) {
        indexesCombo.setEnabled(true);
        dlgIndexScan.setEnabled(true);
      }
 else {
        indexesCombo.setEnabled(false);
        dlgIndexScan.setEnabled(false);
      }
      updateSQL();
    }
  }
);
  indexesCombo=createIndexesCombo(composite);
  dlgIndexScan=UIUtils.createCheckbox(composite,DB2Messages.dialog_table_tools_reorg_useindexscan,false);
  dlgIndexScan.addSelectionListener(SQL_CHANGE_LISTENER);
  UIUtils.createPlaceholder(composite,1);
  dlgTruncate=UIUtils.createCheckbox(composite,DB2Messages.dialog_table_tools_reorg_truncate,false);
  dlgTruncate.addSelectionListener(SQL_CHANGE_LISTENER);
  UIUtils.createPlaceholder(composite,1);
  dlgUseTempTS=UIUtils.createCheckbox(composite,DB2Messages.dialog_table_tools_reorg_usetempts,false);
  dlgUseTempTS.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (dlgUseTempTS.getSelection()) {
        tempTSCombo.setEnabled(true);
      }
 else {
        tempTSCombo.setEnabled(false);
      }
      updateSQL();
    }
  }
);
  tempTSCombo=createTempTablespaceCombo(composite);
  dlgReorgLobsTS=UIUtils.createCheckbox(composite,DB2Messages.dialog_table_tools_reorg_reorglobs,false);
  dlgReorgLobsTS.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (dlgReorgLobsTS.getSelection()) {
        dlgUseLobsTemp.setEnabled(true);
        tempLobsTSCombo.setEnabled(false);
      }
 else {
        dlgUseLobsTemp.setEnabled(false);
        tempLobsTSCombo.setEnabled(false);
      }
      updateSQL();
    }
  }
);
  UIUtils.createPlaceholder(composite,1);
  dlgUseLobsTemp=UIUtils.createCheckbox(composite,DB2Messages.dialog_table_tools_reorg_reorglobsts,false);
  dlgUseLobsTemp.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (dlgUseLobsTemp.getSelection()) {
        tempLobsTSCombo.setEnabled(true);
      }
 else {
        tempLobsTSCombo.setEnabled(false);
      }
      updateSQL();
    }
  }
);
  tempLobsTSCombo=createLobsTempTablespaceCombo(composite);
  dlgResetDictionary=UIUtils.createCheckbox(composite,DB2Messages.dialog_table_tools_reorg_resetdict,false);
  dlgResetDictionary.addSelectionListener(SQL_CHANGE_LISTENER);
  UIUtils.createPlaceholder(composite,1);
  UIUtils.createTextLabel(composite,DB2Messages.dialog_table_tools_reorg_access_title);
  Composite groupRB=new Composite(composite,SWT.NULL);
  groupRB.setLayout(new RowLayout());
  dlgAccesNo=new Button(groupRB,SWT.RADIO);
  dlgAccesNo.setText(DB2Messages.dialog_table_tools_reorg_access_no);
  dlgAccesNo.addSelectionListener(SQL_CHANGE_LISTENER);
  dlgAccesReadOnly=new Button(groupRB,SWT.RADIO);
  dlgAccesReadOnly.setText(DB2Messages.dialog_table_tools_reorg_access_read);
  dlgAccesReadOnly.addSelectionListener(SQL_CHANGE_LISTENER);
  dlgAccesReadWrite=new Button(groupRB,SWT.RADIO);
  dlgAccesReadWrite.setText(DB2Messages.dialog_table_tools_reorg_access_readwrite);
  dlgAccesReadWrite.addSelectionListener(SQL_CHANGE_LISTENER);
  dlgTruncate.setEnabled(false);
  dlgIndexScan.setEnabled(false);
  dlgUseLobsTemp.setEnabled(false);
  tempLobsTSCombo.setEnabled(false);
  dlgAccesReadWrite.setEnabled(false);
  dlgAccesReadOnly.setSelection(true);
  indexName=listIndexNames.isEmpty() ? null : listIndexNames.get(0);
  tempTablespace=listTempTsNames.isEmpty() ? null : listTempTsNames.get(0);
  lobsTablespace=listTempTsNames.isEmpty() ? null : listTempTsNames.get(0);
}
