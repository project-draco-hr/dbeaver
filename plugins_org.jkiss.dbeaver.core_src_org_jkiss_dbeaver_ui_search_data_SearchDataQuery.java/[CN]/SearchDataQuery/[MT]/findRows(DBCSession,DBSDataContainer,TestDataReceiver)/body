{
  DBSEntity entity;
  if (dataContainer instanceof DBSEntity) {
    entity=(DBSEntity)dataContainer;
  }
 else {
    log.warn("Data container " + dataContainer + " isn't entity");
    return null;
  }
  try {
    List<DBDAttributeConstraint> constraints=new ArrayList<>();
    for (    DBSEntityAttribute attribute : entity.getAttributes(session.getProgressMonitor())) {
      if (params.fastSearch) {
        if (!DBUtils.isIndexedAttribute(session.getProgressMonitor(),attribute)) {
          continue;
        }
      }
      DBCLogicalOperator operator;
      Object value;
switch (attribute.getDataKind()) {
case NUMERIC:
        if (!params.searchNumbers) {
          continue;
        }
      operator=DBCLogicalOperator.EQUALS;
    try {
      value=new Integer(params.searchString);
    }
 catch (    NumberFormatException e) {
      try {
        value=new Long(params.searchString);
      }
 catch (      NumberFormatException e1) {
        try {
          value=new Double(params.searchString);
        }
 catch (        NumberFormatException e2) {
          try {
            value=new BigDecimal(params.searchString);
          }
 catch (          Exception e3) {
            value=params.searchString;
          }
        }
      }
    }
  break;
case CONTENT:
if (!params.searchLOBs) {
  continue;
}
case STRING:
operator=DBCLogicalOperator.LIKE;
value="%" + params.searchString + "%";
break;
default :
continue;
}
DBDAttributeConstraint constraint=new DBDAttributeConstraint(attribute,constraints.size());
constraint.setOperator(operator);
constraint.setValue(value);
constraints.add(constraint);
}
if (constraints.isEmpty()) {
return null;
}
dataReceiver.filter=new DBDDataFilter(constraints);
dataReceiver.filter.setAnyConstraint(true);
return dataContainer.readData(session,dataReceiver,dataReceiver.filter,-1,-1,0,dataContainer);
}
 catch (DBException e) {
throw new DBCException("Error finding rows",e);
}
}
