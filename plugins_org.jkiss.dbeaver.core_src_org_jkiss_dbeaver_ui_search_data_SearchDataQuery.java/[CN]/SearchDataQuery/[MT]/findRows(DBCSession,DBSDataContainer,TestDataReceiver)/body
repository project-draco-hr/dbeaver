{
  DBSEntity entity;
  if (dataContainer instanceof DBSEntity) {
    entity=(DBSEntity)dataContainer;
  }
 else {
    log.warn("Data container " + dataContainer + " isn't entity");
    return null;
  }
  try {
    List<DBDAttributeConstraint> constraints=new ArrayList<>();
    for (    DBSEntityAttribute attribute : entity.getAttributes(session.getProgressMonitor())) {
      if (params.fastSearch) {
        if (!DBUtils.isIndexedAttribute(session.getProgressMonitor(),attribute)) {
          continue;
        }
      }
      DBCLogicalOperator[] supportedOperators=DBUtils.getAttributeOperators(attribute);
      DBCLogicalOperator operator;
      Object value;
switch (attribute.getDataKind()) {
case NUMERIC:
        if (!params.searchNumbers) {
          continue;
        }
      if (!ArrayUtils.contains(supportedOperators,DBCLogicalOperator.EQUALS)) {
        continue;
      }
    operator=DBCLogicalOperator.EQUALS;
  try {
    value=new Integer(params.searchString);
  }
 catch (  NumberFormatException e) {
    try {
      value=new Long(params.searchString);
    }
 catch (    NumberFormatException e1) {
      try {
        value=new Double(params.searchString);
      }
 catch (      NumberFormatException e2) {
        try {
          value=new BigDecimal(params.searchString);
        }
 catch (        Exception e3) {
          continue;
        }
      }
    }
  }
break;
case CONTENT:
if (!params.searchLOBs) {
continue;
}
case STRING:
if (attribute.getMaxLength() > 0 && attribute.getMaxLength() < params.searchString.length()) {
continue;
}
if (ArrayUtils.contains(supportedOperators,DBCLogicalOperator.LIKE)) {
operator=DBCLogicalOperator.LIKE;
value="%" + params.searchString + "%";
}
 else if (ArrayUtils.contains(supportedOperators,DBCLogicalOperator.EQUALS)) {
operator=DBCLogicalOperator.EQUALS;
value=params.searchString;
}
 else {
continue;
}
break;
default :
continue;
}
DBDAttributeConstraint constraint=new DBDAttributeConstraint(attribute,constraints.size());
constraint.setOperator(operator);
constraint.setValue(value);
constraint.setVisible(true);
constraints.add(constraint);
}
if (constraints.isEmpty()) {
return null;
}
dataReceiver.filter=new DBDDataFilter(constraints);
dataReceiver.filter.setAnyConstraint(true);
DBCExecutionSource searchSource=new AbstractExecutionSource(dataContainer,session.getExecutionContext(),this);
return dataContainer.readData(searchSource,session,dataReceiver,dataReceiver.filter,-1,-1,0);
}
 catch (DBException e) {
throw new DBCException("Error finding rows",e);
}
}
