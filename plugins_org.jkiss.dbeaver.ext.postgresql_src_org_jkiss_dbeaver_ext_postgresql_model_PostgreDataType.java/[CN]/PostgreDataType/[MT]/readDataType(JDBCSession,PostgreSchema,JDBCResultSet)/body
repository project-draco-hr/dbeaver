{
  long typeId=JDBCUtils.safeGetLong(dbResult,"oid");
  String name=JDBCUtils.safeGetString(dbResult,"typname");
  if (CommonUtils.isEmpty(name)) {
    return null;
  }
  int typeLength=JDBCUtils.safeGetInt(dbResult,"typlen");
  PostgreTypeCategory typeCategory;
  final String catString=JDBCUtils.safeGetString(dbResult,"typcategory");
  if (catString == null) {
    typeCategory=null;
  }
 else {
    try {
      typeCategory=PostgreTypeCategory.valueOf(catString.toUpperCase());
    }
 catch (    IllegalArgumentException e) {
      log.debug(e);
      typeCategory=null;
    }
  }
  int valueType;
  if (ArrayUtils.contains(OID_TYPES,name) || name.equals("hstore")) {
    valueType=Types.VARCHAR;
  }
 else {
    if (typeCategory == null) {
      final long typElem=JDBCUtils.safeGetLong(dbResult,"typelem");
switch ((int)typeId) {
case PostgreOid.BIT:
        valueType=Types.BIT;
      break;
case PostgreOid.BOOL:
    valueType=Types.BOOLEAN;
  break;
case PostgreOid.INT2:
valueType=Types.SMALLINT;
break;
case PostgreOid.INT4:
valueType=Types.INTEGER;
break;
case PostgreOid.INT8:
valueType=Types.BIGINT;
break;
case PostgreOid.FLOAT4:
valueType=Types.FLOAT;
break;
case PostgreOid.FLOAT8:
valueType=Types.DOUBLE;
break;
case PostgreOid.NUMERIC:
valueType=Types.NUMERIC;
break;
case PostgreOid.CHAR:
valueType=Types.CHAR;
break;
case PostgreOid.VARCHAR:
valueType=Types.VARCHAR;
break;
case PostgreOid.DATE:
valueType=Types.DATE;
break;
case PostgreOid.TIME:
case PostgreOid.TIMETZ:
valueType=Types.TIME;
break;
case PostgreOid.TIMESTAMP:
case PostgreOid.TIMESTAMPTZ:
valueType=Types.TIMESTAMP;
break;
case PostgreOid.BYTEA:
valueType=Types.BINARY;
break;
case PostgreOid.CHAR_ARRAY:
valueType=Types.CHAR;
break;
case PostgreOid.BPCHAR:
valueType=Types.CHAR;
break;
case PostgreOid.XML:
valueType=Types.SQLXML;
break;
default :
if (typElem > 0) {
valueType=Types.ARRAY;
}
 else {
valueType=Types.OTHER;
}
break;
}
}
 else {
switch (typeCategory) {
case A:
valueType=Types.ARRAY;
break;
case P:
valueType=Types.OTHER;
break;
case B:
valueType=Types.BOOLEAN;
break;
case C:
valueType=Types.STRUCT;
break;
case D:
if (name.startsWith("timestamp")) {
valueType=Types.TIMESTAMP;
}
 else if (name.startsWith("date")) {
valueType=Types.DATE;
}
 else {
valueType=Types.TIME;
}
break;
case N:
valueType=Types.NUMERIC;
if (name.equals("numeric")) {
valueType=Types.NUMERIC;
}
 else if (name.startsWith("float")) {
switch (typeLength) {
case 4:
valueType=Types.FLOAT;
break;
case 8:
valueType=Types.DOUBLE;
break;
}
}
 else {
switch (typeLength) {
case 2:
valueType=Types.SMALLINT;
break;
case 4:
valueType=Types.INTEGER;
break;
case 8:
valueType=Types.BIGINT;
break;
}
}
break;
case S:
valueType=Types.VARCHAR;
break;
case U:
switch (name) {
case "bytea":
valueType=Types.BINARY;
break;
case "xml":
valueType=Types.SQLXML;
break;
default :
valueType=Types.OTHER;
break;
}
break;
default :
valueType=Types.OTHER;
break;
}
}
}
return new PostgreDataType(session,schema,typeId,valueType,name,typeLength,dbResult);
}
