{
  int typeId=JDBCUtils.safeGetInt(dbResult,"oid");
  String name=JDBCUtils.safeGetString(dbResult,"typname");
  if (CommonUtils.isEmpty(name)) {
    return null;
  }
  int typeLength=JDBCUtils.safeGetInt(dbResult,"typlen");
  PostgreTypeType typeType=PostgreTypeType.b;
  try {
    typeType=PostgreTypeType.valueOf(JDBCUtils.safeGetString(dbResult,"typtype"));
  }
 catch (  IllegalArgumentException e) {
    log.debug(e);
  }
  PostgreTypeCategory typeCategory=PostgreTypeCategory.X;
  try {
    typeCategory=PostgreTypeCategory.valueOf(JDBCUtils.safeGetString(dbResult,"typcategory"));
  }
 catch (  IllegalArgumentException e) {
    log.debug(e);
  }
  int valueType;
  if (ArrayUtils.contains(OID_TYPES,name) || name.equals("hstore")) {
    valueType=Types.VARCHAR;
  }
 else {
switch (typeCategory) {
case A:
case P:
      return null;
case B:
    valueType=Types.BOOLEAN;
  break;
case C:
valueType=Types.STRUCT;
break;
case D:
if (name.startsWith("timestamp")) {
valueType=Types.TIMESTAMP;
}
 else if (name.startsWith("date")) {
valueType=Types.DATE;
}
 else {
valueType=Types.TIME;
}
break;
case N:
valueType=Types.NUMERIC;
if (name.startsWith("float")) {
switch (typeLength) {
case 4:
valueType=Types.FLOAT;
break;
case 8:
valueType=Types.DOUBLE;
break;
}
}
 else {
switch (typeLength) {
case 2:
valueType=Types.SMALLINT;
break;
case 4:
valueType=Types.INTEGER;
break;
case 8:
valueType=Types.BIGINT;
break;
}
}
break;
case S:
valueType=Types.VARCHAR;
break;
case U:
switch (name) {
case "bytea":
valueType=Types.BINARY;
break;
case "xml":
valueType=Types.SQLXML;
break;
default :
valueType=Types.OTHER;
break;
}
break;
default :
valueType=Types.OTHER;
break;
}
}
return new PostgreDataType(owner,valueType,name,typeLength,typeId,typeType,typeCategory);
}
