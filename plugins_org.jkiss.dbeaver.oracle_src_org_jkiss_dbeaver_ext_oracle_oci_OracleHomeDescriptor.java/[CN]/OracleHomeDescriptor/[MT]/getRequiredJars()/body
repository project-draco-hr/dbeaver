{
  List<File> list=new ArrayList<File>();
  FileFilter jarFilter=new FileFilter(){
    @Override public boolean accept(    File pathname){
      final String name=pathname.getName();
      return name.endsWith(".jar") || name.endsWith(".zip");
    }
  }
;
  File oraHome=getHomePath();
  list.addAll(CommonUtils.safeArray(oraHome.listFiles(jarFilter)));
  File jdbcPath=new File(oraHome,"jdbc/lib");
  if (jdbcPath.exists()) {
    list.addAll(CommonUtils.safeArray(jdbcPath.listFiles(jarFilter)));
  }
  File libPath=new File(oraHome,"lib");
  if (libPath.exists()) {
    list.addAll(CommonUtils.safeArray(libPath.listFiles(jarFilter)));
  }
  Map<String,File> libMap=new TreeMap<String,File>();
  for (  File lib : list) {
    libMap.put(lib.getName(),lib);
  }
  removeExtraLibraies(libMap,"_g");
  removeExtraLibraies(libMap,"dms");
  if (libMap.containsKey(JAR_OJDBC2)) {
    libMap.remove(JAR_OJDBC2_ZIP);
  }
  if (libMap.containsKey(JAR_OJDBC4)) {
    libMap.remove(JAR_OJDBC2);
    libMap.remove(JAR_OJDBC2_ZIP);
  }
  if (libMap.containsKey(JAR_OJDBC5)) {
    libMap.remove(JAR_OJDBC4);
    libMap.remove(JAR_OJDBC2);
    libMap.remove(JAR_OJDBC2_ZIP);
  }
  if (libMap.containsKey(JAR_OJDBC6)) {
    libMap.remove(JAR_OJDBC5);
    libMap.remove(JAR_OJDBC4);
    libMap.remove(JAR_OJDBC2);
    libMap.remove(JAR_OJDBC2_ZIP);
  }
  return libMap.values();
}
