{
  if (dataPumpJob != null) {
    UIUtils.showMessageBox(viewerPanel.getShell(),"Data read","Data read is in progress - can't run another",SWT.ICON_WARNING);
    return false;
  }
  final DBDDataFilter useDataFilter=dataFilter != null ? dataFilter : (dataContainer == getDataContainer() ? model.getDataFilter() : null);
  Composite progressControl=viewerPanel;
  if (activePresentation.getControl() instanceof Composite) {
    progressControl=(Composite)activePresentation.getControl();
  }
  final Object presentationState=savePresentationState();
  dataPumpJob=new ResultSetDataPumpJob(dataContainer,useDataFilter,this,getExecutionContext(),progressControl);
  dataPumpJob.addJobChangeListener(new JobChangeAdapter(){
    @Override public void aboutToRun(    IJobChangeEvent event){
      model.setUpdateInProgress(true);
      DBeaverUI.asyncExec(new Runnable(){
        @Override public void run(){
          filtersPanel.enableFilters(false);
        }
      }
);
    }
    @Override public void done(    IJobChangeEvent event){
      ResultSetDataPumpJob job=(ResultSetDataPumpJob)event.getJob();
      final Throwable error=job.getError();
      if (job.getStatistics() != null) {
        model.setStatistics(job.getStatistics());
      }
      final Control control=getControl();
      if (control.isDisposed()) {
        return;
      }
      DBeaverUI.asyncExec(new Runnable(){
        @Override public void run(){
          try {
            if (control.isDisposed()) {
              return;
            }
            final Shell shell=control.getShell();
            if (error != null) {
              UIUtils.showErrorDialog(shell,"Error executing query","Query execution failed",error);
            }
 else             if (focusRow >= 0 && focusRow < model.getRowCount() && model.getVisibleAttributeCount() > 0) {
              curRow=model.getRow(focusRow);
              if (recordMode) {
                updateRecordMode();
              }
 else {
                updateStatusMessage();
              }
              restorePresentationState(presentationState);
            }
            activePresentation.updateValueView();
            updatePanelsContent(false);
            if (error == null) {
              setNewState(dataContainer,dataFilter != null ? dataFilter : (dataContainer == getDataContainer() ? model.getDataFilter() : null));
            }
            model.setUpdateInProgress(false);
            if (error == null && dataFilter != null) {
              model.updateDataFilter(dataFilter);
            }
            updateFiltersText(error == null);
            updateToolbar();
            fireResultSetLoad();
          }
  finally {
            if (finalizer != null) {
              try {
                finalizer.run();
              }
 catch (              Throwable e) {
                log.error(e);
              }
            }
            dataPumpJob=null;
          }
        }
      }
);
    }
  }
);
  dataPumpJob.setOffset(offset);
  dataPumpJob.setMaxRows(maxRows);
  dataPumpJob.schedule();
  return true;
}
