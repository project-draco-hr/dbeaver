{
  if (dataPumpJob == null) {
    dataPumpJob=new ResultSetDataPumpJob(this);
    dataPumpJob.addJobChangeListener(new JobChangeAdapter(){
      @Override public void done(      IJobChangeEvent event){
        ResultSetDataPumpJob job=(ResultSetDataPumpJob)event.getJob();
        final Throwable error=job.getError();
        if (job.getStatistics() != null) {
          model.setStatistics(job.getStatistics());
        }
        Display.getDefault().asyncExec(new Runnable(){
          @Override public void run(){
            Control control=getControl();
            if (control == null || control.isDisposed()) {
              return;
            }
            final Shell shell=control.getShell();
            if (error != null) {
              setStatus(error.getMessage(),true);
              UIUtils.showErrorDialog(shell,"Error executing query","Query execution failed",error);
            }
 else             if (selectAttribute != null && selectRow != null) {
              ResultSetViewer.this.curRow=selectRow;
              ResultSetViewer.this.curAttribute=selectAttribute;
              GridCell newPos;
              if (gridMode == GridMode.GRID) {
                newPos=new GridCell(curAttribute,curRow);
              }
 else {
                newPos=new GridCell(curRow,curAttribute);
              }
              spreadsheet.setCursor(newPos,false);
              updateStatusMessage();
              previewValue();
            }
 else {
              spreadsheet.redraw();
            }
            updateFiltersText();
            if (finalizer != null) {
              finalizer.run();
            }
            dataPumpJob=null;
          }
        }
);
      }
    }
);
    dataPumpJob.setOffset(offset);
    dataPumpJob.setMaxRows(maxRows);
    dataPumpJob.schedule();
  }
}
