{
  DBDDataFilter dataFilter=model.getDataFilter();
  boolean ctrlPressed=(state & SWT.CTRL) == SWT.CTRL;
  boolean altPressed=(state & SWT.ALT) == SWT.ALT;
  if (ctrlPressed) {
    dataFilter.resetOrderBy();
  }
  DBDAttributeBinding metaColumn=(DBDAttributeBinding)columnElement;
  DBDAttributeConstraint constraint=dataFilter.getConstraint(metaColumn);
  if (constraint.getOrderPosition() == 0) {
    if (isServerSideFiltering() && supportsDataFilter()) {
      if (!ConfirmationDialog.confirmActionWithParams(spreadsheet.getShell(),DBeaverPreferences.CONFIRM_ORDER_RESULTSET,metaColumn.getAttributeName())) {
        return;
      }
    }
    constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);
    constraint.setOrderDescending(altPressed);
  }
 else   if (!constraint.isOrderDescending()) {
    constraint.setOrderDescending(true);
  }
 else {
    for (    DBDAttributeConstraint con2 : dataFilter.getConstraints()) {
      if (con2.getOrderPosition() > constraint.getOrderPosition()) {
        con2.setOrderPosition(con2.getOrderPosition() - 1);
      }
    }
    constraint.setOrderPosition(0);
    constraint.setOrderDescending(false);
  }
  reorderResultSet(false,new Runnable(){
    @Override public void run(){
      if (!recordMode) {
        spreadsheet.refreshData(false);
      }
    }
  }
);
}
