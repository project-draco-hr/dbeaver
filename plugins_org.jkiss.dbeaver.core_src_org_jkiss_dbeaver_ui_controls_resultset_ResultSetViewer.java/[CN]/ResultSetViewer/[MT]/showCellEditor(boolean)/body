{
  final GridPos focusCell=spreadsheet.getFocusCell();
  if (focusCell == null || focusCell.row < 0 || focusCell.col < 0) {
    return false;
  }
  if (!isValidCell(focusCell)) {
    log.debug("Editor position is out of bounds (" + focusCell.col + ":"+ focusCell.row+ ")");
    return false;
  }
  GridPos cell=translateVisualPos(focusCell);
  if (!inline) {
    for (    ResultSetValueController valueController : openEditors.keySet()) {
      GridPos cellPos=valueController.getCellPos();
      if (cellPos != null && cellPos.equalsTo(cell)) {
        openEditors.get(valueController).showValueEditor();
        return true;
      }
    }
  }
  DBDAttributeBinding metaColumn=model.getColumn(cell.col);
  final int handlerFeatures=metaColumn.getValueHandler().getFeatures();
  if (handlerFeatures == DBDValueHandler.FEATURE_NONE) {
    return false;
  }
  if (inline && (handlerFeatures & DBDValueHandler.FEATURE_INLINE_EDITOR) == 0 && (handlerFeatures & DBDValueHandler.FEATURE_VIEWER) != 0) {
    if (!isPreviewVisible()) {
      togglePreview();
    }
    return true;
  }
  if (isColumnReadOnly(metaColumn) && inline) {
    return false;
  }
  Composite placeholder=null;
  if (inline) {
    if (isReadOnly()) {
      return false;
    }
    spreadsheet.cancelInlineEditor();
    placeholder=new Composite(spreadsheet,SWT.NONE);
    placeholder.setFont(spreadsheet.getFont());
    placeholder.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalIndent=0;
    gd.verticalIndent=0;
    gd.grabExcessHorizontalSpace=true;
    gd.grabExcessVerticalSpace=true;
    placeholder.setLayoutData(gd);
  }
  ResultSetValueController valueController=new ResultSetValueController(cell,inline ? DBDValueController.EditType.INLINE : DBDValueController.EditType.EDITOR,inline ? placeholder : null);
  final DBDValueEditor editor;
  try {
    editor=metaColumn.getValueHandler().createEditor(valueController);
  }
 catch (  Exception e) {
    UIUtils.showErrorDialog(site.getShell(),"Cannot edit value",null,e);
    return false;
  }
  if (editor instanceof DBDValueEditorStandalone) {
    valueController.registerEditor((DBDValueEditorStandalone)editor);
    new UIJob("Open separate editor"){
      @Override public IStatus runInUIThread(      IProgressMonitor monitor){
        ((DBDValueEditorStandalone)editor).showValueEditor();
        return Status.OK_STATUS;
      }
    }
.schedule();
  }
 else {
    if (editor != null) {
      try {
        editor.primeEditorValue(valueController.getValue());
      }
 catch (      DBException e) {
        log.error(e);
      }
    }
  }
  if (inline) {
    if (editor != null) {
      spreadsheet.showCellEditor(focusCell,placeholder);
    }
 else {
      placeholder.dispose();
      if ((handlerFeatures & DBDValueHandler.FEATURE_VIEWER) != 0) {
        if (!isPreviewVisible()) {
          togglePreview();
        }
        return true;
      }
    }
  }
  return editor != null;
}
