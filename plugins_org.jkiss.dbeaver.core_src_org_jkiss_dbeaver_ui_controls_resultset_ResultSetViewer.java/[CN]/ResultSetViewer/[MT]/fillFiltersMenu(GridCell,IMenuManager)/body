{
  DBDAttributeBinding column=(DBDAttributeBinding)(currentPosition.col instanceof DBDAttributeBinding ? currentPosition.col : currentPosition.row);
  if (supportsDataFilter()) {
    DBPDataKind dataKind=column.getMetaAttribute().getDataKind();
    if (!column.getMetaAttribute().isRequired()) {
      filtersMenu.add(new FilterByColumnAction(DBCLogicalOperator.IS_NULL,FilterByColumnType.NONE,column));
      filtersMenu.add(new FilterByColumnAction(DBCLogicalOperator.IS_NOT_NULL,FilterByColumnType.NONE,column));
    }
    for (    FilterByColumnType type : FilterByColumnType.values()) {
      if (type == FilterByColumnType.NONE) {
        continue;
      }
      filtersMenu.add(new Separator());
      if (type.getValue(this,column,DBCLogicalOperator.EQUALS,true) == null) {
        continue;
      }
      if (dataKind == DBPDataKind.BOOLEAN) {
        filtersMenu.add(new FilterByColumnAction(DBCLogicalOperator.EQUALS,type,column));
        filtersMenu.add(new FilterByColumnAction(DBCLogicalOperator.NOT_EQUALS,type,column));
      }
 else       if (dataKind == DBPDataKind.NUMERIC || dataKind == DBPDataKind.DATETIME) {
        filtersMenu.add(new FilterByColumnAction(DBCLogicalOperator.EQUALS,type,column));
        filtersMenu.add(new FilterByColumnAction(DBCLogicalOperator.NOT_EQUALS,type,column));
        filtersMenu.add(new FilterByColumnAction(DBCLogicalOperator.GREATER,type,column));
        filtersMenu.add(new FilterByColumnAction(DBCLogicalOperator.LESS,type,column));
      }
 else       if (dataKind == DBPDataKind.STRING) {
        filtersMenu.add(new FilterByColumnAction(DBCLogicalOperator.EQUALS,type,column));
        filtersMenu.add(new FilterByColumnAction(DBCLogicalOperator.NOT_EQUALS,type,column));
        filtersMenu.add(new FilterByColumnAction(DBCLogicalOperator.GREATER,type,column));
        filtersMenu.add(new FilterByColumnAction(DBCLogicalOperator.LESS,type,column));
        filtersMenu.add(new FilterByColumnAction(DBCLogicalOperator.LIKE,type,column));
      }
    }
    filtersMenu.add(new Separator());
    DBDAttributeConstraint constraint=model.getDataFilter().getConstraint(column);
    if (constraint != null && constraint.hasCondition()) {
      filtersMenu.add(new FilterResetColumnAction(column));
    }
  }
{
    final List<Object> selectedColumns=getSpreadsheet().getColumnSelection();
    if (!recordMode && !selectedColumns.isEmpty()) {
      String hideTitle;
      if (selectedColumns.size() == 1) {
        DBDAttributeBinding columnToHide=(DBDAttributeBinding)selectedColumns.get(0);
        hideTitle="Hide column '" + columnToHide.getName() + "'";
      }
 else {
        hideTitle="Hide selected columns (" + selectedColumns.size() + ")";
      }
      filtersMenu.add(new Action(hideTitle){
        @Override public void run(){
          if (selectedColumns.size() >= getModel().getVisibleColumnCount()) {
            UIUtils.showMessageBox(getControl().getShell(),"Hide columns","Can't hide all result columns, at least one column must be visible",SWT.ERROR);
          }
 else {
            int[] columnIndexes=new int[selectedColumns.size()];
            for (int i=0, selectedColumnsSize=selectedColumns.size(); i < selectedColumnsSize; i++) {
              columnIndexes[i]=model.getVisibleColumnIndex((DBDAttributeBinding)selectedColumns.get(i));
            }
            Arrays.sort(columnIndexes);
            for (int i=columnIndexes.length; i > 0; i--) {
              getModel().setColumnVisibility(getModel().getVisibleColumn(columnIndexes[i - 1]),false);
            }
            refreshSpreadsheet(true);
          }
        }
      }
);
    }
  }
  filtersMenu.add(new Separator());
  filtersMenu.add(new ToggleServerSideOrderingAction());
  filtersMenu.add(new ShowFiltersAction());
}
