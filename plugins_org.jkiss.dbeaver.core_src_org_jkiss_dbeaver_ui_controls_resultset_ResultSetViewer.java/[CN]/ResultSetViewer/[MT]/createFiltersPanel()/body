{
  filtersPanel=new Composite(viewerPanel,SWT.NONE);
  filtersPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout gl=new GridLayout(5,false);
  gl.marginHeight=3;
  gl.marginWidth=3;
  filtersPanel.setLayout(gl);
  Button sourceQueryButton=new Button(filtersPanel,SWT.PUSH | SWT.NO_FOCUS);
  sourceQueryButton.setImage(DBIcon.SQL_TEXT.getImage());
  sourceQueryButton.setText("SQL");
  sourceQueryButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String queryText=model.getStatistics() == null ? null : model.getStatistics().getQueryText();
      if (queryText == null || queryText.isEmpty()) {
        queryText="<empty>";
      }
      ViewSQLDialog dialog=new ViewSQLDialog(site,getDataSource(),"Query Text",DBIcon.SQL_TEXT.getImage(),queryText);
      dialog.setEnlargeViewPanel(false);
      dialog.setWordWrap(true);
      dialog.open();
    }
  }
);
  Button customizeButton=new Button(filtersPanel,SWT.PUSH | SWT.NO_FOCUS);
  customizeButton.setImage(DBIcon.FILTER.getImage());
  customizeButton.setText("Filters");
  customizeButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new FilterSettingsDialog(ResultSetViewer.this).open();
    }
  }
);
  this.filtersText=new Combo(filtersPanel,SWT.BORDER | SWT.DROP_DOWN);
  this.filtersText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  this.filtersText.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setCustomDataFilter();
    }
  }
);
{
    UIUtils.addFocusTracker(site,UIUtils.INLINE_WIDGET_EDITOR_ID,this.filtersText);
    this.filtersText.addDisposeListener(new DisposeListener(){
      @Override public void widgetDisposed(      DisposeEvent e){
        UIUtils.removeFocusTracker(ResultSetViewer.this.site,filtersText);
        dispose();
      }
    }
);
  }
  this.filtersText.addFocusListener(new FocusListener(){
    private boolean activated=false;
    @Override public void focusGained(    FocusEvent e){
      if (!activated) {
        UIUtils.enableHostEditorKeyBindings(site,false);
        activated=true;
      }
    }
    @Override public void focusLost(    FocusEvent e){
      if (activated) {
        UIUtils.enableHostEditorKeyBindings(site,true);
        activated=false;
      }
    }
  }
);
  filtersApplyButton=new Button(filtersPanel,SWT.PUSH | SWT.NO_FOCUS);
  filtersApplyButton.setText("Apply");
  filtersApplyButton.setToolTipText("Apply filter criteria");
  filtersApplyButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setCustomDataFilter();
    }
  }
);
  filtersApplyButton.setEnabled(false);
  filtersClearButton=new Button(filtersPanel,SWT.PUSH | SWT.NO_FOCUS);
  filtersClearButton.setText("X");
  filtersClearButton.setToolTipText("Remove all filters");
  filtersClearButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      resetDataFilter(true);
    }
  }
);
  filtersClearButton.setEnabled(false);
  this.filtersText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (filtersEnableState == null) {
        String filterText=filtersText.getText();
        filtersApplyButton.setEnabled(true);
        filtersClearButton.setEnabled(!CommonUtils.isEmpty(filterText));
      }
    }
  }
);
  filtersPanel.addTraverseListener(new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_RETURN) {
        setCustomDataFilter();
        e.doit=false;
        e.detail=SWT.TRAVERSE_NONE;
      }
    }
  }
);
  filtersEnableState=ControlEnableState.disable(filtersPanel);
}
