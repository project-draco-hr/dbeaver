{
  if (dataPumpJob == null) {
    dataPumpJob=new ResultSetDataPumpJob(dataContainer,dataFilter != null ? dataFilter : model.getDataFilter(),getDataReceiver(),getSpreadsheet());
    dataPumpJob.addJobChangeListener(new JobChangeAdapter(){
      @Override public void aboutToRun(      IJobChangeEvent event){
        getModel().setUpdateInProgress(true);
        getControl().getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            enableFilters(false);
          }
        }
);
      }
      @Override public void done(      IJobChangeEvent event){
        ResultSetDataPumpJob job=(ResultSetDataPumpJob)event.getJob();
        final Throwable error=job.getError();
        if (job.getStatistics() != null) {
          model.setStatistics(job.getStatistics());
        }
        getControl().getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            Control control=getControl();
            if (control == null || control.isDisposed()) {
              return;
            }
            final Shell shell=control.getShell();
            if (error != null) {
              setStatus(error.getMessage(),true);
              UIUtils.showErrorDialog(shell,"Error executing query","Query execution failed",error);
            }
 else             if (selectAttribute != null && selectRow != null) {
              curRow=selectRow;
              curAttribute=selectAttribute;
              GridCell newPos;
              if (!recordMode) {
                newPos=new GridCell(curAttribute,curRow);
              }
 else {
                newPos=new GridCell(curRow,curAttribute);
              }
              spreadsheet.setCursor(newPos,false);
              updateStatusMessage();
              previewValue();
            }
 else {
              spreadsheet.redraw();
            }
            if (error == null) {
              isHistoryChanging=true;
              try {
                curState=new StateItem(dataContainer,dataFilter,curRow == null ? -1 : curRow.visualNumber);
                stateHistory.add(curState);
                historyPosition=stateHistory.size() - 1;
                site.getPage().getNavigationHistory().markLocation((IEditorPart)site.getPart());
              }
  finally {
                isHistoryChanging=false;
              }
            }
            getModel().setUpdateInProgress(false);
            if (dataFilter != null) {
              model.updateDataFilter(dataFilter);
            }
            updateFiltersText();
            if (finalizer != null) {
              finalizer.run();
            }
            dataPumpJob=null;
          }
        }
);
      }
    }
);
    dataPumpJob.setOffset(offset);
    dataPumpJob.setMaxRows(maxRows);
    dataPumpJob.schedule();
  }
}
