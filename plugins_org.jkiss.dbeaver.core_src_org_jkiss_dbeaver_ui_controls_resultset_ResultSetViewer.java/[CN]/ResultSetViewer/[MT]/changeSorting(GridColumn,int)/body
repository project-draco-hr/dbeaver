{
  DBDDataFilter dataFilter=model.getDataFilter();
  boolean ctrlPressed=(state & SWT.CTRL) == SWT.CTRL;
  boolean altPressed=(state & SWT.ALT) == SWT.ALT;
  if (ctrlPressed) {
    dataFilter.clearOrderColumns();
  }
  DBDAttributeBinding metaColumn=model.getVisibleColumn(column.getIndex());
  DBQOrderColumn columnOrder=dataFilter.getOrderColumn(metaColumn.getAttributeName());
  if (columnOrder == null) {
    if (dataReceiver.isHasMoreData() && supportsDataFilter()) {
      if (!ConfirmationDialog.confirmActionWithParams(spreadsheet.getShell(),PrefConstants.CONFIRM_ORDER_RESULTSET,metaColumn.getAttributeName())) {
        return;
      }
    }
    columnOrder=new DBQOrderColumn(metaColumn.getAttributeName(),altPressed);
    dataFilter.addOrderColumn(columnOrder);
  }
 else {
    if (!columnOrder.isDescending()) {
      columnOrder.setDescending(!altPressed);
    }
 else {
      dataFilter.removeOrderColumn(columnOrder);
    }
  }
  reorderResultSet(false,new Runnable(){
    @Override public void run(){
      resetColumnOrdering();
    }
  }
);
}
