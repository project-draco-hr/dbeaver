{
  DBDDataFilter dataFilter=model.getDataFilter();
  boolean ctrlPressed=(state & SWT.CTRL) == SWT.CTRL;
  boolean altPressed=(state & SWT.ALT) == SWT.ALT;
  if (ctrlPressed) {
    dataFilter.resetOrderBy();
  }
  DBDAttributeBinding metaColumn=model.getVisibleColumn(column.getIndex());
  DBQAttributeConstraint constraint=dataFilter.getConstraint(metaColumn);
  if (constraint.getOrderBy() == null) {
    if (dataReceiver.isHasMoreData() && supportsDataFilter()) {
      if (!ConfirmationDialog.confirmActionWithParams(spreadsheet.getShell(),PrefConstants.CONFIRM_ORDER_RESULTSET,metaColumn.getAttributeName())) {
        return;
      }
    }
    constraint.setOrderBy(altPressed ? DBQOrder.DESCENDING : DBQOrder.ASCENDING);
  }
 else {
    if (constraint.getOrderBy() == DBQOrder.ASCENDING) {
      constraint.setOrderBy(DBQOrder.DESCENDING);
    }
 else {
      constraint.setOrderBy(null);
    }
  }
  reorderResultSet(constraint.getOrderBy() == null,new Runnable(){
    @Override public void run(){
      resetColumnOrdering();
    }
  }
);
}
