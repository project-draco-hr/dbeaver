{
  if (dataPumpJob != null) {
    UIUtils.showMessageBox(viewerPanel.getShell(),"Data read","Data read is in progress - can't run another",SWT.ICON_WARNING);
    return;
  }
  final DBDDataFilter useDataFilter=dataFilter != null ? dataFilter : (dataContainer == getDataContainer() ? model.getDataFilter() : null);
  Composite progressControl=viewerPanel;
  if (activePresentation.getControl() instanceof Composite) {
    progressControl=(Composite)activePresentation.getControl();
  }
  final Object presentationState=savePresentationState();
  dataPumpJob=new ResultSetDataPumpJob(dataContainer,useDataFilter,getDataReceiver(),progressControl);
  dataPumpJob.addJobChangeListener(new JobChangeAdapter(){
    @Override public void aboutToRun(    IJobChangeEvent event){
      model.setUpdateInProgress(true);
      getControl().getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          enableFilters(false);
        }
      }
);
    }
    @Override public void done(    IJobChangeEvent event){
      ResultSetDataPumpJob job=(ResultSetDataPumpJob)event.getJob();
      final Throwable error=job.getError();
      if (job.getStatistics() != null) {
        model.setStatistics(job.getStatistics());
      }
      final Control control=getControl();
      if (control.isDisposed()) {
        return;
      }
      control.getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          if (control.isDisposed()) {
            return;
          }
          final Shell shell=control.getShell();
          if (error != null) {
            setStatus(error.getMessage(),true);
            UIUtils.showErrorDialog(shell,"Error executing query","Query execution failed",error);
          }
 else           if (focusRow >= 0 && focusRow < model.getRowCount() && model.getVisibleAttributeCount() > 0) {
            curRow=model.getRow(focusRow);
            if (recordMode) {
              updateRecordMode();
            }
 else {
              updateStatusMessage();
            }
            restorePresentationState(presentationState);
            activePresentation.updateValueView();
          }
          if (error == null) {
            setNewState(dataContainer,dataFilter != null ? dataFilter : (dataContainer == getDataContainer() ? model.getDataFilter() : null));
          }
          model.setUpdateInProgress(false);
          if (dataFilter != null) {
            model.updateDataFilter(dataFilter);
          }
          updateFiltersText();
          fireResultSetLoad();
          if (finalizer != null) {
            finalizer.run();
          }
          dataPumpJob=null;
        }
      }
);
    }
  }
);
  dataPumpJob.setOffset(offset);
  dataPumpJob.setMaxRows(maxRows);
  dataPumpJob.schedule();
}
