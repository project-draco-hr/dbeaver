{
  GridPos currentPosition=getCurrentPosition();
  int columnIndex=translateVisualPos(currentPosition).col;
  if (supportsDataFilter() && columnIndex >= 0) {
    DBDAttributeBinding column=model.getColumn(columnIndex);
    DBSDataKind dataKind=column.getMetaAttribute().getDataKind();
    if (!column.getMetaAttribute().isRequired()) {
      filtersMenu.add(new FilterByColumnAction("IS NULL",FilterByColumnType.NONE,column));
      filtersMenu.add(new FilterByColumnAction("IS NOT NULL",FilterByColumnType.NONE,column));
    }
    for (    FilterByColumnType type : FilterByColumnType.values()) {
      if (type == FilterByColumnType.NONE || (type == FilterByColumnType.VALUE && !isValidCell(currentPosition))) {
        continue;
      }
      filtersMenu.add(new Separator());
      if (type.getValue(this,column,true,DBDDisplayFormat.NATIVE) == null) {
        continue;
      }
      if (dataKind == DBSDataKind.BOOLEAN) {
        filtersMenu.add(new FilterByColumnAction("= ?",type,column));
        filtersMenu.add(new FilterByColumnAction("<> ?",type,column));
      }
 else       if (dataKind == DBSDataKind.NUMERIC || dataKind == DBSDataKind.DATETIME) {
        filtersMenu.add(new FilterByColumnAction("= ?",type,column));
        filtersMenu.add(new FilterByColumnAction("<> ?",type,column));
        filtersMenu.add(new FilterByColumnAction("> ?",type,column));
        filtersMenu.add(new FilterByColumnAction("< ?",type,column));
      }
 else       if (dataKind == DBSDataKind.STRING) {
        filtersMenu.add(new FilterByColumnAction("= '?'",type,column));
        filtersMenu.add(new FilterByColumnAction("<> '?'",type,column));
        filtersMenu.add(new FilterByColumnAction("> '?'",type,column));
        filtersMenu.add(new FilterByColumnAction("< '?'",type,column));
        filtersMenu.add(new FilterByColumnAction("LIKE '%?%'",type,column));
        filtersMenu.add(new FilterByColumnAction("NOT LIKE '%?%'",type,column));
      }
    }
    filtersMenu.add(new Separator());
    if (!CommonUtils.isEmpty(model.getDataFilter().getConstraint(column).getCriteria())) {
      filtersMenu.add(new FilterResetColumnAction(column));
    }
  }
{
    final List<GridColumn> selectedColumns=getSpreadsheet().getSelectedColumns();
    if (getGridMode() == GridMode.GRID && !selectedColumns.isEmpty()) {
      String hideTitle;
      if (selectedColumns.size() == 1) {
        DBDAttributeBinding columnToHide=model.getColumn(translateVisualPos(new GridPos(selectedColumns.get(0).getIndex(),-1)).col);
        hideTitle="Hide column '" + columnToHide.getAttributeName() + "'";
      }
 else {
        hideTitle="Hide selected columns (" + selectedColumns.size() + ")";
      }
      filtersMenu.add(new Action(hideTitle){
        @Override public void run(){
          if (selectedColumns.size() >= getModel().getVisibleColumnCount()) {
            UIUtils.showMessageBox(getControl().getShell(),"Hide columns","Can't hide all result columns, at least one column must be visible",SWT.ERROR);
          }
 else {
            int[] columnIndexes=new int[selectedColumns.size()];
            for (int i=0, selectedColumnsSize=selectedColumns.size(); i < selectedColumnsSize; i++) {
              columnIndexes[i]=selectedColumns.get(i).getIndex();
            }
            Arrays.sort(columnIndexes);
            for (int i=columnIndexes.length; i > 0; i--) {
              getModel().setColumnVisibility(getModel().getVisibleColumn(columnIndexes[i - 1]),false);
            }
            refreshSpreadsheet(true,true);
          }
        }
      }
);
    }
  }
  filtersMenu.add(new ShowFiltersAction());
}
