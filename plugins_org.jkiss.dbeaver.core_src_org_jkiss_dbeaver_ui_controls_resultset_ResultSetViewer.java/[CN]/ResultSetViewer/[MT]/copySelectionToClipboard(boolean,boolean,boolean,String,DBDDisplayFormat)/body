{
  if (delimiter == null) {
    delimiter="\t";
  }
  String lineSeparator=ContentUtils.getDefaultLineSeparator();
  List<Integer> colsSelected=new ArrayList<Integer>();
  int firstCol=Integer.MAX_VALUE, lastCol=Integer.MIN_VALUE;
  int firstRow=Integer.MAX_VALUE;
  Collection<GridPos> selection=spreadsheet.getSelection();
  for (  GridPos pos : selection) {
    if (firstCol > pos.col) {
      firstCol=pos.col;
    }
    if (lastCol < pos.col) {
      lastCol=pos.col;
    }
    if (firstRow > pos.row) {
      firstRow=pos.row;
    }
    if (!colsSelected.contains(pos.col)) {
      colsSelected.add(pos.col);
    }
  }
  ILabelProvider rowLabelProvider=this.spreadsheet.getRowLabelProvider();
  int rowNumber=0;
  StringBuilder tdt=new StringBuilder();
  if (copyHeader) {
    if (copyRowNumbers) {
      tdt.append(rowLabelProvider.getText(-1));
    }
    for (    int colIndex : colsSelected) {
      GridColumn column=spreadsheet.getColumn(colIndex);
      if (tdt.length() > 0) {
        tdt.append(delimiter);
      }
      tdt.append(column.getText());
    }
    tdt.append(lineSeparator);
  }
  if (copyRowNumbers) {
    tdt.append(rowLabelProvider.getText(rowNumber++)).append(delimiter);
  }
  int prevRow=firstRow;
  int prevCol=firstCol;
  for (  GridPos pos : selection) {
    if (pos.row > prevRow) {
      if (prevCol < lastCol) {
        for (int i=prevCol; i < lastCol; i++) {
          if (colsSelected.contains(i)) {
            tdt.append(delimiter);
          }
        }
      }
      tdt.append(lineSeparator);
      if (copyRowNumbers) {
        tdt.append(rowLabelProvider.getText(rowNumber++)).append(delimiter);
      }
      prevRow=pos.row;
      prevCol=firstCol;
    }
    if (pos.col > prevCol) {
      for (int i=prevCol; i < pos.col; i++) {
        if (colsSelected.contains(i)) {
          tdt.append(delimiter);
        }
      }
      prevCol=pos.col;
    }
    GridPos cellPos=translateVisualPos(pos);
    Object[] curRow=model.getRowData(cellPos.row);
    Object value=curRow[cellPos.col];
    DBDAttributeBinding column=model.getColumn(cellPos.col);
    String cellText=column.getValueHandler().getValueDisplayString(column.getMetaAttribute(),value,format);
    if (cellText != null) {
      tdt.append(cellText);
    }
    if (cut) {
      DBDValueController valueController=new ResultSetValueController(cellPos,DBDValueController.EditType.NONE,null);
      if (!valueController.isReadOnly()) {
        valueController.updateValue(DBUtils.makeNullValue(valueController));
      }
    }
  }
  if (tdt.length() > 0) {
    TextTransfer textTransfer=TextTransfer.getInstance();
    getSpreadsheet().getClipboard().setContents(new Object[]{tdt.toString()},new Transfer[]{textTransfer});
  }
}
