{
  DBCExecutionContext context=getDataSource().openContext(monitor,DBCExecutionPurpose.UTIL,CoreMessages.controls_resultset_viewer_execute_statement_context_name);
  try {
    try {
      this.autocommit=context.getTransactionManager().isAutoCommit();
    }
 catch (    DBCException e) {
      log.warn("Could not determine autocommit state",e);
      this.autocommit=true;
    }
    if (!this.autocommit && context.getTransactionManager().supportsSavepoints()) {
      try {
        this.savepoint=context.getTransactionManager().setSavepoint(null);
      }
 catch (      Throwable e) {
        log.debug("Could not set savepoint",e);
      }
    }
    try {
      monitor.beginTask(CoreMessages.controls_resultset_viewer_monitor_aply_changes,DataUpdater.this.deleteStatements.size() + DataUpdater.this.insertStatements.size() + DataUpdater.this.updateStatements.size());
      for (      DataStatementInfo statement : DataUpdater.this.deleteStatements) {
        if (monitor.isCanceled())         break;
        DBSDataContainer dataContainer=(DBSDataContainer)statement.table;
        try {
          deleteCount+=dataContainer.deleteData(context,statement.keyAttributes);
          processStatementChanges(statement);
        }
 catch (        DBException e) {
          processStatementError(statement,context);
          return e;
        }
        monitor.worked(1);
      }
      for (      DataStatementInfo statement : DataUpdater.this.insertStatements) {
        if (monitor.isCanceled())         break;
        DBSDataContainer dataContainer=(DBSDataContainer)statement.table;
        try {
          insertCount+=dataContainer.insertData(context,statement.keyAttributes,new KeyDataReceiver(statement));
          processStatementChanges(statement);
        }
 catch (        DBException e) {
          processStatementError(statement,context);
          return e;
        }
        monitor.worked(1);
      }
      for (      DataStatementInfo statement : DataUpdater.this.updateStatements) {
        if (monitor.isCanceled())         break;
        DBSDataContainer dataContainer=(DBSDataContainer)statement.table;
        try {
          this.updateCount+=dataContainer.updateData(context,statement.keyAttributes,statement.updateAttributes,new KeyDataReceiver(statement));
          processStatementChanges(statement);
        }
 catch (        DBException e) {
          processStatementError(statement,context);
          return e;
        }
        monitor.worked(1);
      }
      return null;
    }
  finally {
      if (this.savepoint != null) {
        try {
          context.getTransactionManager().releaseSavepoint(this.savepoint);
        }
 catch (        Throwable e) {
          log.debug("Could not release savepoint",e);
        }
      }
    }
  }
  finally {
    monitor.done();
    context.close();
  }
}
