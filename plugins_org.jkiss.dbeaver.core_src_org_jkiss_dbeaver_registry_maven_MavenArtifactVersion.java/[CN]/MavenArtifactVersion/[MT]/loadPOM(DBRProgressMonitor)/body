{
  File localPOM=getLocalPOM();
  if (!localPOM.exists()) {
    cachePOM(localPOM);
  }
  monitor.subTask("Load POM " + this);
  Document pomDocument;
  try (InputStream mdStream=new FileInputStream(localPOM)){
    pomDocument=XMLUtils.parseDocument(mdStream);
  }
 catch (  XMLException e) {
    throw new IOException("Error parsing POM",e);
  }
  Element root=pomDocument.getDocumentElement();
  name=XMLUtils.getChildElementBody(root,"name");
  url=XMLUtils.getChildElementBody(root,"url");
  version=XMLUtils.getChildElementBody(root,"version");
  description=XMLUtils.getChildElementBody(root,"description");
{
    Element parentElement=XMLUtils.getChildElement(root,"parent");
    if (parentElement != null) {
      String parentGroupId=XMLUtils.getChildElementBody(parentElement,"groupId");
      String parentArtifactId=XMLUtils.getChildElementBody(parentElement,"artifactId");
      String parentVersion=XMLUtils.getChildElementBody(parentElement,"version");
      if (parentGroupId == null || parentArtifactId == null || parentVersion == null) {
        log.error("Broken parent reference: " + parentGroupId + ":"+ parentArtifactId+ ":"+ parentVersion);
      }
 else {
        MavenArtifactReference parentReference=new MavenArtifactReference(parentGroupId,parentArtifactId,parentVersion);
        if (this.version == null) {
          this.version=parentReference.getVersion();
        }
        parent=MavenRegistry.getInstance().findArtifact(monitor,parentReference);
        if (parent == null) {
          log.error("Artifact [" + this + "] parent ["+ parentReference+ "] not found");
        }
      }
    }
  }
{
    Element licensesElement=XMLUtils.getChildElement(root,"licenses");
    if (licensesElement != null) {
      for (      Element prop : XMLUtils.getChildElementList(licensesElement,"license")) {
        licenses.add(new MavenArtifactLicense(XMLUtils.getChildElementBody(prop,"name"),XMLUtils.getChildElementBody(prop,"url")));
      }
    }
  }
  MavenProfile defaultProfile=new MavenProfile(null);
  parseProfile(monitor,defaultProfile,root);
  profiles.add(defaultProfile);
{
    Element licensesElement=XMLUtils.getChildElement(root,"profiles");
    if (licensesElement != null) {
      for (      Element profElement : XMLUtils.getChildElementList(licensesElement,"profile")) {
        MavenProfile profile=new MavenProfile(XMLUtils.getChildElementBody(profElement,"id"));
        parseProfile(monitor,profile,profElement);
      }
    }
  }
  monitor.worked(1);
}
