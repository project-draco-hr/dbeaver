{
  List<MavenArtifactDependency> result=new ArrayList<>();
  Element dependenciesElement=XMLUtils.getChildElement(element,"dependencies");
  if (dependenciesElement != null) {
    for (    Element dep : XMLUtils.getChildElementList(dependenciesElement,"dependency")) {
      String groupId=XMLUtils.getChildElementBody(dep,"groupId");
      String artifactId=XMLUtils.getChildElementBody(dep,"artifactId");
      if (groupId == null || artifactId == null) {
        log.warn("Broken dependency reference: " + groupId + ":"+ artifactId);
        continue;
      }
      String version=XMLUtils.getChildElementBody(dep,"version");
      if (version == null) {
        version=findDependencyVersion(monitor,groupId,artifactId);
      }
      if (version == null) {
        log.error("Can't resolve artifact [" + groupId + ":"+ artifactId+ "] version. Skip.");
        continue;
      }
      MavenArtifactDependency.Scope scope=MavenArtifactDependency.Scope.COMPILE;
      String scopeName=XMLUtils.getChildElementBody(dep,"scope");
      if (!CommonUtils.isEmpty(scopeName)) {
        scope=MavenArtifactDependency.Scope.valueOf(scopeName.toUpperCase(Locale.ENGLISH));
      }
      boolean optional=CommonUtils.getBoolean(XMLUtils.getChildElementBody(dep,"optional"),false);
      if (all || (!optional && (scope == MavenArtifactDependency.Scope.COMPILE || scope == MavenArtifactDependency.Scope.RUNTIME))) {
        result.add(new MavenArtifactDependency(evaluateString(groupId),evaluateString(artifactId),evaluateString(version),scope,optional));
      }
    }
  }
  return result;
}
