{
  try {
    if (storage != null) {
      releaseTempStream();
      tmpStream=storage.getContentStream();
      try {
        preparedStatement.setBinaryStream(paramIndex,tmpStream);
      }
 catch (      Throwable e) {
        try {
          if (e instanceof SQLException) {
            throw (SQLException)e;
          }
 else {
            try {
              preparedStatement.setBinaryStream(paramIndex,tmpStream,storage.getContentLength());
            }
 catch (            Throwable e1) {
              if (e1 instanceof SQLException) {
                throw (SQLException)e1;
              }
 else {
                preparedStatement.setBinaryStream(paramIndex,tmpStream,(int)storage.getContentLength());
              }
            }
          }
        }
 catch (        SQLFeatureNotSupportedException e1) {
          int contentLength=(int)storage.getContentLength();
          ByteArrayOutputStream buffer=new ByteArrayOutputStream(contentLength);
          IOUtils.copyStream(tmpStream,buffer);
          preparedStatement.setBytes(paramIndex,buffer.toByteArray());
        }
      }
    }
 else     if (blob != null) {
      try {
        preparedStatement.setBlob(paramIndex,blob);
      }
 catch (      Throwable e0) {
        releaseTempStream();
        tmpStream=blob.getBinaryStream();
        try {
          preparedStatement.setBinaryStream(paramIndex,tmpStream);
        }
 catch (        Throwable e) {
          if (e instanceof SQLException) {
            throw (SQLException)e;
          }
 else {
            try {
              preparedStatement.setBinaryStream(paramIndex,tmpStream,blob.length());
            }
 catch (            Throwable e1) {
              if (e1 instanceof SQLException) {
                throw (SQLException)e1;
              }
 else {
                preparedStatement.setBinaryStream(paramIndex,tmpStream,(int)blob.length());
              }
            }
          }
        }
      }
    }
 else {
      preparedStatement.setNull(paramIndex,java.sql.Types.BLOB);
    }
  }
 catch (  SQLException e) {
    throw new DBCException(e,session.getDataSource());
  }
catch (  Throwable e) {
    throw new DBCException("Error while reading content",e);
  }
}
