{
  if (Property.DEFAULT_LOCAL_STRING.equals(string)) {
    Method getter=getGetter();
    String propertyName=BeanUtils.getPropertyNameFromGetter(getter.getName());
    Class<?> propOwner=getter.getDeclaringClass();
    Bundle bundle=FrameworkUtil.getBundle(propOwner);
    ResourceBundle resourceBundle=Platform.getResourceBundle(bundle);
    String messageID="meta." + propOwner.getName() + "."+ propertyName+ "."+ type;
    String result=null;
    try {
      result=resourceBundle.getString(messageID);
    }
 catch (    Exception e) {
      for (Class parent=getter.getDeclaringClass().getSuperclass(); parent != Object.class; parent=parent.getSuperclass()) {
        try {
          Method parentGetter=parent.getMethod(getter.getName(),getter.getParameterTypes());
          Class<?> parentOwner=parentGetter.getDeclaringClass();
          Bundle parentBundle=FrameworkUtil.getBundle(parentOwner);
          if (parentBundle == null || parentBundle == bundle) {
            continue;
          }
          ResourceBundle parentResourceBundle=Platform.getResourceBundle(parentBundle);
          messageID="meta." + parentOwner.getName() + "."+ propertyName+ "."+ type;
          try {
            result=parentResourceBundle.getString(messageID);
            break;
          }
 catch (          Exception e1) {
          }
        }
 catch (        NoSuchMethodException e1) {
        }
      }
      if (result == null) {
        if (type.equals(Property.RESOURCE_TYPE_NAME)) {
          log.warn("Resource '" + messageID + "' not found in bundle "+ bundle.getSymbolicName());
        }
        return defaultValue;
      }
    }
    if (!result.equals(messageID)) {
      return result;
    }
    return defaultValue;
  }
  return string;
}
