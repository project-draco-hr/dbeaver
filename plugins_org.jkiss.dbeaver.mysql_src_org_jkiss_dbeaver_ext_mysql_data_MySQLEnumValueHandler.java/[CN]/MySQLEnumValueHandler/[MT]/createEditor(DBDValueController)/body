{
switch (controller.getEditType()) {
case INLINE:
{
      return new ValueEditor<Combo>(controller){
        @Override public void primeEditorValue(        @Nullable Object value) throws DBException {
          MySQLTypeEnum enumValue=(MySQLTypeEnum)value;
          control.setText(DBUtils.isNullValue(enumValue) ? "" : enumValue.getValue());
        }
        @Override public Object extractEditorValue(){
          int selIndex=control.getSelectionIndex();
          if (selIndex < 0) {
            return new MySQLTypeEnum(getColumn(),null);
          }
 else {
            return new MySQLTypeEnum(getColumn(),control.getItem(selIndex));
          }
        }
        @Override protected Combo createControl(        Composite editPlaceholder){
          final Combo editor=new Combo(controller.getEditPlaceholder(),SWT.READ_ONLY);
          Collection<String> enumValues=getColumn().getEnumValues();
          if (enumValues != null) {
            for (            String enumValue : enumValues) {
              editor.add(enumValue);
            }
          }
          if (editor.getSelectionIndex() < 0) {
            editor.select(0);
          }
          return editor;
        }
        private MySQLTableColumn getColumn(){
          return ((MySQLTypeEnum)controller.getValue()).getColumn();
        }
      }
;
    }
case PANEL:
{
    return new ValueEditor<List>(controller){
      @Override public void primeEditorValue(      @Nullable Object value) throws DBException {
        MySQLTypeEnum enumValue=(MySQLTypeEnum)value;
        if (enumValue.isNull()) {
          control.setSelection(-1);
        }
        int itemCount=control.getItemCount();
        for (int i=0; i < itemCount; i++) {
          if (control.getItem(i).equals(enumValue.getValue())) {
            control.setSelection(i);
            break;
          }
        }
      }
      @Override public Object extractEditorValue(){
        int selIndex=control.getSelectionIndex();
        if (selIndex < 0) {
          return new MySQLTypeEnum(getColumn(),null);
        }
 else {
          return new MySQLTypeEnum(getColumn(),control.getItem(selIndex));
        }
      }
      @Override protected List createControl(      Composite editPlaceholder){
        final MySQLTableColumn column=((MySQLTypeEnum)controller.getValue()).getColumn();
        final List editor=new List(controller.getEditPlaceholder(),SWT.BORDER | SWT.READ_ONLY | SWT.V_SCROLL);
        Collection<String> enumValues=column.getEnumValues();
        if (enumValues != null) {
          for (          String enumValue : enumValues) {
            editor.add(enumValue);
          }
        }
        if (editor.getSelectionIndex() < 0) {
          editor.select(0);
        }
        if (controller.getEditType() == DBDValueController.EditType.INLINE) {
          editor.setFocus();
        }
        return editor;
      }
      private MySQLTableColumn getColumn(){
        return ((MySQLTypeEnum)controller.getValue()).getColumn();
      }
    }
;
  }
case EDITOR:
return new DefaultValueViewDialog(controller);
default :
return null;
}
}
