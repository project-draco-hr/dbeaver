{
switch (controller.getEditType()) {
case INLINE:
{
      final MySQLTableColumn column=((MySQLTypeEnum)controller.getValue()).getColumn();
      final Combo editor=new Combo(controller.getEditPlaceholder(),SWT.READ_ONLY);
      initInlineControl(controller,editor,new ValueExtractor<Combo>(){
        @Override public Object getValueFromControl(        Combo control){
          int selIndex=control.getSelectionIndex();
          if (selIndex < 0) {
            return new MySQLTypeEnum(column,null);
          }
 else {
            return new MySQLTypeEnum(column,control.getItem(selIndex));
          }
        }
      }
);
      Collection<String> enumValues=column.getEnumValues();
      if (enumValues != null) {
        for (        String enumValue : enumValues) {
          editor.add(enumValue);
        }
      }
      if (editor.getSelectionIndex() < 0) {
        editor.select(0);
      }
      return new DBDValueEditor(){
        @Override public void refreshValue(){
          MySQLTypeEnum value=(MySQLTypeEnum)controller.getValue();
          editor.setText(value.isNull() ? "" : value.getValue());
        }
      }
;
    }
case PANEL:
{
    final MySQLTableColumn column=((MySQLTypeEnum)controller.getValue()).getColumn();
    final List editor=new List(controller.getEditPlaceholder(),SWT.READ_ONLY);
    initInlineControl(controller,editor,new ValueExtractor<List>(){
      @Override public Object getValueFromControl(      List control){
        int selIndex=control.getSelectionIndex();
        if (selIndex < 0) {
          return new MySQLTypeEnum(column,null);
        }
 else {
          return new MySQLTypeEnum(column,control.getItem(selIndex));
        }
      }
    }
);
    Collection<String> enumValues=column.getEnumValues();
    if (enumValues != null) {
      for (      String enumValue : enumValues) {
        editor.add(enumValue);
      }
    }
    if (editor.getSelectionIndex() < 0) {
      editor.select(0);
    }
    if (controller.getEditType() == DBDValueController.EditType.INLINE) {
      editor.setFocus();
    }
    return new DBDValueEditor(){
      @Override public void refreshValue(){
        MySQLTypeEnum value=(MySQLTypeEnum)controller.getValue();
        if (value.isNull()) {
          editor.setSelection(-1);
        }
        int itemCount=editor.getItemCount();
        for (int i=0; i < itemCount; i++) {
          if (editor.getItem(i).equals(value.getValue())) {
            editor.setSelection(i);
            break;
          }
        }
      }
    }
;
  }
case EDITOR:
return new EnumViewDialog(controller);
default :
return null;
}
}
