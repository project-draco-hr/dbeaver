{
  String pkTableCatalog=GenericUtils.safeGetStringTrimmed(foreignKeyObject,dbResult,JDBCConstants.PKTABLE_CAT);
  String pkTableSchema=GenericUtils.safeGetStringTrimmed(foreignKeyObject,dbResult,JDBCConstants.PKTABLE_SCHEM);
  String pkTableName=GenericUtils.safeGetStringTrimmed(foreignKeyObject,dbResult,JDBCConstants.PKTABLE_NAME);
  int keySeq=GenericUtils.safeGetInt(foreignKeyObject,dbResult,JDBCConstants.KEY_SEQ);
  int updateRuleNum=GenericUtils.safeGetInt(foreignKeyObject,dbResult,JDBCConstants.UPDATE_RULE);
  int deleteRuleNum=GenericUtils.safeGetInt(foreignKeyObject,dbResult,JDBCConstants.DELETE_RULE);
  String pkName=GenericUtils.safeGetStringTrimmed(foreignKeyObject,dbResult,JDBCConstants.PK_NAME);
  int defferabilityNum=GenericUtils.safeGetInt(foreignKeyObject,dbResult,JDBCConstants.DEFERRABILITY);
  DBSForeignKeyModifyRule deleteRule=JDBCUtils.getCascadeFromNum(deleteRuleNum);
  DBSForeignKeyModifyRule updateRule=JDBCUtils.getCascadeFromNum(updateRuleNum);
  DBSForeignKeyDefferability defferability;
switch (defferabilityNum) {
case DatabaseMetaData.importedKeyInitiallyDeferred:
    defferability=DBSForeignKeyDefferability.INITIALLY_DEFERRED;
  break;
case DatabaseMetaData.importedKeyInitiallyImmediate:
defferability=DBSForeignKeyDefferability.INITIALLY_IMMEDIATE;
break;
case DatabaseMetaData.importedKeyNotDeferrable:
defferability=DBSForeignKeyDefferability.NOT_DEFERRABLE;
break;
default :
defferability=DBSForeignKeyDefferability.UNKNOWN;
break;
}
if (pkTableName == null) {
log.debug("Null PK table name");
return null;
}
GenericTable pkTable=parent.getDataSource().findTable(session.getProgressMonitor(),pkTableCatalog,pkTableSchema,pkTableName);
if (pkTable == null) {
log.warn("Can't find PK table " + pkTableName);
return null;
}
GenericPrimaryKey pk=null;
if (pkName != null) {
pk=DBUtils.findObject(pkTable.getConstraints(session.getProgressMonitor()),pkName);
if (pk == null) {
log.warn("Unique key '" + pkName + "' not found in table "+ pkTable.getFullQualifiedName());
}
}
if (pk == null) {
String pkColumnName=GenericUtils.safeGetStringTrimmed(foreignKeyObject,dbResult,JDBCConstants.PKCOLUMN_NAME);
GenericTableColumn pkColumn=pkTable.getAttribute(session.getProgressMonitor(),pkColumnName);
if (pkColumn == null) {
log.warn("Can't find PK table " + pkTable.getFullQualifiedName() + " column "+ pkColumnName);
return null;
}
Collection<GenericPrimaryKey> uniqueKeys=pkTable.getConstraints(session.getProgressMonitor());
if (uniqueKeys != null) {
for (GenericPrimaryKey pkConstraint : uniqueKeys) {
if (pkConstraint.getConstraintType().isUnique() && DBUtils.getConstraintColumn(session.getProgressMonitor(),pkConstraint,pkColumn) != null) {
pk=pkConstraint;
break;
}
}
}
if (pk == null) {
log.warn("Could not find unique key for table " + pkTable.getFullQualifiedName() + " column "+ pkColumn.getName());
String pkFullName=pkTable.getFullQualifiedName() + "." + pkName;
pk=pkMap.get(pkFullName);
if (pk == null) {
pk=new GenericPrimaryKey(pkTable,pkName,null,DBSEntityConstraintType.PRIMARY_KEY,true);
pkMap.put(pkFullName,pk);
pk.getTable().addUniqueKey(pk);
}
pk.addColumn(new GenericTableConstraintColumn(pk,pkColumn,keySeq));
}
}
return new GenericTableForeignKey(parent,fkName,null,pk,deleteRule,updateRule,defferability,true);
}
