{
  IWorkbenchPart part=DBeaverUI.getActiveWorkbenchWindow().getActivePage().getActivePart();
  IStructuredSelection structuredSelection=GenerateSQLContributor.getSelectionFromPart(part);
  if (structuredSelection == null || structuredSelection.isEmpty()) {
    return new IContributionItem[0];
  }
  List<IContributionItem> menu=new ArrayList<IContributionItem>();
  if (structuredSelection instanceof ResultSetSelection) {
    ResultSetSelection rss=(ResultSetSelection)structuredSelection;
    ResultSetViewer rsv=rss.getResultSetViewer();
    DBSTable table=(DBSTable)rsv.getDataContainer();
    menu.add(makeAction("SELECT by Unique Key",new TableAnalysisRunner(table){
      @Override public void generateSQL(      DBRProgressMonitor monitor,      StringBuilder sql) throws DBException {
        Collection<? extends DBSEntityAttribute> keyAttributes=getKeyAttributes(monitor);
        sql.append("SELECT ");
        boolean hasAttr=false;
        for (        DBSEntityAttribute attr : getValueAttributes(monitor,keyAttributes)) {
          if (hasAttr)           sql.append(", ");
          sql.append(DBUtils.getObjectFullName(attr));
          hasAttr=true;
        }
        sql.append("\nFROM ").append(DBUtils.getObjectFullName(table));
        sql.append("\nWHERE ");
        hasAttr=false;
        for (        DBSEntityAttribute attr : keyAttributes) {
          if (hasAttr)           sql.append(" AND ");
          sql.append(DBUtils.getObjectFullName(attr)).append("=").append("''");
          hasAttr=true;
        }
        sql.append(";\n");
      }
    }
));
  }
 else {
    final DBSTable table=(DBSTable)((DBNDatabaseNode)RuntimeUtils.getObjectAdapter(structuredSelection.getFirstElement(),DBNNode.class)).getObject();
    menu.add(makeAction("SELECT ",new TableAnalysisRunner(table){
      @Override public void generateSQL(      DBRProgressMonitor monitor,      StringBuilder sql) throws DBException {
        sql.append("SELECT ");
        boolean hasAttr=false;
        for (        DBSEntityAttribute attr : getAllAttributes(monitor)) {
          if (hasAttr)           sql.append(", ");
          sql.append(DBUtils.getObjectFullName(attr));
          hasAttr=true;
        }
        sql.append("\nFROM ").append(DBUtils.getObjectFullName(table));
        sql.append(";\n");
      }
    }
));
    menu.add(makeAction("INSERT ",new TableAnalysisRunner(table){
      @Override public void generateSQL(      DBRProgressMonitor monitor,      StringBuilder sql) throws DBException {
        sql.append("INSERT INTO ").append(DBUtils.getObjectFullName(table)).append("\n(");
        boolean hasAttr=false;
        for (        DBSEntityAttribute attr : getAllAttributes(monitor)) {
          if (hasAttr)           sql.append(", ");
          sql.append(DBUtils.getObjectFullName(attr));
          hasAttr=true;
        }
        sql.append(")\nVALUES(");
        hasAttr=false;
        for (        DBSEntityAttribute attr : getAllAttributes(monitor)) {
          if (hasAttr)           sql.append(", ");
          appendDefaultValue(sql,attr);
          hasAttr=true;
        }
        sql.append(");\n");
      }
    }
));
    menu.add(makeAction("UPDATE ",new TableAnalysisRunner(table){
      @Override public void generateSQL(      DBRProgressMonitor monitor,      StringBuilder sql) throws DBException {
        Collection<? extends DBSEntityAttribute> keyAttributes=getKeyAttributes(monitor);
        sql.append("UPDATE ").append(DBUtils.getObjectFullName(table)).append("\nSET ");
        boolean hasAttr=false;
        for (        DBSEntityAttribute attr : getValueAttributes(monitor,keyAttributes)) {
          if (hasAttr)           sql.append(", ");
          sql.append(DBUtils.getObjectFullName(attr)).append("=");
          appendDefaultValue(sql,attr);
          hasAttr=true;
        }
        if (!CommonUtils.isEmpty(keyAttributes)) {
          sql.append("\nWHERE ");
          hasAttr=false;
          for (          DBSEntityAttribute attr : keyAttributes) {
            if (hasAttr)             sql.append(" AND ");
            sql.append(DBUtils.getObjectFullName(attr)).append("=");
            appendDefaultValue(sql,attr);
            hasAttr=true;
          }
        }
        sql.append(";\n");
      }
    }
));
    menu.add(makeAction("DELETE ",new TableAnalysisRunner(table){
      @Override public void generateSQL(      DBRProgressMonitor monitor,      StringBuilder sql) throws DBException {
        sql.append("DELETE FROM  ").append(DBUtils.getObjectFullName(table)).append("\nWHERE ");
        Collection<? extends DBSEntityAttribute> keyAttributes=getKeyAttributes(monitor);
        if (CommonUtils.isEmpty(keyAttributes)) {
          keyAttributes=getAllAttributes(monitor);
        }
        boolean hasAttr=false;
        for (        DBSEntityAttribute attr : keyAttributes) {
          if (hasAttr)           sql.append(" AND ");
          sql.append(DBUtils.getObjectFullName(attr)).append("=");
          appendDefaultValue(sql,attr);
          hasAttr=true;
        }
        sql.append(";\n");
      }
    }
));
  }
  return menu.toArray(new IContributionItem[menu.size()]);
}
