{
  final List<DB2SourceObject> objects=getSelectedObjects(event);
  if (!objects.isEmpty()) {
    final Shell activeShell=HandlerUtil.getActiveShell(event);
    if (objects.size() == 1) {
      final DB2SourceObject unit=objects.get(0);
      final IWorkbenchPart activePart=HandlerUtil.getActiveEditor(event);
      DBCSourceHost sourceHost=RuntimeUtils.getObjectAdapter(activePart,DBCSourceHost.class);
      if (sourceHost == null) {
        sourceHost=(DBCSourceHost)activePart.getAdapter(DBCSourceHost.class);
      }
      if (sourceHost != null && sourceHost.getSourceObject() != unit) {
        sourceHost=null;
      }
      final DBCCompileLog compileLog=sourceHost == null ? new DBCCompileLogBase() : sourceHost.getCompileLog();
      compileLog.clearLog();
      Throwable error=null;
      try {
        DBeaverUI.runInProgressService(new DBRRunnableWithProgress(){
          @Override public void run(          DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
              compileUnit(monitor,compileLog,unit);
            }
 catch (            DBCException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
);
        if (compileLog.getError() != null) {
          error=compileLog.getError();
        }
      }
 catch (      InvocationTargetException e) {
        error=e.getTargetException();
      }
catch (      InterruptedException e) {
        return null;
      }
      if (error != null) {
        UIUtils.showErrorDialog(activeShell,"Unexpected compilation error",null,error);
      }
 else       if (!CommonUtils.isEmpty(compileLog.getErrorStack())) {
        int line=-1, position=-1;
        StringBuilder fullMessage=new StringBuilder();
        for (        DBCCompileError oce : compileLog.getErrorStack()) {
          fullMessage.append(oce.toString()).append(ContentUtils.getDefaultLineSeparator());
          if (line < 0) {
            line=oce.getLine();
            position=oce.getPosition();
          }
        }
        if (sourceHost != null && sourceHost.getSourceObject() == unit && line > 0 && position > 0) {
          sourceHost.positionSource(line,position);
          activePart.getSite().getPage().activate(activePart);
        }
        String errorTitle=unit.getName() + " compilation failed";
        if (sourceHost != null) {
          sourceHost.setCompileInfo(errorTitle,true);
          sourceHost.showCompileLog();
        }
        UIUtils.showErrorDialog(activeShell,errorTitle,fullMessage.toString());
      }
 else {
        String message=unit.getName() + " compiled successfully";
        if (sourceHost != null) {
          sourceHost.setCompileInfo(message,true);
        }
        UIUtils.showMessageBox(activeShell,"Done",message,SWT.ICON_INFORMATION);
      }
    }
 else {
      DB2CompilerDialog dialog=new DB2CompilerDialog(activeShell,objects);
      dialog.open();
    }
  }
  return null;
}
