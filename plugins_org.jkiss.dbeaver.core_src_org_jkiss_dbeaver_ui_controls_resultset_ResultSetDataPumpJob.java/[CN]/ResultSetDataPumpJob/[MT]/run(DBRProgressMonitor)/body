{
  RuntimeUtils.setThreadName("ResultSetDataPump [" + dataContainer + "]");
  error=null;
  pumpStartTime=System.currentTimeMillis();
  DBRProgressMonitor proxyMonitor=new ProxyProgressMonitor(monitor){
    @Override public void beginTask(    String name,    int totalWork){
      super.beginTask(name,totalWork);
    }
    @Override public void subTask(    String name){
      progressMessage=name;
      super.subTask(name);
    }
  }
;
  PumpVisualizer visualizer=new PumpVisualizer();
  DBCExecutionPurpose purpose=DBCExecutionPurpose.USER;
  if (dataFilter.hasFilters()) {
    purpose=DBCExecutionPurpose.USER_FILTERED;
  }
  try (DBCSession session=getExecutionContext().openSession(proxyMonitor,purpose,NLS.bind(CoreMessages.controls_rs_pump_job_context_name,dataContainer.toString()))){
    visualizer.schedule(PROGRESS_VISUALIZE_PERIOD * 2);
    statistics=dataContainer.readData(this,session,controller.getDataReceiver(),dataFilter,offset,maxRows,DBSDataContainer.FLAG_READ_PSEUDO);
  }
 catch (  DBException e) {
    error=e;
  }
 finally {
    visualizer.finished=true;
  }
  return Status.OK_STATUS;
}
