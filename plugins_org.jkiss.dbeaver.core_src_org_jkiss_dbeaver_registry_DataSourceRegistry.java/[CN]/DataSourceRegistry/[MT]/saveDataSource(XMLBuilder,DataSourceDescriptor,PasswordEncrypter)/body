{
  xml.startElement(RegistryConstants.TAG_DATA_SOURCE);
  xml.addAttribute(RegistryConstants.ATTR_ID,dataSource.getId());
  xml.addAttribute(RegistryConstants.ATTR_PROVIDER,dataSource.getDriver().getProviderDescriptor().getId());
  xml.addAttribute(RegistryConstants.ATTR_DRIVER,dataSource.getDriver().getId());
  xml.addAttribute(RegistryConstants.ATTR_NAME,dataSource.getName());
  xml.addAttribute(RegistryConstants.ATTR_CREATE_DATE,dataSource.getCreateDate().getTime());
  if (dataSource.getUpdateDate() != null) {
    xml.addAttribute(RegistryConstants.ATTR_UPDATE_DATE,dataSource.getUpdateDate().getTime());
  }
  if (dataSource.getLoginDate() != null) {
    xml.addAttribute(RegistryConstants.ATTR_LOGIN_DATE,dataSource.getLoginDate().getTime());
  }
  xml.addAttribute(RegistryConstants.ATTR_SAVE_PASSWORD,dataSource.isSavePassword());
  if (dataSource.isShowSystemObjects()) {
    xml.addAttribute(RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS,dataSource.isShowSystemObjects());
  }
  if (dataSource.isShowUtilityObjects()) {
    xml.addAttribute(RegistryConstants.ATTR_SHOW_UTIL_OBJECTS,dataSource.isShowUtilityObjects());
  }
  xml.addAttribute(RegistryConstants.ATTR_READ_ONLY,dataSource.isConnectionReadOnly());
  if (!CommonUtils.isEmpty(dataSource.getFolderPath())) {
    xml.addAttribute(RegistryConstants.ATTR_FOLDER,dataSource.getFolderPath());
  }
  final String lockPasswordHash=dataSource.getLockPasswordHash();
  if (!CommonUtils.isEmpty(lockPasswordHash)) {
    xml.addAttribute(RegistryConstants.ATTR_LOCK_PASSWORD,lockPasswordHash);
  }
{
    DBPConnectionConfiguration connectionInfo=dataSource.getConnectionConfiguration();
    xml.startElement(RegistryConstants.TAG_CONNECTION);
    if (!CommonUtils.isEmpty(connectionInfo.getHostName())) {
      xml.addAttribute(RegistryConstants.ATTR_HOST,connectionInfo.getHostName());
    }
    if (!CommonUtils.isEmpty(connectionInfo.getHostPort())) {
      xml.addAttribute(RegistryConstants.ATTR_PORT,connectionInfo.getHostPort());
    }
    xml.addAttribute(RegistryConstants.ATTR_SERVER,CommonUtils.notEmpty(connectionInfo.getServerName()));
    xml.addAttribute(RegistryConstants.ATTR_DATABASE,CommonUtils.notEmpty(connectionInfo.getDatabaseName()));
    xml.addAttribute(RegistryConstants.ATTR_URL,CommonUtils.notEmpty(connectionInfo.getUrl()));
    xml.addAttribute(RegistryConstants.ATTR_USER,CommonUtils.notEmpty(connectionInfo.getUserName()));
    if (dataSource.isSavePassword() && !CommonUtils.isEmpty(connectionInfo.getUserPassword())) {
      String encPassword=connectionInfo.getUserPassword();
      if (!CommonUtils.isEmpty(encPassword)) {
        try {
          encPassword=encrypter.encrypt(encPassword);
        }
 catch (        EncryptionException e) {
          log.error("Can't encrypt password. Save it as is",e);
        }
      }
      xml.addAttribute(RegistryConstants.ATTR_PASSWORD,encPassword);
    }
    if (!CommonUtils.isEmpty(connectionInfo.getClientHomeId())) {
      xml.addAttribute(RegistryConstants.ATTR_HOME,connectionInfo.getClientHomeId());
    }
    if (connectionInfo.getConnectionType() != null) {
      xml.addAttribute(RegistryConstants.ATTR_TYPE,connectionInfo.getConnectionType().getId());
    }
    if (connectionInfo.getConnectionColor() != null) {
      xml.addAttribute(RegistryConstants.ATTR_COLOR,connectionInfo.getConnectionColor());
    }
    if (connectionInfo.getKeepAliveInterval() > 0) {
      xml.addAttribute(RegistryConstants.ATTR_KEEP_ALIVE,connectionInfo.getKeepAliveInterval());
    }
    for (    Map.Entry<Object,Object> entry : connectionInfo.getProperties().entrySet()) {
      xml.startElement(RegistryConstants.TAG_PROPERTY);
      xml.addAttribute(RegistryConstants.ATTR_NAME,CommonUtils.toString(entry.getKey()));
      xml.addAttribute(RegistryConstants.ATTR_VALUE,CommonUtils.toString(entry.getValue()));
      xml.endElement();
    }
    for (    DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {
      DBRShellCommand command=connectionInfo.getEvent(eventType);
      xml.startElement(RegistryConstants.TAG_EVENT);
      xml.addAttribute(RegistryConstants.ATTR_TYPE,eventType.name());
      xml.addAttribute(RegistryConstants.ATTR_ENABLED,command.isEnabled());
      xml.addAttribute(RegistryConstants.ATTR_SHOW_PANEL,command.isShowProcessPanel());
      xml.addAttribute(RegistryConstants.ATTR_WAIT_PROCESS,command.isWaitProcessFinish());
      xml.addAttribute(RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT,command.isTerminateAtDisconnect());
      xml.addText(command.getCommand());
      xml.endElement();
    }
    for (    DBWHandlerConfiguration configuration : connectionInfo.getDeclaredHandlers()) {
      xml.startElement(RegistryConstants.TAG_NETWORK_HANDLER);
      xml.addAttribute(RegistryConstants.ATTR_TYPE,configuration.getType().name());
      xml.addAttribute(RegistryConstants.ATTR_ID,CommonUtils.notEmpty(configuration.getId()));
      xml.addAttribute(RegistryConstants.ATTR_ENABLED,configuration.isEnabled());
      xml.addAttribute(RegistryConstants.ATTR_USER,CommonUtils.notEmpty(configuration.getUserName()));
      xml.addAttribute(RegistryConstants.ATTR_SAVE_PASSWORD,configuration.isSavePassword());
      if (configuration.isSavePassword() && !CommonUtils.isEmpty(configuration.getPassword())) {
        String encPassword=configuration.getPassword();
        if (!CommonUtils.isEmpty(encPassword)) {
          try {
            encPassword=encrypter.encrypt(encPassword);
          }
 catch (          EncryptionException e) {
            log.error("Can't encrypt password. Save it as is",e);
          }
        }
        xml.addAttribute(RegistryConstants.ATTR_PASSWORD,encPassword);
      }
      for (      Map.Entry<String,String> entry : configuration.getProperties().entrySet()) {
        xml.startElement(RegistryConstants.TAG_PROPERTY);
        xml.addAttribute(RegistryConstants.ATTR_NAME,entry.getKey());
        xml.addAttribute(RegistryConstants.ATTR_VALUE,CommonUtils.notEmpty(entry.getValue()));
        xml.endElement();
      }
      xml.endElement();
    }
{
      DBPConnectionBootstrap bootstrap=connectionInfo.getBootstrap();
      xml.startElement(RegistryConstants.TAG_BOOTSTRAP);
      if (bootstrap.getDefaultAutoCommit() != null) {
        xml.addAttribute(RegistryConstants.ATTR_AUTOCOMMIT,bootstrap.getDefaultAutoCommit());
      }
      if (bootstrap.getDefaultTransactionIsolation() != null) {
        xml.addAttribute(RegistryConstants.ATTR_TXN_ISOLATION,bootstrap.getDefaultTransactionIsolation());
      }
      if (!CommonUtils.isEmpty(bootstrap.getDefaultObjectName())) {
        xml.addAttribute(RegistryConstants.ATTR_DEFAULT_OBJECT,bootstrap.getDefaultObjectName());
      }
      if (bootstrap.isIgnoreErrors()) {
        xml.addAttribute(RegistryConstants.ATTR_IGNORE_ERRORS,true);
      }
      for (      String query : bootstrap.getInitQueries()) {
        xml.startElement(RegistryConstants.TAG_QUERY);
        xml.addText(query);
        xml.endElement();
      }
      xml.endElement();
    }
    xml.endElement();
  }
{
    Collection<DataSourceDescriptor.FilterMapping> filterMappings=dataSource.getObjectFilters();
    if (!CommonUtils.isEmpty(filterMappings)) {
      xml.startElement(RegistryConstants.TAG_FILTERS);
      for (      DataSourceDescriptor.FilterMapping filter : filterMappings) {
        if (filter.defaultFilter != null) {
          saveObjectFiler(xml,filter.typeName,null,filter.defaultFilter);
        }
        for (        Map.Entry<String,DBSObjectFilter> cf : filter.customFilters.entrySet()) {
          saveObjectFiler(xml,filter.typeName,cf.getKey(),cf.getValue());
        }
      }
      xml.endElement();
    }
  }
  if (dataSource.getVirtualModel().hasValuableData()) {
    xml.startElement(RegistryConstants.TAG_VIRTUAL_META_DATA);
    dataSource.getVirtualModel().serialize(xml);
    xml.endElement();
  }
{
    SimplePreferenceStore prefStore=dataSource.getPreferenceStore();
    for (    String propName : prefStore.preferenceNames()) {
      String propValue=prefStore.getString(propName);
      String defValue=prefStore.getDefaultString(propName);
      if (propValue == null) {
        continue;
      }
      xml.startElement(RegistryConstants.TAG_CUSTOM_PROPERTY);
      xml.addAttribute(RegistryConstants.ATTR_NAME,propName);
      xml.addAttribute(RegistryConstants.ATTR_VALUE,propValue);
      xml.endElement();
    }
  }
  xml.endElement();
}
