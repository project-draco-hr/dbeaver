{
  isDescription=false;
  curCommand=null;
  if (localName.equals(RegistryConstants.TAG_DATA_SOURCE)) {
    String name=atts.getValue(RegistryConstants.ATTR_NAME);
    String id=atts.getValue(RegistryConstants.ATTR_ID);
    if (id == null) {
      id=name;
    }
    String providerId=atts.getValue(RegistryConstants.ATTR_PROVIDER);
    DataSourceProviderDescriptor provider=DataSourceProviderRegistry.getInstance().getDataSourceProvider(providerId);
    if (provider == null) {
      log.warn("Can't find datasource provider " + providerId + " for datasource '"+ name+ "'");
      curDataSource=null;
      reader.setListener(EMPTY_LISTENER);
      return;
    }
    String driverId=atts.getValue(RegistryConstants.ATTR_DRIVER);
    DriverDescriptor driver=provider.getDriver(driverId);
    if (driver == null) {
      log.warn("Can't find driver " + driverId + " in datasource provider "+ provider.getId()+ " for datasource '"+ name+ "'. Create new driver");
      driver=provider.createDriver(driverId);
      provider.addDriver(driver);
    }
    curDataSource=new DataSourceDescriptor(DataSourceRegistry.this,id,driver,new DBPConnectionConfiguration());
    curDataSource.setName(name);
    String createDate=atts.getValue(RegistryConstants.ATTR_CREATE_DATE);
    if (!CommonUtils.isEmpty(createDate)) {
      curDataSource.setCreateDate(new Date(Long.parseLong(createDate)));
    }
    String updateDate=atts.getValue(RegistryConstants.ATTR_UPDATE_DATE);
    if (!CommonUtils.isEmpty(updateDate)) {
      curDataSource.setUpdateDate(new Date(Long.parseLong(updateDate)));
    }
    String loginDate=atts.getValue(RegistryConstants.ATTR_LOGIN_DATE);
    if (!CommonUtils.isEmpty(loginDate)) {
      curDataSource.setLoginDate(new Date(Long.parseLong(loginDate)));
    }
    curDataSource.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));
    curDataSource.setShowSystemObjects(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS)));
    curDataSource.setConnectionReadOnly(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_READ_ONLY)));
    curDataSource.setFolderPath(atts.getValue(RegistryConstants.ATTR_FOLDER));
{
      String legacyCatalogFilter=atts.getValue(RegistryConstants.ATTR_FILTER_CATALOG);
      if (!CommonUtils.isEmpty(legacyCatalogFilter)) {
        curDataSource.updateObjectFilter(DBSCatalog.class,null,new DBSObjectFilter(legacyCatalogFilter,null));
      }
      String legacySchemaFilter=atts.getValue(RegistryConstants.ATTR_FILTER_SCHEMA);
      if (!CommonUtils.isEmpty(legacySchemaFilter)) {
        curDataSource.updateObjectFilter(DBSSchema.class,null,new DBSObjectFilter(legacySchemaFilter,null));
      }
    }
    dataSources.add(curDataSource);
  }
 else   if (localName.equals(RegistryConstants.TAG_CONNECTION)) {
    if (curDataSource != null) {
      DriverDescriptor driver=curDataSource.getDriver();
      if (CommonUtils.isEmpty(driver.getName())) {
        driver.setName(atts.getValue(RegistryConstants.ATTR_URL));
        driver.setDriverClassName("java.sql.Driver");
      }
      curDataSource.getConnectionConfiguration().setHostName(atts.getValue(RegistryConstants.ATTR_HOST));
      curDataSource.getConnectionConfiguration().setHostPort(atts.getValue(RegistryConstants.ATTR_PORT));
      curDataSource.getConnectionConfiguration().setServerName(atts.getValue(RegistryConstants.ATTR_SERVER));
      curDataSource.getConnectionConfiguration().setDatabaseName(atts.getValue(RegistryConstants.ATTR_DATABASE));
      curDataSource.getConnectionConfiguration().setUrl(atts.getValue(RegistryConstants.ATTR_URL));
      curDataSource.getConnectionConfiguration().setUserName(atts.getValue(RegistryConstants.ATTR_USER));
      curDataSource.getConnectionConfiguration().setUserPassword(decryptPassword(atts.getValue(RegistryConstants.ATTR_PASSWORD)));
      curDataSource.getConnectionConfiguration().setClientHomeId(atts.getValue(RegistryConstants.ATTR_HOME));
      curDataSource.getConnectionConfiguration().setConnectionType(DataSourceProviderRegistry.getInstance().getConnectionType(CommonUtils.toString(atts.getValue(RegistryConstants.ATTR_TYPE)),DBPConnectionType.DEFAULT_TYPE));
      String colorValue=atts.getValue(RegistryConstants.ATTR_COLOR);
      if (!CommonUtils.isEmpty(colorValue)) {
        curDataSource.getConnectionConfiguration().setConnectionColor(colorValue);
      }
      curDataSource.refreshConnectionInfo();
    }
  }
 else   if (localName.equals(RegistryConstants.TAG_PROPERTY)) {
    if (curNetworkHandler != null) {
      curNetworkHandler.getProperties().put(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));
    }
 else     if (curDataSource != null) {
      curDataSource.getConnectionConfiguration().setProperty(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));
    }
  }
 else   if (localName.equals(RegistryConstants.TAG_EVENT)) {
    if (curDataSource != null) {
      DBPConnectionEventType eventType=DBPConnectionEventType.valueOf(atts.getValue(RegistryConstants.ATTR_TYPE));
      curCommand=new DBRShellCommand("");
      curCommand.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));
      curCommand.setShowProcessPanel(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SHOW_PANEL)));
      curCommand.setWaitProcessFinish(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_WAIT_PROCESS)));
      curCommand.setTerminateAtDisconnect(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT)));
      curDataSource.getConnectionConfiguration().setEvent(eventType,curCommand);
    }
  }
 else   if (localName.equals(RegistryConstants.TAG_CUSTOM_PROPERTY)) {
    if (curDataSource != null) {
      curDataSource.getPreferenceStore().getProperties().put(atts.getValue(RegistryConstants.ATTR_NAME),atts.getValue(RegistryConstants.ATTR_VALUE));
    }
  }
 else   if (localName.equals(RegistryConstants.TAG_NETWORK_HANDLER)) {
    if (curDataSource != null) {
      String handlerId=atts.getValue(RegistryConstants.ATTR_ID);
      NetworkHandlerDescriptor handlerDescriptor=NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);
      if (handlerDescriptor == null) {
        log.warn("Can't find network handler '" + handlerId + "'");
        reader.setListener(EMPTY_LISTENER);
        return;
      }
      curNetworkHandler=new DBWHandlerConfiguration(handlerDescriptor,curDataSource.getDriver());
      curNetworkHandler.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED)));
      curNetworkHandler.setUserName(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_USER)));
      curNetworkHandler.setSavePassword(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_SAVE_PASSWORD)));
      curNetworkHandler.setPassword(decryptPassword(atts.getValue(RegistryConstants.ATTR_PASSWORD)));
      curDataSource.getConnectionConfiguration().addHandler(curNetworkHandler);
    }
  }
 else   if (localName.equals(RegistryConstants.TAG_FILTER)) {
    if (curDataSource != null) {
      String typeName=atts.getValue(RegistryConstants.ATTR_TYPE);
      String objectID=atts.getValue(RegistryConstants.ATTR_ID);
      Class<? extends DBSObject> objectClass=curDataSource.getDriver().getObjectClass(typeName,DBSObject.class);
      if (objectClass != null) {
        curFilter=new DBSObjectFilter();
        curFilter.setName(atts.getValue(RegistryConstants.ATTR_NAME));
        curFilter.setDescription(atts.getValue(RegistryConstants.ATTR_DESCRIPTION));
        curFilter.setEnabled(CommonUtils.getBoolean(atts.getValue(RegistryConstants.ATTR_ENABLED),true));
        curDataSource.updateObjectFilter(objectClass,objectID,curFilter);
      }
    }
  }
 else   if (localName.equals(RegistryConstants.TAG_INCLUDE)) {
    if (curFilter != null) {
      curFilter.addInclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));
    }
  }
 else   if (localName.equals(RegistryConstants.TAG_EXCLUDE)) {
    if (curFilter != null) {
      curFilter.addExclude(CommonUtils.notEmpty(atts.getValue(RegistryConstants.ATTR_NAME)));
    }
  }
 else   if (localName.equals(RegistryConstants.TAG_DESCRIPTION)) {
    isDescription=true;
  }
 else   if (localName.equals(RegistryConstants.TAG_VIRTUAL_META_DATA)) {
    if (curDataSource != null) {
      reader.setListener(curDataSource.getVirtualModel().getModelParser());
    }
  }
}
