{
  IConfigurationElement[] items=parent.getChildren();
  for (int i=0; i < items.length; i++) {
    final IConfigurationElement child=items[i];
    String itemType=child.getName();
    String id=MenuHelper.getId(child);
    if (IWorkbenchRegistryConstants.TAG_COMMAND.equals(itemType)) {
      MMenuElement element=createMenuCommandAddition(child);
      container.getChildren().add(element);
    }
 else     if (IWorkbenchRegistryConstants.TAG_SEPARATOR.equals(itemType)) {
      MMenuElement element=createMenuSeparatorAddition(child);
      container.getChildren().add(element);
    }
 else     if (IWorkbenchRegistryConstants.TAG_MENU.equals(itemType)) {
      MMenu element=createMenuAddition(child,filter);
      container.getChildren().add(element);
    }
 else     if (IWorkbenchRegistryConstants.TAG_TOOLBAR.equals(itemType)) {
      System.out.println("Toolbar: " + id + " in "+ location);
    }
 else     if (IWorkbenchRegistryConstants.TAG_DYNAMIC.equals(itemType)) {
      ContextFunction generator=new ContextFunction(){
        @Override public Object compute(        IEclipseContext context,        String contextKey){
          ServiceLocator sl=new ServiceLocator();
          sl.setContext(context);
          DynamicMenuContributionItem item=new DynamicMenuContributionItem(MenuHelper.getId(child),sl,child);
          return item;
        }
      }
;
      MRenderedMenuItem menuItem=MenuFactoryImpl.eINSTANCE.createRenderedMenuItem();
      menuItem.setElementId(id);
      menuItem.setContributionItem(generator);
      menuItem.setVisibleWhen(MenuHelper.getVisibleWhen(child));
      container.getChildren().add(menuItem);
    }
  }
}
