{
  this.documentOffset=documentOffset;
  this.activeQuery=null;
  this.wordDetector=new SQLWordPartDetector(viewer.getDocument(),editor.getSyntaxManager(),documentOffset);
  final List<ICompletionProposal> proposals=new ArrayList<ICompletionProposal>();
  final String wordPart=wordDetector.getWordPart();
  QueryType queryType=null;
{
    final String prevKeyWord=wordDetector.getPrevKeyWord();
    if (!CommonUtils.isEmpty(prevKeyWord)) {
      if (editor.getSyntaxManager().getDialect().isEntityQueryWord(prevKeyWord)) {
        queryType=QueryType.TABLE;
      }
 else       if (editor.getSyntaxManager().getDialect().isAttributeQueryWord(prevKeyWord)) {
        queryType=QueryType.COLUMN;
      }
    }
  }
  if (queryType != null) {
    if (editor.getDataSource() != null) {
      try {
        final QueryType qt=queryType;
        DBeaverUI.runInProgressService(new DBRRunnableWithProgress(){
          @Override public void run(          DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            makeStructureProposals(monitor,proposals,wordPart,qt);
          }
        }
);
      }
 catch (      InvocationTargetException e) {
        log.warn("Error while seeking for structure proposals",e.getTargetException());
      }
catch (      InterruptedException e) {
      }
    }
  }
  if (proposals.isEmpty() || !wordPart.isEmpty()) {
    List<String> matchedKeywords=editor.getSyntaxManager().getDialect().getMatchedKeywords(wordPart);
    for (    String keyWord : matchedKeywords) {
      DBPKeywordType keywordType=editor.getSyntaxManager().getDialect().getKeywordType(keyWord);
      proposals.add(createCompletionProposal(keyWord,keyWord,keyWord + " (" + keywordType.name()+ ")",null,false));
    }
  }
  for (int i=0; i < proposals.size(); i++) {
    ICompletionProposal proposal=proposals.get(i);
    for (int j=i + 1; j < proposals.size(); ) {
      ICompletionProposal proposal2=proposals.get(j);
      if (proposal.getDisplayString().equals(proposal2.getDisplayString())) {
        proposals.remove(j);
      }
 else {
        j++;
      }
    }
  }
  return proposals.toArray(new ICompletionProposal[proposals.size()]);
}
