{
  this.documentOffset=documentOffset;
  this.activeQuery=null;
  this.wordDetector=new SQLWordPartDetector(viewer.getDocument(),editor.getSyntaxManager(),documentOffset);
  final String wordPart=wordDetector.getWordPart();
  if (lookupTemplates) {
    return makeTemplateProposals(viewer,documentOffset,wordPart);
  }
  final List<SQLCompletionProposal> proposals=new ArrayList<>();
  QueryType queryType=null;
{
    final String prevKeyWord=wordDetector.getPrevKeyWord();
    if (!CommonUtils.isEmpty(prevKeyWord)) {
      if (editor.getSyntaxManager().getDialect().isEntityQueryWord(prevKeyWord)) {
        if (SQLConstants.KEYWORD_INTO.equals(prevKeyWord) && !CommonUtils.isEmpty(wordDetector.getPrevWords()) && ("(".equals(wordDetector.getPrevDelimiter()) || ",".equals(wordDetector.getPrevDelimiter()))) {
          queryType=QueryType.COLUMN;
        }
 else {
          queryType=QueryType.TABLE;
        }
      }
 else       if (editor.getSyntaxManager().getDialect().isAttributeQueryWord(prevKeyWord)) {
        queryType=QueryType.COLUMN;
      }
    }
  }
  if (queryType != null && wordPart != null) {
    if (editor.getDataSource() != null) {
      ProposalSearchJob searchJob=new ProposalSearchJob(proposals,wordPart,queryType);
      searchJob.schedule();
      Display display=Display.getCurrent();
      while (!searchJob.finished) {
        if (!display.readAndDispatch()) {
          display.sleep();
        }
      }
      display.update();
    }
  }
  if (!CommonUtils.isEmpty(wordPart)) {
    List<String> matchedKeywords=editor.getSyntaxManager().getDialect().getMatchedKeywords(wordPart);
    Collections.sort(matchedKeywords,new Comparator<String>(){
      @Override public int compare(      String o1,      String o2){
        return TextUtils.fuzzyScore(o1,wordPart) - TextUtils.fuzzyScore(o2,wordPart);
      }
    }
);
    for (    String keyWord : matchedKeywords) {
      DBPKeywordType keywordType=editor.getSyntaxManager().getDialect().getKeywordType(keyWord);
      if (keywordType != null) {
        proposals.add(createCompletionProposal(keyWord,keyWord,keyWord + " (" + keywordType.name()+ ")",null,false,null));
      }
    }
  }
  for (int i=0; i < proposals.size(); i++) {
    SQLCompletionProposal proposal=proposals.get(i);
    for (int j=i + 1; j < proposals.size(); ) {
      SQLCompletionProposal proposal2=proposals.get(j);
      if (proposal.getDisplayString().equals(proposal2.getDisplayString())) {
        proposals.remove(j);
      }
 else {
        j++;
      }
    }
  }
  DBSObject selectedObject=DBUtils.getSelectedObject(editor.getDataSource(),true);
  boolean hideDups=getPreferences().getBoolean(SQLPreferenceConstants.HIDE_DUPLICATE_PROPOSALS) && selectedObject != null;
  if (hideDups) {
    for (int i=0; i < proposals.size(); i++) {
      SQLCompletionProposal proposal=proposals.get(i);
      for (int j=0; j < proposals.size(); ) {
        SQLCompletionProposal proposal2=proposals.get(j);
        if (i != j && proposal.hasStructObject() && proposal2.hasStructObject() && CommonUtils.equalObjects(proposal.getObject().getName(),proposal2.getObject().getName()) && proposal.getObjectContainer() == selectedObject) {
          proposals.remove(j);
        }
 else {
          j++;
        }
      }
    }
  }
  if (hideDups) {
    if (selectedObject instanceof DBSObjectContainer) {
    }
  }
  return proposals.toArray(new ICompletionProposal[proposals.size()]);
}
