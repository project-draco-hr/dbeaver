{
  if (startPart != null) {
    startPart=wordDetector.removeQuotes(startPart).toUpperCase();
    int divPos=startPart.lastIndexOf(editor.getSyntaxManager().getStructSeparator());
    if (divPos != -1) {
      startPart=startPart.substring(divPos + 1);
    }
  }
  try {
    Collection<? extends DBSObject> children=null;
    if (parent instanceof DBSObjectContainer) {
      children=((DBSObjectContainer)parent).getChildren(monitor);
    }
 else     if (parent instanceof DBSEntity) {
      children=((DBSEntity)parent).getAttributes(monitor);
    }
    if (children != null && !children.isEmpty()) {
      List<DBSObject> matchedObjects=new ArrayList<>();
      final Map<String,Integer> scoredMatches=new HashMap<>();
      for (      DBSObject child : children) {
        if (child instanceof DBPHiddenObject && ((DBPHiddenObject)child).isHidden()) {
          continue;
        }
        int score=startPart == null ? 1 : TextUtils.fuzzyScore(child.getName(),startPart,Locale.getDefault());
        if (score > 0) {
          matchedObjects.add(child);
          scoredMatches.put(child.getName(),score);
        }
      }
      if (!matchedObjects.isEmpty()) {
        Collections.sort(matchedObjects,new Comparator<DBSObject>(){
          @Override public int compare(          DBSObject o1,          DBSObject o2){
            int score1=scoredMatches.get(o1.getName());
            int score2=scoredMatches.get(o2.getName());
            return score2 - score1;
          }
        }
);
        for (        DBSObject child : matchedObjects) {
          proposals.add(makeProposalsFromObject(monitor,child));
        }
      }
    }
  }
 catch (  DBException e) {
    log.error(e);
  }
}
