{
  final DBPDataSource dataSource=editor.getDataSource();
  if (dataSource == null) {
    return null;
  }
  if (activeQuery == null) {
    activeQuery=editor.extractQueryAtPos(documentOffset).getQuery() + " ";
  }
  final List<String> nameList=new ArrayList<String>();
  if (token == null) {
    token="";
  }
{
    Matcher matcher;
    Pattern aliasPattern;
    DBPDataSourceInfo dataSourceInfo=dataSource.getInfo();
    String quoteString=dataSourceInfo.getIdentifierQuoteString();
    if (quoteString == null) {
      quoteString=SQLConstants.STR_QUOTE_DOUBLE;
    }
    String quote=Pattern.quote(quoteString);
    String catalogSeparator=dataSourceInfo.getCatalogSeparator();
    if (catalogSeparator == null) {
      catalogSeparator=String.valueOf(SQLConstants.STRUCT_SEPARATOR);
    }
    while (token.endsWith(catalogSeparator))     token=token.substring(0,token.length() - 1);
    String tableNamePattern="((?:" + quote + "(?:[.[^"+ quote+ "]]+)"+ quote+ ")|(?:[\\w"+ Pattern.quote(catalogSeparator)+ "]+))";
    String structNamePattern;
    if (CommonUtils.isEmpty(token)) {
      structNamePattern="(?:from|update|join|into)\\s*" + tableNamePattern;
    }
 else {
      structNamePattern=tableNamePattern + "(?:\\s*\\.\\s*" + tableNamePattern+ ")?"+ "\\s+(?:(?:AS)\\s)?"+ token+ "[\\s,]+";
    }
    try {
      aliasPattern=Pattern.compile(structNamePattern,Pattern.CASE_INSENSITIVE);
    }
 catch (    PatternSyntaxException e) {
      return null;
    }
    matcher=aliasPattern.matcher(activeQuery);
    if (!matcher.find()) {
      return null;
    }
    int groupCount=matcher.groupCount();
    for (int i=1; i <= groupCount; i++) {
      String group=matcher.group(i);
      if (!CommonUtils.isEmpty(group)) {
        String[] allNames=group.split(Pattern.quote(catalogSeparator));
        for (        String name : allNames) {
          if (name.startsWith(quoteString) && name.endsWith(quoteString)) {
            name=name.substring(1,name.length() - 1);
          }
          nameList.add(name);
        }
      }
    }
  }
  if (nameList.isEmpty()) {
    return null;
  }
  for (int i=0; i < nameList.size(); i++) {
    nameList.set(i,DBObjectNameCaseTransformer.transformName(sc.getDataSource(),nameList.get(i)));
  }
  try {
    DBSObject childObject=null;
    while (childObject == null) {
      childObject=DBUtils.findNestedObject(monitor,sc,nameList);
      if (childObject == null) {
        DBSObjectContainer parentSc=DBUtils.getParentAdapter(DBSObjectContainer.class,sc);
        if (parentSc == null) {
          break;
        }
        sc=parentSc;
      }
    }
    if (childObject == null && nameList.size() <= 1) {
      DBSStructureAssistant structureAssistant=DBUtils.getAdapter(DBSStructureAssistant.class,sc);
      if (structureAssistant != null) {
        String objectNameMask=nameList.get(0);
        Collection<DBSObjectReference> tables=structureAssistant.findObjectsByMask(monitor,sc,structureAssistant.getAutoCompleteObjectTypes(),wordDetector.removeQuotes(objectNameMask),wordDetector.isQuoted(objectNameMask),2);
        if (!tables.isEmpty()) {
          return tables.iterator().next().resolveObject(monitor);
        }
      }
      return null;
    }
 else {
      return childObject;
    }
  }
 catch (  DBException e) {
    log.error(e);
    return null;
  }
}
