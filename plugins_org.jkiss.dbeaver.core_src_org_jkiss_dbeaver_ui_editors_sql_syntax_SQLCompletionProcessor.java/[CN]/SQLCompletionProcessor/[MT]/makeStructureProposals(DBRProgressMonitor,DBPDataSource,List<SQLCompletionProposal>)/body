{
  final DBSObjectContainer rootContainer=DBUtils.getAdapter(DBSObjectContainer.class,dataSource);
  if (rootContainer == null) {
    return;
  }
  DBSObjectContainer sc=rootContainer;
  DBSObject childObject=sc;
  List<String> tokens=wordDetector.splitWordPart();
  DBSObjectContainer selectedContainers[];
{
    DBSObject[] selectedObjects=DBUtils.getSelectedObjects(dataSource);
    selectedContainers=new DBSObjectContainer[selectedObjects.length];
    for (int i=0; i < selectedObjects.length; i++) {
      selectedContainers[i]=DBUtils.getAdapter(DBSObjectContainer.class,selectedObjects[i]);
    }
  }
  String lastToken=null;
  for (int i=0; i < tokens.size(); i++) {
    String token=tokens.get(i);
    if (i == tokens.size() - 1 && !wordDetector.getWordPart().endsWith(".")) {
      lastToken=token;
      break;
    }
    if (sc == null) {
      break;
    }
    try {
      token=DBUtils.getUnQuotedIdentifier(dataSource,token);
      String objectName=DBObjectNameCaseTransformer.transformName(dataSource,token);
      childObject=sc.getChild(monitor,objectName);
      if (childObject == null && i == 0) {
        for (int k=0; k < selectedContainers.length; k++) {
          if (selectedContainers[k] != null) {
            childObject=selectedContainers[k].getChild(monitor,objectName);
            if (childObject != null) {
              sc=selectedContainers[k];
              break;
            }
          }
        }
      }
      if (childObject == null) {
        if (i == 0) {
          childObject=this.getTableFromAlias(monitor,sc,token);
          if (childObject == null && !isSimpleMode()) {
            DBSStructureAssistant structureAssistant=DBUtils.getAdapter(DBSStructureAssistant.class,sc);
            if (structureAssistant != null) {
              Collection<DBSObjectReference> references=structureAssistant.findObjectsByMask(monitor,null,structureAssistant.getAutoCompleteObjectTypes(),wordDetector.removeQuotes(token),wordDetector.isQuoted(token),false,2);
              if (!references.isEmpty()) {
                childObject=references.iterator().next().resolveObject(monitor);
              }
            }
          }
        }
 else {
          return;
        }
      }
      if (childObject instanceof DBSObjectContainer) {
        sc=(DBSObjectContainer)childObject;
      }
 else {
        sc=null;
      }
    }
 catch (    DBException e) {
      log.error(e);
      return;
    }
  }
  if (childObject == null) {
    return;
  }
  if (lastToken == null) {
    makeProposalsFromChildren(monitor,childObject,null,proposals);
  }
 else {
    makeProposalsFromChildren(monitor,childObject,lastToken,proposals);
    if (tokens.size() == 1) {
    }
    if (proposals.isEmpty() || tokens.size() == 1) {
      for (int k=0; k < selectedContainers.length; k++) {
        if (selectedContainers[k] != null && selectedContainers[k] != childObject) {
          makeProposalsFromChildren(monitor,selectedContainers[k],lastToken,proposals);
        }
      }
      if (proposals.isEmpty() && !isSimpleMode()) {
        DBSStructureAssistant structureAssistant=null;
        for (DBSObject object=childObject; object != null; object=object.getParentObject()) {
          structureAssistant=DBUtils.getAdapter(DBSStructureAssistant.class,object);
          if (structureAssistant != null) {
            break;
          }
        }
        if (structureAssistant != null) {
          makeProposalsFromAssistant(monitor,structureAssistant,sc,lastToken,proposals);
        }
      }
    }
  }
}
