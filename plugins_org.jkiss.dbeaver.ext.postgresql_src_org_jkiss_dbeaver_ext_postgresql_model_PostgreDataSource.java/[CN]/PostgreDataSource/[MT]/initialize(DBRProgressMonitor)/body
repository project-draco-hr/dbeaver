{
  super.initialize(monitor);
  activeDatabaseName=getContainer().getConnectionConfiguration().getDatabaseName();
  try (JDBCSession session=DBUtils.openMetaSession(monitor,this,"Load meta info")){
    try {
      String serverVersionStr=JDBCUtils.queryString(session,"SHOW server_version");
      if (!CommonUtils.isEmpty(serverVersionStr)) {
        try {
          this.serverVersion=new Version(serverVersionStr);
        }
 catch (        Exception e) {
          log.debug("Can't parse server version [" + serverVersionStr + "]");
        }
      }
    }
 catch (    SQLException e) {
      log.debug(e);
    }
    try (JDBCPreparedStatement stat=session.prepareStatement("SELECT current_database(), current_schema(),session_user")){
      try (JDBCResultSet rs=stat.executeQuery()){
        rs.nextRow();
        activeDatabaseName=JDBCUtils.safeGetString(rs,1);
        activeSchemaName=JDBCUtils.safeGetString(rs,2);
        activeUser=JDBCUtils.safeGetString(rs,3);
      }
     }
 catch (    Exception e) {
      log.debug(e);
    }
    String searchPathStr=JDBCUtils.queryString(session,"SHOW search_path");
    if (searchPathStr != null) {
      for (      String str : searchPathStr.replace("$user",activeUser).split(",")) {
        this.searchPath.add(DBUtils.getUnQuotedIdentifier(str,"\""));
      }
    }
 else {
      this.searchPath.add(PostgreConstants.PUBLIC_SCHEMA_NAME);
    }
  }
 catch (  SQLException e) {
    log.error("Error reading connection meta info");
  }
  databaseCache.getAllObjects(monitor,this);
  getDefaultInstance().cacheDataTypes(monitor);
}
