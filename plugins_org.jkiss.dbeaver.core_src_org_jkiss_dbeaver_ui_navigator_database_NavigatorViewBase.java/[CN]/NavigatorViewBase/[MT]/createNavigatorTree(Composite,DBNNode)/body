{
  final DatabaseNavigatorTree navigatorTree=new DatabaseNavigatorTree(parent,rootNode,getTreeStyle());
  navigatorTree.getViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      onSelectionChange((IStructuredSelection)event.getSelection());
    }
  }
);
  navigatorTree.getViewer().addDoubleClickListener(new IDoubleClickListener(){
    @Override public void doubleClick(    DoubleClickEvent event){
      TreeViewer viewer=tree.getViewer();
      IStructuredSelection selection=(IStructuredSelection)viewer.getSelection();
      if (selection.size() == 1) {
        Object node=selection.getFirstElement();
        if (node instanceof DBNLocalFolder || (node instanceof DBNResource && ((DBNResource)node).getResource() instanceof IFolder) || (node instanceof DBNDataSource && DoubleClickBehavior.valueOf(DBeaverCore.getGlobalPreferenceStore().getString(DBeaverPreferences.NAVIGATOR_CONNECTION_DOUBLE_CLICK)) == DoubleClickBehavior.EXPAND)) {
          if (Boolean.TRUE.equals(viewer.getExpandedState(node))) {
            viewer.collapseToLevel(node,1);
          }
 else {
            viewer.expandToLevel(node,1);
          }
        }
 else         if (node instanceof DBNResource) {
          NavigatorHandlerObjectOpen.openResource(((DBNResource)node).getResource(),getSite().getWorkbenchWindow());
        }
 else         if (node instanceof DBNDataSource) {
          DBPDataSourceContainer dataSource=((DBNDataSource)node).getObject();
          NavigatorViewBase.DoubleClickBehavior doubleClickBehavior=NavigatorViewBase.DoubleClickBehavior.valueOf(DBeaverCore.getGlobalPreferenceStore().getString(DBeaverPreferences.NAVIGATOR_CONNECTION_DOUBLE_CLICK));
switch (doubleClickBehavior) {
case EDIT:
            NavigatorHandlerObjectOpen.openEntityEditor((DBNDataSource)node,null,DBeaverUI.getActiveWorkbenchWindow());
          break;
case CONNECT:
        if (dataSource.isConnected()) {
          DataSourceHandler.disconnectDataSource(dataSource,null);
        }
 else {
          DataSourceHandler.connectToDataSource(null,dataSource,null);
        }
      break;
case SQL_EDITOR:
    try {
      OpenHandler.openRecentScript(getSite().getWorkbenchWindow(),dataSource,null);
    }
 catch (    CoreException e) {
      UIUtils.showErrorDialog(navigatorTree.getShell(),"Open SQL editor","Can't open SQL editor",e);
    }
  break;
}
}
 else if (node instanceof DBNDatabaseNode && ((DBNDatabaseNode)node).allowsOpen()) {
NavigatorHandlerObjectOpen.openEntityEditor((DBNDatabaseNode)node,null,getSite().getWorkbenchWindow());
}
}
}
}
);
NavigatorUtils.addContextMenu(this.getSite(),navigatorTree.getViewer(),navigatorTree.getViewer().getControl());
NavigatorUtils.addDragAndDropSupport(navigatorTree.getViewer());
return navigatorTree;
}
