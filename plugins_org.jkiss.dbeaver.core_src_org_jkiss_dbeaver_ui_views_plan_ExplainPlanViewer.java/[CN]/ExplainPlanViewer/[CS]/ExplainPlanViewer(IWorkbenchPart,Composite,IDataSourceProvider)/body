{
  super();
  this.dataSourceProvider=dataSourceProvider;
  createActions();
  Composite composite=UIUtils.createPlaceholder(parent,1);
  this.planPanel=UIUtils.createPartDivider(workbenchPart,composite,SWT.HORIZONTAL | SWT.SMOOTH);
  this.planPanel.setLayoutData(new GridData(GridData.FILL_BOTH));
  this.planPanel.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  final GridLayout gl=new GridLayout(1,false);
  gl.marginWidth=0;
  gl.marginHeight=0;
  this.planPanel.setLayout(gl);
{
    leftPanel=UIUtils.createPartDivider(workbenchPart,planPanel,SWT.VERTICAL | SWT.SMOOTH);
    leftPanel.setLayoutData(new GridData(GridData.FILL_BOTH));
    this.planTree=new PlanNodesTree(leftPanel,SWT.SHEET){
      @Override protected void fillCustomToolbar(      ToolBarManager toolbarManager){
        toolbarManager.add(toggleViewAction);
        toolbarManager.add(refreshPlanAction);
      }
    }
;
    this.planTree.setShowDivider(true);
    this.planTree.createProgressPanel(composite);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalIndent=0;
    gd.verticalIndent=0;
    planTree.setLayoutData(gd);
    sqlText=new Text(leftPanel,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
    leftPanel.setWeights(new int[]{80,20});
    leftPanel.setMaximizedControl(planTree);
  }
{
    planProperties=new PropertyTreeViewer(planPanel,SWT.H_SCROLL | SWT.V_SCROLL);
  }
  planPanel.setWeights(new int[]{70,30});
  planTree.getControl().addPaintListener(new PaintListener(){
    @Override public void paintControl(    PaintEvent e){
      String message=null;
      if (planner == null) {
        if (getDataSource() != null) {
          message="Data provider doesn't support execution plan";
        }
 else {
          message=CoreMessages.editors_sql_status_not_connected_to_database;
        }
      }
 else       if (CommonUtils.isEmpty(sqlText.getText())) {
        message="Select a query and run " + ActionUtils.findCommandDescription(ICommandIds.CMD_EXPLAIN_PLAN,workbenchPart.getSite());
      }
      if (message != null) {
        Rectangle bounds=planTree.getBounds();
        Point ext=e.gc.textExtent(message);
        e.gc.drawText(message,(bounds.width - ext.x) / 2,bounds.height / 3 + 20);
      }
    }
  }
);
  planTree.getItemsViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      showPlanNode();
    }
  }
);
  this.planTree.getControl().addTraverseListener(new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (toggleViewAction.isEnabled() && (e.detail == SWT.TRAVERSE_TAB_NEXT || e.detail == SWT.TRAVERSE_TAB_PREVIOUS)) {
        toggleViewAction.run();
        e.doit=false;
        e.detail=SWT.TRAVERSE_NONE;
      }
    }
  }
);
}
