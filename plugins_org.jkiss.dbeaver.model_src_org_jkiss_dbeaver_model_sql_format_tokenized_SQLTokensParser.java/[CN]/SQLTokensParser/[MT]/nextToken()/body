{
  int start_pos=fPos;
  if (fPos >= fBefore.length()) {
    fPos++;
    return new FormatterToken(TokenType.END,"",start_pos);
  }
  char fChar=fBefore.charAt(fPos);
  if (isSpace(fChar)) {
    StringBuilder workString=new StringBuilder();
    for (; ; ) {
      workString.append(fChar);
      fChar=fBefore.charAt(fPos);
      if (!isSpace(fChar)) {
        return new FormatterToken(TokenType.SPACE,workString.toString(),start_pos);
      }
      fPos++;
      if (fPos >= fBefore.length()) {
        return new FormatterToken(TokenType.SPACE,workString.toString(),start_pos);
      }
    }
  }
 else   if (fChar == ';') {
    fPos++;
    return new FormatterToken(TokenType.SYMBOL,";",start_pos);
  }
 else   if (isDigit(fChar)) {
    StringBuilder s=new StringBuilder();
    while (isDigit(fChar) || fChar == '.') {
      s.append(fChar);
      fPos++;
      if (fPos >= fBefore.length()) {
        break;
      }
      fChar=fBefore.charAt(fPos);
    }
    return new FormatterToken(TokenType.VALUE,s.toString(),start_pos);
  }
 else   if (isLetter(fChar)) {
    StringBuilder s=new StringBuilder();
    while (isLetter(fChar) || isDigit(fChar) || fChar == '*' || structSeparator == fChar || catalogSeparator.indexOf(fChar) != -1) {
      s.append(fChar);
      fPos++;
      if (fPos >= fBefore.length()) {
        break;
      }
      fChar=fBefore.charAt(fPos);
    }
    String word=s.toString();
    if (commands.contains(word.toUpperCase(Locale.ENGLISH))) {
      s.setLength(0);
      for (; fPos < fBefore.length(); fPos++) {
        fChar=fBefore.charAt(fPos);
        if (fChar == '\n' || fChar == '\r') {
          break;
        }
 else {
          s.append(fChar);
        }
      }
      return new FormatterToken(TokenType.COMMAND,word + s.toString(),start_pos);
    }
    if (configuration.getSyntaxManager().getDialect().getKeywordType(word) != null) {
      return new FormatterToken(TokenType.KEYWORD,word,start_pos);
    }
    return new FormatterToken(TokenType.NAME,word,start_pos);
  }
 else   if (fChar == '-') {
    fPos++;
    char ch2=fBefore.charAt(fPos);
    if (ch2 != '-') {
      return new FormatterToken(TokenType.SYMBOL,"-",start_pos);
    }
    fPos++;
    StringBuilder s=new StringBuilder("--");
    for (; ; ) {
      fChar=fBefore.charAt(fPos);
      s.append(fChar);
      fPos++;
      if (fChar == '\n' || fPos >= fBefore.length()) {
        return new FormatterToken(TokenType.COMMENT,s.toString(),start_pos);
      }
    }
  }
 else   if (fChar == '/') {
    fPos++;
    char ch2=fBefore.charAt(fPos);
    if (ch2 != '*') {
      return new FormatterToken(TokenType.SYMBOL,"/",start_pos);
    }
    StringBuilder s=new StringBuilder("/*");
    fPos++;
    for (; ; ) {
      int ch0=fChar;
      fChar=fBefore.charAt(fPos);
      s.append(fChar);
      fPos++;
      if (ch0 == '*' && fChar == '/') {
        return new FormatterToken(TokenType.COMMENT,s.toString(),start_pos);
      }
    }
  }
 else {
    if (fChar == '\'' || fChar == '\"' || (quoteSymbol != null && !quoteSymbol.isEmpty() && fChar == quoteSymbol.charAt(0))) {
      fPos++;
      char quoteChar=fChar;
      StringBuilder s=new StringBuilder(String.valueOf(quoteChar));
      for (; ; ) {
        fChar=fBefore.charAt(fPos);
        s.append(fChar);
        fPos++;
        if (fChar == quoteChar) {
          return new FormatterToken(TokenType.VALUE,s.toString(),start_pos);
        }
      }
    }
 else     if (isSymbol(fChar)) {
      String s=String.valueOf(fChar);
      fPos++;
      if (fPos >= fBefore.length()) {
        return new FormatterToken(TokenType.SYMBOL,s,start_pos);
      }
      char ch2=fBefore.charAt(fPos);
      for (int i=0; i < twoCharacterSymbol.length; i++) {
        if (twoCharacterSymbol[i].charAt(0) == fChar && twoCharacterSymbol[i].charAt(1) == ch2) {
          fPos++;
          s+=ch2;
          break;
        }
      }
      return new FormatterToken(TokenType.SYMBOL,s,start_pos);
    }
 else {
      fPos++;
      return new FormatterToken(TokenType.UNKNOWN,String.valueOf(fChar),start_pos);
    }
  }
}
