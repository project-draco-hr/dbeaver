{
  getShell().setText(OracleMessages.views_oracle_compiler_dialog_title);
  GridData gd;
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(2,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
{
    Composite unitsGroup=new Composite(composite,SWT.NONE);
    gd=new GridData(GridData.FILL_BOTH);
    gd.widthHint=250;
    gd.heightHint=200;
    gd.verticalIndent=0;
    gd.horizontalIndent=0;
    unitsGroup.setLayoutData(gd);
    unitsGroup.setLayout(new GridLayout(1,false));
    unitTable=new TableViewer(unitsGroup,SWT.BORDER | SWT.MULTI | SWT.V_SCROLL| SWT.H_SCROLL| SWT.FULL_SELECTION);
{
      final Table table=unitTable.getTable();
      table.setLayoutData(new GridData(GridData.FILL_BOTH));
      table.setLinesVisible(true);
      table.setHeaderVisible(true);
    }
    final TableViewerColumn pathColumn=UIUtils.createTableViewerColumn(unitTable,SWT.NONE,OracleMessages.views_oracle_compiler_dialog_column_name);
    pathColumn.setLabelProvider(new CellLabelProvider(){
      @Override public void update(      ViewerCell cell){
        DBSObject unit=(DBSObject)cell.getElement();
        final DBNDatabaseNode node=DBeaverCore.getInstance().getNavigatorModel().getNodeByObject(unit);
        if (node != null) {
          cell.setText(node.getNodeName());
          cell.setImage(node.getNodeIconDefault());
        }
 else {
          cell.setText(unit.toString());
        }
      }
    }
);
    final TableViewerColumn versionColumn=UIUtils.createTableViewerColumn(unitTable,SWT.NONE,OracleMessages.views_oracle_compiler_dialog_column_type);
    versionColumn.setLabelProvider(new CellLabelProvider(){
      @Override public void update(      ViewerCell cell){
        DBSObject unit=(DBSObject)cell.getElement();
        final DBNDatabaseNode node=DBeaverCore.getInstance().getNavigatorModel().getNodeByObject(unit);
        if (node != null) {
          cell.setText(node.getNodeType());
        }
 else {
          cell.setText("???");
        }
      }
    }
);
    unitTable.addSelectionChangedListener(new ISelectionChangedListener(){
      @Override public void selectionChanged(      SelectionChangedEvent event){
        IStructuredSelection selection=(IStructuredSelection)event.getSelection();
        getButton(COMPILE_ID).setEnabled(!selection.isEmpty());
      }
    }
);
    unitTable.addDoubleClickListener(new IDoubleClickListener(){
      @Override public void doubleClick(      DoubleClickEvent event){
        IStructuredSelection selection=(IStructuredSelection)event.getSelection();
        if (!selection.isEmpty()) {
          OracleSourceObject unit=(OracleSourceObject)selection.getFirstElement();
          NavigatorHandlerObjectOpen.openEntityEditor(unit);
        }
      }
    }
);
    unitTable.setContentProvider(new ListContentProvider());
    unitTable.setInput(compileUnits);
    UIUtils.packColumns(unitTable.getTable());
  }
{
    Composite infoGroup=new Composite(composite,SWT.NONE);
    gd=new GridData(GridData.FILL_BOTH);
    gd.widthHint=400;
    gd.heightHint=200;
    gd.verticalIndent=0;
    gd.horizontalIndent=0;
    infoGroup.setLayoutData(gd);
    infoGroup.setLayout(new GridLayout(1,false));
    compileLog=new ObjectCompilerLogViewer(infoGroup);
    compileLog.setLevel(ObjectCompilerLogViewer.LOG_LEVEL_ALL);
  }
  return composite;
}
