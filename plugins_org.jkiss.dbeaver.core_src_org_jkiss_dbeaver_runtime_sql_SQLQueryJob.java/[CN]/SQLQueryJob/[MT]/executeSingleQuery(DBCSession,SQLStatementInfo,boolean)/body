{
  lastError=null;
  if (fireEvents && listener != null) {
    listener.onStartQuery(sqlStatement);
  }
  long startTime=System.currentTimeMillis();
  String sqlQuery=sqlStatement.getQuery();
  if (dataFilter != null && dataFilter.hasFilters()) {
    StringBuilder modifiedQuery=new StringBuilder(sqlQuery.length() + 100);
    modifiedQuery.append("SELECT * FROM (\n");
    modifiedQuery.append(sqlQuery);
    modifiedQuery.append("\n) ").append(NESTED_QUERY_AlIAS);
    if (dataFilter.hasConditions()) {
      modifiedQuery.append(" WHERE ");
      dataFilter.appendConditionString(getDataSource(),NESTED_QUERY_AlIAS,modifiedQuery);
    }
    if (dataFilter.hasOrdering()) {
      modifiedQuery.append(" ORDER BY ");
      dataFilter.appendOrderString(getDataSource(),NESTED_QUERY_AlIAS,modifiedQuery);
    }
    sqlQuery=modifiedQuery.toString();
  }
  statistics.setQueryText(sqlQuery);
  SQLQueryResult curResult=new SQLQueryResult(sqlStatement);
  if (rsOffset > 0) {
    curResult.setRowOffset(rsOffset);
  }
  try {
    closeStatement();
    if (!connectionInvalidated && getDataSource().getContainer().getPreferenceStore().getBoolean(PrefConstants.STATEMENT_INVALIDATE_BEFORE_EXECUTE)) {
      getDataSource().invalidateContext(session.getProgressMonitor());
      connectionInvalidated=true;
    }
    boolean hasParameters=false;
    if (!CommonUtils.isEmpty(sqlStatement.getParameters())) {
      List<SQLStatementParameter> unresolvedParams=new ArrayList<SQLStatementParameter>();
      for (      SQLStatementParameter param : sqlStatement.getParameters()) {
        if (!param.isResolved()) {
          unresolvedParams.add(param);
        }
      }
      if (!CommonUtils.isEmpty(unresolvedParams)) {
        hasParameters=bindStatementParameters(unresolvedParams);
      }
 else {
        hasParameters=true;
      }
    }
    curStatement=DBUtils.prepareStatement(session,hasParameters ? DBCStatementType.QUERY : DBCStatementType.SCRIPT,sqlQuery,rsOffset,rsMaxRows);
    curStatement.setSource(editor);
    if (hasParameters) {
      for (      SQLStatementParameter param : sqlStatement.getParameters()) {
        if (param.isResolved()) {
          param.getValueHandler().bindValueObject(session,curStatement,param,param.getIndex(),param.getValue());
        }
      }
    }
    try {
      boolean hasResultSet=curStatement.executeStatement();
      curResult.setHasResultSet(hasResultSet);
      statistics.addExecuteTime(System.currentTimeMillis() - startTime);
      statistics.addStatementsCount();
      int resultSetNumber=0;
      boolean hasMoreResults=true;
      while (hasMoreResults) {
        if (fetchResultSetNumber < 0 || fetchResultSetNumber == resultSetNumber) {
          DBDDataReceiver dataReceiver=resultsConsumer.getDataReceiver(sqlStatement,resultSetNumber);
          if (fetchResultSets) {
            hasResultSet=fetchQueryData(session,curStatement.openResultSet(),curResult,dataReceiver,true);
          }
          long updateCount=-1;
          if (!hasResultSet) {
            try {
              updateCount=curStatement.getUpdateRowCount();
              if (updateCount >= 0) {
                curResult.setUpdateCount(updateCount);
                statistics.addRowsUpdated(updateCount);
              }
            }
 catch (            DBCException e) {
              log.warn("Can't obtain update count",e);
            }
            if (fetchResultSets) {
              fetchExecutionResult(session,dataReceiver);
            }
          }
          if (!hasResultSet && updateCount < 0) {
            break;
          }
        }
        hasMoreResults=curStatement.nextResults();
        if (hasMoreResults) {
          resultSetNumber++;
        }
      }
    }
  finally {
      if (!keepStatementOpen()) {
        closeStatement();
      }
      if (!CommonUtils.isEmpty(sqlStatement.getParameters())) {
        for (        SQLStatementParameter param : sqlStatement.getParameters()) {
          if (param.isResolved()) {
            param.getValueHandler().releaseValueObject(param.getValue());
          }
        }
      }
    }
  }
 catch (  DBCException ex) {
    curResult.setError(ex);
    lastError=ex;
  }
catch (  Throwable ex) {
    log.error("Unexpected error while processing SQL",ex);
  }
  curResult.setQueryTime(System.currentTimeMillis() - startTime);
  if (fireEvents && listener != null) {
    listener.onEndQuery(curResult);
  }
  if (curResult.getError() != null && errorHandling != SQLScriptErrorHandling.IGNORE) {
    return false;
  }
  return true;
}
