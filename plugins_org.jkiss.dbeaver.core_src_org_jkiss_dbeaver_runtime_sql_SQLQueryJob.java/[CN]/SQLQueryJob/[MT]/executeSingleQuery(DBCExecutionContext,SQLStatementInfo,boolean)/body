{
  lastError=null;
  if (fireEvents) {
    for (    ISQLQueryListener listener : queryListeners) {
      listener.onStartQuery(sqlStatement);
    }
  }
  long startTime=System.currentTimeMillis();
  String sqlQuery=sqlStatement.getQuery();
  if (dataFilter != null && dataFilter.hasConditions()) {
    StringBuilder modifiedQuery=new StringBuilder(sqlQuery.length() + 100);
    modifiedQuery.append("SELECT * FROM (\n");
    modifiedQuery.append(sqlQuery);
    modifiedQuery.append("\n) ").append(NESTED_QUERY_AlIAS).append(" WHERE ");
    dataFilter.appendConditionString(getDataSource(),NESTED_QUERY_AlIAS,modifiedQuery);
    sqlQuery=modifiedQuery.toString();
  }
  curResult=new SQLQueryResult(sqlStatement);
  if (rsOffset > 0) {
    curResult.setRowOffset(rsOffset);
  }
  try {
    closeStatement();
    if (!connectionInvalidated && getDataSource().getContainer().getPreferenceStore().getBoolean(PrefConstants.STATEMENT_INVALIDATE_BEFORE_EXECUTE)) {
      getDataSource().invalidateConnection(context.getProgressMonitor());
      connectionInvalidated=true;
    }
    boolean hasParameters=false;
    if (!CommonUtils.isEmpty(sqlStatement.getParameters())) {
      List<SQLStatementParameter> unresolvedParams=new ArrayList<SQLStatementParameter>();
      for (      SQLStatementParameter param : sqlStatement.getParameters()) {
        if (!param.isResolved()) {
          unresolvedParams.add(param);
        }
      }
      if (!CommonUtils.isEmpty(unresolvedParams)) {
        hasParameters=bindStatementParameters(unresolvedParams);
      }
    }
    curStatement=DBUtils.prepareStatement(context,hasParameters ? DBCStatementType.QUERY : DBCStatementType.SCRIPT,sqlQuery,rsOffset,rsMaxRows);
    curStatement.setUserData(editor);
    if (hasParameters) {
      for (      SQLStatementParameter param : sqlStatement.getParameters()) {
        if (param.isResolved()) {
          param.getValueHandler().bindValueObject(context,curStatement,param,param.getIndex(),param.getValue());
        }
      }
    }
    if (!CommonUtils.isEmpty(sqlStatement.getParameters())) {
      List<SQLStatementParameter> unresolvedParams=new ArrayList<SQLStatementParameter>();
      for (      SQLStatementParameter param : sqlStatement.getParameters()) {
        if (!param.isResolved()) {
          unresolvedParams.add(param);
        }
      }
      if (!CommonUtils.isEmpty(unresolvedParams)) {
        if (bindStatementParameters(unresolvedParams)) {
          for (          SQLStatementParameter param : sqlStatement.getParameters()) {
            if (param.isResolved()) {
              param.getValueHandler().bindValueObject(context,curStatement,param,param.getIndex(),param.getValue());
            }
          }
        }
      }
    }
    try {
      boolean hasResultSet=curStatement.executeStatement();
      curResult.setHasResultSet(hasResultSet);
      if (hasResultSet && fetchResultSets) {
        fetchQueryData(context,curStatement.openResultSet());
      }
      if (!hasResultSet) {
        long updateCount=-1;
        try {
          updateCount=curStatement.getUpdateRowCount();
          if (updateCount >= 0) {
            curResult.setUpdateCount(updateCount);
          }
        }
 catch (        DBCException e) {
          log.warn("Can't obtain update count",e);
        }
        if (fetchResultSets) {
          LocalResultSet fakeResultSet=new LocalResultSet(context,curStatement);
          if (updateCount > 0) {
            fakeResultSet.addColumn("Updated Rows",DBSDataKind.NUMERIC);
            fakeResultSet.addRow(updateCount);
          }
 else {
            fakeResultSet.addColumn("Result",DBSDataKind.NUMERIC);
          }
          fetchQueryData(context,fakeResultSet);
        }
      }
    }
  finally {
      if (!keepStatementOpen()) {
        closeStatement();
      }
      if (!CommonUtils.isEmpty(sqlStatement.getParameters())) {
        for (        SQLStatementParameter param : sqlStatement.getParameters()) {
          if (param.isResolved()) {
            param.getValueHandler().releaseValueObject(param.getValue());
          }
        }
      }
    }
  }
 catch (  Throwable ex) {
    curResult.setError(ex);
    lastError=ex;
  }
  curResult.setQueryTime(System.currentTimeMillis() - startTime);
  if (fireEvents) {
    for (    ISQLQueryListener listener : queryListeners) {
      listener.onEndQuery(curResult);
    }
  }
  if (curResult.getError() != null && errorHandling != SQLScriptErrorHandling.IGNORE) {
    return false;
  }
  return true;
}
