{
  statistics=new DBCStatistics();
  try {
    DBCTransactionManager txnManager=DBUtils.getTransactionManager(getExecutionContext());
    DBCSession session=getExecutionContext().openSession(monitor,queries.size() > 1 ? DBCExecutionPurpose.USER_SCRIPT : DBCExecutionPurpose.USER,"SQL Query");
    try {
      QMUtils.getDefaultHandler().handleScriptBegin(session);
      boolean oldAutoCommit=txnManager == null || txnManager.isAutoCommit();
      boolean newAutoCommit=(commitType == SQLScriptCommitType.AUTOCOMMIT);
      if (txnManager != null && !oldAutoCommit && newAutoCommit) {
        txnManager.setAutoCommit(monitor,true);
      }
      monitor.beginTask(this.getName(),queries.size());
      if (listener != null) {
        listener.onStartScript();
      }
      resultSetNumber=0;
      for (int queryNum=0; queryNum < queries.size(); ) {
        SQLQuery query=queries.get(queryNum);
        fetchResultSetNumber=resultSetNumber;
        boolean runNext=executeSingleQuery(session,query,true);
        if (!runNext) {
          if (lastError != null) {
            log.error(lastError);
          }
          boolean isQueue=queryNum < queries.size() - 1;
          ExecutionQueueErrorJob errorJob=new ExecutionQueueErrorJob(isQueue ? "SQL script execution" : "SQL query execution",lastError,isQueue);
          errorJob.schedule();
          try {
            errorJob.join();
          }
 catch (          InterruptedException e) {
            log.error(e);
          }
          boolean stopScript=false;
switch (errorJob.getResponse()) {
case STOP:
            stopScript=true;
          break;
case RETRY:
        continue;
case IGNORE:
      break;
case IGNORE_ALL:
    errorHandling=SQLScriptErrorHandling.IGNORE;
  break;
}
if (stopScript) {
break;
}
}
if (monitor.isCanceled()) {
break;
}
monitor.worked(1);
queryNum++;
}
showExecutionResult(session);
monitor.done();
if (txnManager != null && !oldAutoCommit && commitType != SQLScriptCommitType.AUTOCOMMIT) {
if (lastError == null || errorHandling == SQLScriptErrorHandling.STOP_COMMIT) {
if (commitType != SQLScriptCommitType.NO_COMMIT) {
monitor.beginTask("Commit data",1);
txnManager.commit(monitor);
monitor.done();
}
}
 else {
monitor.beginTask("Rollback data",1);
txnManager.rollback(monitor,null);
monitor.done();
}
}
if (txnManager != null && !oldAutoCommit && newAutoCommit) {
txnManager.setAutoCommit(monitor,false);
}
QMUtils.getDefaultHandler().handleScriptEnd(session);
return new Status(Status.OK,DBeaverCore.getCorePluginID(),"SQL job completed");
}
  finally {
session.close();
}
}
 catch (Throwable ex) {
return new Status(Status.ERROR,DBeaverCore.getCorePluginID(),"Error during SQL job execution: " + ex.getMessage());
}
 finally {
if (listener != null) {
listener.onEndScript(statistics,lastError != null);
}
}
}
