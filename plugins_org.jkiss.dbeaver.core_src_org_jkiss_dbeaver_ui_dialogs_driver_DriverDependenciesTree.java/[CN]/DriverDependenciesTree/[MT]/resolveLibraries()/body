{
  try {
    runnableContext.run(true,true,new DBRRunnableWithProgress(){
      @Override public void run(      DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask("Resolve dependencies",100);
        try {
          dependencies.resolveDependencies(monitor);
        }
 catch (        Exception e) {
          throw new InvocationTargetException(e);
        }
 finally {
          monitor.done();
        }
      }
    }
);
  }
 catch (  InterruptedException e) {
  }
catch (  InvocationTargetException e) {
    UIUtils.showErrorDialog(null,"Resolve libraries","Error resolving driver libraries",e.getTargetException());
  }
  filesTree.removeAll();
  int totalItems=1;
  for (  DBPDriverDependencies.DependencyNode node : dependencies.getLibraryMap()) {
    DBPDriverLibrary library=node.library;
    TreeItem item=new TreeItem(filesTree,SWT.NONE);
    item.setData(node);
    item.setImage(DBeaverIcons.getImage(library.getIcon()));
    item.setText(0,library.getDisplayName());
    item.setText(1,CommonUtils.notEmpty(library.getVersion()));
    item.setText(2,CommonUtils.notEmpty(library.getDescription()));
    if (editable) {
      item.setFont(1,boldFont);
    }
    totalItems++;
    if (addDependencies(item,node)) {
      item.setExpanded(true);
      totalItems+=item.getItemCount();
    }
  }
  UIUtils.packColumns(filesTree);
  int missingFiles=0;
  for (  DBPDriverDependencies.DependencyNode node : dependencies.getLibraryList()) {
    File localFile=node.library.getLocalFile();
    if (localFile == null || !localFile.exists()) {
      missingFiles++;
    }
  }
  if (missingFiles == 0) {
  }
}
