{
  final Map<Object,String> keyValues=new TreeMap<Object,String>();
  try {
    DBDAttributeController attributeController=(DBDAttributeController)valueController;
    final DBSEntityAttribute tableColumn=attributeController.getBinding().getEntityAttribute();
    if (tableColumn == null) {
      return Status.OK_STATUS;
    }
    final DBSEntityAttributeRef fkColumn=DBUtils.getConstraintAttribute(monitor,refConstraint,tableColumn);
    if (fkColumn == null) {
      return Status.OK_STATUS;
    }
    DBSEntityAssociation association;
    if (refConstraint instanceof DBSEntityAssociation) {
      association=(DBSEntityAssociation)refConstraint;
    }
 else {
      return Status.OK_STATUS;
    }
    final DBSEntityAttribute refColumn=DBUtils.getReferenceAttribute(monitor,association,tableColumn);
    if (refColumn == null) {
      return Status.OK_STATUS;
    }
    java.util.List<DBDAttributeValue> precedingKeys=null;
    java.util.List<? extends DBSEntityAttributeRef> allColumns=CommonUtils.safeList(refConstraint.getAttributeReferences(monitor));
    if (allColumns.size() > 1 && allColumns.get(0) != fkColumn) {
      List<DBDAttributeBinding> rowAttributes=attributeController.getRowController().getRowAttributes();
      precedingKeys=new ArrayList<DBDAttributeValue>();
      for (      DBSEntityAttributeRef precColumn : allColumns) {
        if (precColumn == fkColumn) {
          break;
        }
        DBSEntityAttribute precAttribute=precColumn.getAttribute();
        DBDAttributeBinding rowAttr=DBUtils.findBinding(rowAttributes,precAttribute);
        if (rowAttr != null) {
          Object precValue=attributeController.getRowController().getAttributeValue(rowAttr);
          precedingKeys.add(new DBDAttributeValue(precAttribute,precValue));
        }
      }
    }
    final DBCSession session=getExecutionContext().openSession(monitor,DBCExecutionPurpose.UTIL,NLS.bind(CoreMessages.dialog_value_view_context_name,fkColumn.getAttribute().getName()));
    try {
      final DBSEntityConstraint refConstraint=association.getReferencedConstraint();
      DBSConstraintEnumerable enumConstraint=(DBSConstraintEnumerable)refConstraint;
      Collection<DBDLabelValuePair> enumValues=enumConstraint.getKeyEnumeration(session,refColumn,pattern,precedingKeys,100);
      for (      DBDLabelValuePair pair : enumValues) {
        keyValues.put(pair.getValue(),pair.getLabel());
      }
      if (monitor.isCanceled()) {
        return Status.CANCEL_STATUS;
      }
      UIUtils.runInUI(getShell(),new Runnable(){
        @Override public void run(){
          DBDValueHandler colHandler=DBUtils.findValueHandler(session,fkColumn.getAttribute());
          if (editorSelector != null && !editorSelector.isDisposed()) {
            editorSelector.setRedraw(false);
            try {
              editorSelector.removeAll();
              for (              Map.Entry<Object,String> entry : keyValues.entrySet()) {
                TableItem discItem=new TableItem(editorSelector,SWT.NONE);
                discItem.setText(0,colHandler.getValueDisplayString(fkColumn.getAttribute(),entry.getKey(),DBDDisplayFormat.UI));
                discItem.setText(1,entry.getValue());
                discItem.setData(entry.getKey());
              }
              Control editorControl=getControl();
              if (editorControl != null && !editorControl.isDisposed()) {
                try {
                  Object curValue=extractEditorValue();
                  TableItem curItem=null;
                  for (                  TableItem item : editorSelector.getItems()) {
                    if (item.getData() == curValue || (item.getData() != null && curValue != null && item.getData().equals(curValue))) {
                      curItem=item;
                      break;
                    }
                  }
                  if (curItem != null) {
                    editorSelector.select(editorSelector.indexOf(curItem));
                    editorSelector.showSelection();
                  }
                }
 catch (                DBException e) {
                  log.error(e);
                }
              }
              UIUtils.maxTableColumnsWidth(editorSelector);
            }
  finally {
              editorSelector.setRedraw(true);
            }
          }
        }
      }
);
    }
  finally {
      session.close();
    }
  }
 catch (  DBException e) {
    log.warn(e);
  }
  return Status.OK_STATUS;
}
