{
  if (object == null) {
switch (type.getTypeID()) {
case java.sql.Types.CHAR:
case java.sql.Types.VARCHAR:
case java.sql.Types.NVARCHAR:
case java.sql.Types.LONGVARCHAR:
case java.sql.Types.LONGNVARCHAR:
      return new JDBCContentChars(session.getDataSource(),null);
case java.sql.Types.CLOB:
case java.sql.Types.NCLOB:
    return new JDBCContentCLOB(session.getDataSource(),null);
case java.sql.Types.BINARY:
case java.sql.Types.VARBINARY:
case java.sql.Types.LONGVARBINARY:
  return new JDBCContentBytes(session.getDataSource());
case java.sql.Types.BLOB:
return new JDBCContentBLOB(session.getDataSource(),null);
case java.sql.Types.SQLXML:
return new JDBCContentXML(session.getDataSource(),null);
default :
log.error(ModelMessages.model_jdbc_unsupported_column_type_ + type.getTypeName());
return new JDBCContentBytes(session.getDataSource());
}
}
 else if (object instanceof byte[]) {
return new JDBCContentBytes(session.getDataSource(),(byte[])object);
}
 else if (object instanceof String) {
switch (type.getTypeID()) {
case java.sql.Types.BINARY:
case java.sql.Types.VARBINARY:
case java.sql.Types.LONGVARBINARY:
return new JDBCContentBytes(session.getDataSource(),(String)object);
default :
return new JDBCContentChars(session.getDataSource(),(String)object);
}
}
 else if (object instanceof Blob) {
final JDBCContentBLOB blob=new JDBCContentBLOB(session.getDataSource(),(Blob)object);
final DBPPreferenceStore preferenceStore=session.getDataSource().getContainer().getPreferenceStore();
if (preferenceStore.getBoolean(ModelPreferences.CONTENT_CACHE_BLOB) && blob.getLOBLength() < preferenceStore.getLong(ModelPreferences.CONTENT_CACHE_MAX_SIZE)) {
blob.getContents(session.getProgressMonitor());
}
return blob;
}
 else if (object instanceof Clob) {
JDBCContentCLOB clob=new JDBCContentCLOB(session.getDataSource(),(Clob)object);
final DBPPreferenceStore preferenceStore=session.getDataSource().getContainer().getPreferenceStore();
if (preferenceStore.getBoolean(ModelPreferences.CONTENT_CACHE_CLOB) && clob.getLOBLength() < preferenceStore.getLong(ModelPreferences.CONTENT_CACHE_MAX_SIZE)) {
clob.getContents(session.getProgressMonitor());
}
return clob;
}
 else if (object instanceof SQLXML) {
return new JDBCContentXML(session.getDataSource(),(SQLXML)object);
}
 else if (object instanceof InputStream) {
ByteArrayOutputStream buffer=new ByteArrayOutputStream();
final InputStream stream=(InputStream)object;
try {
IOUtils.copyStream(stream,buffer);
}
 catch (Exception e) {
throw new DBCException("Error reading content stream",e);
}
IOUtils.close(stream);
return new JDBCContentBytes(session.getDataSource(),buffer.toByteArray());
}
 else if (object instanceof DBDContent) {
if (copy && object instanceof DBDValueCloneable) {
return (DBDContent)((DBDValueCloneable)object).cloneValue(session.getProgressMonitor());
}
return (DBDContent)object;
}
 else {
throw new DBCException(ModelMessages.model_jdbc_unsupported_value_type_ + object.getClass().getName());
}
}
