{
  for (  DriverCategory category : categories.values()) {
    category.drivers.clear();
  }
  driverList.clear();
  for (  DataSourceProviderDescriptor provider : providers) {
    List<DriverDescriptor> drivers=provider.getEnabledDrivers();
    for (    DriverDescriptor driver : drivers) {
      String category=driver.getCategory();
      if (CommonUtils.isEmpty(category)) {
        driverList.add(driver);
      }
 else {
        DriverCategory driverCategory=categories.get(category);
        if (driverCategory == null) {
          driverCategory=new DriverCategory(category);
          categories.put(category,driverCategory);
        }
        if (!driverList.contains(driverCategory)) {
          driverList.add(driverCategory);
        }
        driverCategory.drivers.add(driver);
      }
    }
  }
  Collections.sort(driverList,new Comparator<Object>(){
    @Override public int compare(    Object o1,    Object o2){
      int count1=getConnectionCount(o1);
      int count2=getConnectionCount(o2);
      if (count1 == count2) {
        String name1=o1 instanceof DriverDescriptor ? ((DriverDescriptor)o1).getName() : ((DriverCategory)o1).getName();
        String name2=o2 instanceof DriverDescriptor ? ((DriverDescriptor)o2).getName() : ((DriverCategory)o2).getName();
        return name1.compareToIgnoreCase(name2);
      }
 else {
        return count2 - count1;
      }
    }
  }
);
  for (  DriverCategory category : categories.values()) {
    Collections.sort(category.drivers,new Comparator<DriverDescriptor>(){
      @Override public int compare(      DriverDescriptor o1,      DriverDescriptor o2){
        return o1.getName().compareToIgnoreCase(o2.getName());
      }
    }
);
  }
  return driverList;
}
