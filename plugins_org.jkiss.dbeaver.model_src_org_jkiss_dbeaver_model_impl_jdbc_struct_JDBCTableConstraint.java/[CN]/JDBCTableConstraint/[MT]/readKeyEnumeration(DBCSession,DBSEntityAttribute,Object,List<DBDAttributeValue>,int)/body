{
  DBDValueHandler keyValueHandler=DBUtils.findValueHandler(session,keyColumn);
  StringBuilder query=new StringBuilder();
  query.append("SELECT ").append(DBUtils.getQuotedIdentifier(keyColumn));
  String descColumns=DBVUtils.getDictionaryDescriptionColumns(session.getProgressMonitor(),keyColumn);
  if (descColumns != null) {
    query.append(", ").append(descColumns);
  }
  query.append(" FROM ").append(DBUtils.getObjectFullName(keyColumn.getParentObject()));
  List<String> conditions=new ArrayList<>();
  if (keyPattern != null) {
    if (keyPattern instanceof CharSequence) {
      if (((CharSequence)keyPattern).length() > 0) {
        conditions.add(DBUtils.getQuotedIdentifier(keyColumn) + " LIKE ?");
      }
 else {
        keyPattern=null;
      }
    }
 else     if (keyPattern instanceof Number) {
      conditions.add(DBUtils.getQuotedIdentifier(keyColumn) + " >= ?");
    }
 else {
    }
  }
  if (preceedingKeys != null && !preceedingKeys.isEmpty()) {
    for (    DBDAttributeValue precAttribute : preceedingKeys) {
      conditions.add(DBUtils.getQuotedIdentifier(getDataSource(),precAttribute.getAttribute().getName()) + " = ?");
    }
  }
  if (!conditions.isEmpty()) {
    query.append(" WHERE");
    for (int i=0; i < conditions.size(); i++) {
      if (i > 0) {
        query.append(" AND");
      }
      query.append(" ").append(conditions.get(i));
    }
  }
  try (DBCStatement dbStat=session.prepareStatement(DBCStatementType.QUERY,query.toString(),false,false,false)){
    int paramPos=0;
    if (keyPattern instanceof CharSequence) {
      keyPattern=keyPattern.toString() + "%";
    }
    if (keyPattern != null) {
      if (keyPattern instanceof Integer) {
        keyPattern=(Integer)keyPattern - NUMERIC_BEFORE_GAP;
      }
 else       if (keyPattern instanceof Short) {
        keyPattern=(Short)keyPattern - NUMERIC_BEFORE_GAP;
      }
 else       if (keyPattern instanceof Long) {
        keyPattern=(Long)keyPattern - NUMERIC_BEFORE_GAP;
      }
 else       if (keyPattern instanceof Float) {
        keyPattern=(Float)keyPattern - NUMERIC_BEFORE_GAP;
      }
 else       if (keyPattern instanceof Double) {
        keyPattern=(Double)keyPattern - NUMERIC_BEFORE_GAP;
      }
 else       if (keyPattern instanceof BigInteger) {
        keyPattern=((BigInteger)keyPattern).subtract(BigInteger.valueOf(NUMERIC_BEFORE_GAP));
      }
      keyValueHandler.bindValueObject(session,dbStat,keyColumn,paramPos++,keyPattern);
    }
    if (preceedingKeys != null && !preceedingKeys.isEmpty()) {
      for (      DBDAttributeValue precAttribute : preceedingKeys) {
        DBDValueHandler precValueHandler=DBUtils.findValueHandler(session,precAttribute.getAttribute());
        precValueHandler.bindValueObject(session,dbStat,precAttribute.getAttribute(),paramPos++,precAttribute.getValue());
      }
    }
    dbStat.setLimit(0,maxResults);
    if (dbStat.executeStatement()) {
      try (DBCResultSet dbResult=dbStat.openResultSet()){
        return DBVUtils.readDictionaryRows(session,keyColumn,keyValueHandler,dbResult);
      }
     }
 else {
      return Collections.emptyList();
    }
  }
 }
