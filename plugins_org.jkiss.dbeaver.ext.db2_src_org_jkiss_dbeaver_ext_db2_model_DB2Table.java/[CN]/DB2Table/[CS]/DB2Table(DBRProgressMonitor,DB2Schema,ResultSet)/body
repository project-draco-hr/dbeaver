{
  super(monitor,schema,dbResult);
  this.status=CommonUtils.valueOf(DB2TableStatus.class,JDBCUtils.safeGetString(dbResult,"STATUS"));
  this.type=CommonUtils.valueOf(DB2TableType.class,JDBCUtils.safeGetString(dbResult,"TYPE"));
  this.statsTime=JDBCUtils.safeGetTimestamp(dbResult,"STATS_TIME");
  this.dataCapture=JDBCUtils.safeGetString(dbResult,"DATACAPTURE");
  this.constChecked=JDBCUtils.safeGetString(dbResult,"CONST_CHECKED");
  this.partitionMode=CommonUtils.valueOf(DB2TablePartitionMode.class,JDBCUtils.safeGetString(dbResult,"PARTITION_MODE"));
  this.append=JDBCUtils.safeGetBoolean(dbResult,"APPEND_MODE",DB2YesNo.Y.name());
  this.volatileMode=JDBCUtils.safeGetString(dbResult,"VOLATILE");
  this.compression=CommonUtils.valueOf(DB2TableCompressionMode.class,JDBCUtils.safeGetString(dbResult,"COMPRESSION"));
  this.accessMode=CommonUtils.valueOf(DB2TableAccessMode.class,JDBCUtils.safeGetString(dbResult,"ACCESS_MODE"));
  this.mdcClustered=JDBCUtils.safeGetBoolean(dbResult,"CLUSTERED",DB2YesNo.Y.name());
  this.dropRule=CommonUtils.valueOf(DB2TableDropRule.class,JDBCUtils.safeGetString(dbResult,"DROPRULE"));
  this.card=JDBCUtils.safeGetLongNullable(dbResult,"CARD");
  this.nPages=JDBCUtils.safeGetLongNullable(dbResult,"NPAGES");
  this.fPages=JDBCUtils.safeGetLongNullable(dbResult,"FPAGES");
  this.overFLow=JDBCUtils.safeGetLongNullable(dbResult,"OVERFLOW");
  String lockSizeString=JDBCUtils.safeGetString(dbResult,"LOCKSIZE");
  if (CommonUtils.isNotEmpty(lockSizeString)) {
    this.lockSize=CommonUtils.valueOf(DB2TableLockSize.class,lockSizeString);
  }
  this.tablespace=JDBCUtils.safeGetString(dbResult,"TBSPACE");
  this.indexTablespace=JDBCUtils.safeGetString(dbResult,"INDEX_TBSPACE");
  this.longTablespace=JDBCUtils.safeGetString(dbResult,"LONG_TBSPACE");
  this.partitionCache=new JDBCObjectSimpleCache<DB2Table,DB2TablePartition>(DB2TablePartition.class,C_PT,schema.getName(),getName());
}
