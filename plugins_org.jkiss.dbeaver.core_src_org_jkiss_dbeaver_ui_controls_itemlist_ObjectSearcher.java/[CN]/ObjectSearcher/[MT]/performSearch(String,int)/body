{
  boolean caseSensitiveSearch=(options & SEARCH_CASE_SENSITIVE) != 0;
  if (!CommonUtils.isEmpty(searchString) && curSearchPattern == null || !CommonUtils.equalObjects(curSearchPattern.pattern(),SQLUtils.makeLikePattern(searchString))) {
    try {
      curSearchPattern=Pattern.compile(SQLUtils.makeLikePattern(searchString),caseSensitiveSearch ? 0 : Pattern.CASE_INSENSITIVE);
    }
 catch (    PatternSyntaxException e) {
      setInfo(e.getMessage());
      return false;
    }
    curSearchIndex=-1;
    Set<OBJECT_TYPE> oldSearchResult=curSearchResult;
    curSearchResult=null;
    boolean found=false;
    Collection<OBJECT_TYPE> nodes=getContent();
    if (!CommonUtils.isEmpty(nodes)) {
      for (      OBJECT_TYPE node : nodes) {
        if (matchesSearch(node)) {
          if (curSearchResult == null) {
            curSearchResult=new LinkedHashSet<>(50);
          }
          curSearchResult.add(node);
          updateObject(node);
          if (!found) {
            curSearchIndex++;
            selectObject(node);
            revealObject(node);
          }
          found=true;
        }
      }
    }
    if (!CommonUtils.isEmpty(oldSearchResult)) {
      for (      OBJECT_TYPE oldNode : oldSearchResult) {
        if (curSearchResult == null || !curSearchResult.contains(oldNode)) {
          updateObject(oldNode);
        }
      }
    }
    return found;
  }
 else {
    boolean findNext=((options & SEARCH_NEXT) != 0);
    boolean findPrev=((options & SEARCH_PREVIOUS) != 0);
    if ((findNext || findPrev) && !CommonUtils.isEmpty(curSearchResult)) {
      if (findNext) {
        curSearchIndex++;
        if (curSearchIndex >= curSearchResult.size()) {
          curSearchIndex=0;
        }
      }
 else {
        curSearchIndex--;
        if (curSearchIndex < 0) {
          curSearchIndex=curSearchResult.size() - 1;
        }
      }
      int index=0;
      for (      OBJECT_TYPE node : curSearchResult) {
        if (index++ == curSearchIndex) {
          selectObject(node);
          revealObject(node);
          break;
        }
      }
    }
    return !CommonUtils.isEmpty(curSearchResult);
  }
}
