{
  initializeDialogUnits(parent);
  Composite searchGroup=new Composite(parent,SWT.NONE);
  searchGroup.setLayoutData(new GridData(GridData.FILL_BOTH));
  searchGroup.setLayout(new GridLayout(3,false));
  setControl(searchGroup);
  UIUtils.createControlLabel(searchGroup,"String");
  searchText=new Combo(searchGroup,SWT.DROP_DOWN);
  searchText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (searchString != null) {
    searchText.setText(searchString);
  }
  for (  String history : searchHistory) {
    searchText.add(history);
  }
  searchText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      searchString=searchText.getText();
      updateEnablement();
    }
  }
);
  Composite optionsGroup=new SashForm(searchGroup,SWT.NONE);
  GridLayout layout=new GridLayout(2,true);
  layout.marginHeight=0;
  layout.marginWidth=0;
  optionsGroup.setLayout(layout);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.horizontalSpan=3;
  optionsGroup.setLayoutData(gd);
{
    final DBeaverCore core=DBeaverCore.getInstance();
    Group databasesGroup=UIUtils.createControlGroup(optionsGroup,"Databases",1,GridData.FILL_BOTH,0);
    gd=new GridData(GridData.FILL_BOTH);
    gd.heightHint=300;
    databasesGroup.setLayoutData(gd);
    final DBNProject projectNode=core.getNavigatorModel().getRoot().getProject(core.getProjectRegistry().getActiveProject());
    DBNNode rootNode=projectNode == null ? core.getNavigatorModel().getRoot() : projectNode.getDatabases();
    dataSourceTree=new DatabaseNavigatorTree(databasesGroup,rootNode,SWT.SINGLE | SWT.CHECK);
    dataSourceTree.setLayoutData(new GridData(GridData.FILL_BOTH));
    final CheckboxTreeViewer viewer=(CheckboxTreeViewer)dataSourceTree.getViewer();
    viewer.addFilter(new ViewerFilter(){
      @Override public boolean select(      Viewer viewer,      Object parentElement,      Object element){
        if (element instanceof TreeLoadNode) {
          return true;
        }
        if (element instanceof DBNNode) {
          if (element instanceof DBNDatabaseFolder) {
            DBNDatabaseFolder folder=(DBNDatabaseFolder)element;
            Class<? extends DBSObject> folderItemsClass=folder.getChildrenClass();
            return folderItemsClass != null && (DBSObjectContainer.class.isAssignableFrom(folderItemsClass) || DBSEntity.class.isAssignableFrom(folderItemsClass));
          }
          if (element instanceof DBNLocalFolder || element instanceof DBNProjectDatabases || element instanceof DBNDataSource|| (element instanceof DBSWrapper && (((DBSWrapper)element).getObject() instanceof DBSObjectContainer) || ((DBSWrapper)element).getObject() instanceof DBSEntity)) {
            return true;
          }
        }
        return false;
      }
    }
);
    viewer.addCheckStateListener(new ICheckStateListener(){
      @Override public void checkStateChanged(      CheckStateChangedEvent event){
        updateEnablement();
      }
    }
);
  }
{
    Composite optionsGroup2=UIUtils.createControlGroup(optionsGroup,"Settings",2,GridData.FILL_BOTH,0);
    optionsGroup2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.VERTICAL_ALIGN_BEGINNING));
    if (maxResults <= 0) {
      maxResults=100;
    }
    final Spinner maxResultsSpinner=UIUtils.createLabelSpinner(optionsGroup2,CoreMessages.dialog_search_objects_spinner_max_results,maxResults,1,10000);
    maxResultsSpinner.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
    maxResultsSpinner.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        maxResults=maxResultsSpinner.getSelection();
      }
    }
);
    final Button caseCheckbox=UIUtils.createLabelCheckbox(optionsGroup2,CoreMessages.dialog_search_objects_case_sensitive,caseSensitive);
    caseCheckbox.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
    caseCheckbox.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        caseSensitive=caseCheckbox.getSelection();
      }
    }
);
    final Button fastSearchCheckbox=UIUtils.createLabelCheckbox(optionsGroup2,"Fast search (indexed)",caseSensitive);
    fastSearchCheckbox.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
    fastSearchCheckbox.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        fastSearch=fastSearchCheckbox.getSelection();
      }
    }
);
    final Button searchNumbersCheckbox=UIUtils.createLabelCheckbox(optionsGroup2,"Search in numbers",caseSensitive);
    searchNumbersCheckbox.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
    searchNumbersCheckbox.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
      }
    }
);
    final Button searchLOBCheckbox=UIUtils.createLabelCheckbox(optionsGroup2,"Search in LOBs",caseSensitive);
    searchLOBCheckbox.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
    searchLOBCheckbox.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
      }
    }
);
  }
  if (!sourceNodes.isEmpty()) {
    dataSourceTree.getViewer().setSelection(new StructuredSelection(sourceNodes));
  }
 else {
    updateEnablement();
  }
}
