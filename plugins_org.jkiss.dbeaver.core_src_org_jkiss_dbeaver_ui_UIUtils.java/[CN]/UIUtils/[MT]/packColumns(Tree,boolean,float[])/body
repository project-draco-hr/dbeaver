{
  tree.setRedraw(false);
  try {
    for (    TreeItem item : tree.getItems()) {
      if (item.isDisposed()) {
        return;
      }
    }
    int totalWidth=0;
    final TreeColumn[] columns=tree.getColumns();
    for (    TreeColumn column : columns) {
      column.pack();
      totalWidth+=column.getWidth();
    }
    Rectangle clientArea=tree.getClientArea();
    if (clientArea.isEmpty()) {
      return;
    }
    if (fit) {
      int areaWidth=clientArea.width;
      if (tree.getVerticalBar() != null) {
        areaWidth-=tree.getVerticalBar().getSize().x;
      }
      if (totalWidth > areaWidth) {
        GC gc=new GC(tree);
        try {
          int extraSpace=totalWidth - areaWidth;
          for (          TreeColumn tc : columns) {
            double ratio=(double)tc.getWidth() / totalWidth;
            int newWidth=(int)(tc.getWidth() - extraSpace * ratio);
            int minWidth=gc.stringExtent(tc.getText()).x;
            minWidth+=5;
            if (newWidth < minWidth) {
              newWidth=minWidth;
            }
            tc.setWidth((int)newWidth);
          }
        }
  finally {
          gc.dispose();
        }
      }
 else       if (totalWidth < areaWidth) {
        float extraSpace=areaWidth - totalWidth;
        if (columns.length > 0) {
          if (ratios == null || ratios.length < columns.length) {
            extraSpace/=columns.length;
            extraSpace--;
            for (            TreeColumn tc : columns) {
              tc.setWidth((int)(tc.getWidth() + extraSpace));
            }
          }
 else {
            for (int i=0; i < columns.length; i++) {
              TreeColumn tc=columns[i];
              tc.setWidth((int)(tc.getWidth() + extraSpace * ratios[i]));
            }
          }
        }
      }
    }
  }
  finally {
    tree.setRedraw(true);
  }
}
