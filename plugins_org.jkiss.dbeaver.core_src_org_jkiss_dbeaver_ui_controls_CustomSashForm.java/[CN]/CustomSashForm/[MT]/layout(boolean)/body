{
  super.layout(changed);
  if (noHideUp && noHideDown)   return;
  if (getMaximizedControl() != null)   return;
  Control[] children=getChildren();
  Sash newSash=null;
  for (int i=0; i < children.length; i++) {
    if (children[i] instanceof Sash)     if (newSash == null)     newSash=(Sash)children[i];
 else {
      if (currentSashInfo != null)       currentSashInfo.enabled=false;
      return;
    }
  }
  if (newSash == null)   return;
  if (currentSashInfo == null || currentSashInfo.sash == null) {
    if (currentSashInfo == null)     currentSashInfo=new SashInfo(newSash);
 else     currentSashInfo.sash=newSash;
    newSash.addPaintListener(new PaintListener(){
      /** 
 * @see org.eclipse.swt.events.PaintListener#paintControl(PaintEvent)
 */
      public void paintControl(      PaintEvent e){
        GC gc=e.gc;
        Color oldFg=gc.getForeground();
        Color oldBg=gc.getBackground();
        drawArrow(gc,currentSashInfo.sashLocs[0],currentSashInfo.cursorOver == 0);
        if (currentSashInfo.sashLocs.length > 1)         drawArrow(gc,currentSashInfo.sashLocs[1],currentSashInfo.cursorOver == 1);
        if (currentSashInfo.sashBorderLeft)         drawSashBorder(gc,currentSashInfo.sash,true);
        if (currentSashInfo.sashBorderRight)         drawSashBorder(gc,currentSashInfo.sash,false);
        gc.setForeground(oldFg);
        gc.setBackground(oldBg);
      }
    }
);
    newSash.addControlListener(new ControlListener(){
      /** 
 * @see org.eclipse.swt.events.ControlAdapter#controlMoved(ControlEvent)
 */
      public void controlMoved(      ControlEvent e){
        recomputeSashInfo();
      }
      /** 
 * @see org.eclipse.swt.events.ControlAdapter#controlResized(ControlEvent)
 */
      public void controlResized(      ControlEvent e){
        recomputeSashInfo();
      }
    }
);
    newSash.addDisposeListener(new DisposeListener(){
      /** 
 * @see org.eclipse.swt.events.DisposeListener#widgetDisposed(DisposeEvent)
 */
      public void widgetDisposed(      DisposeEvent e){
        currentSashInfo=null;
      }
    }
);
    newSash.addMouseMoveListener(new MouseMoveListener(){
      /** 
 * @see org.eclipse.swt.events.MouseMoveListener#mouseMove(MouseEvent)
 */
      public void mouseMove(      MouseEvent e){
        int x=e.x;
        int y=e.y;
        for (int i=0; i < currentSashInfo.sashLocs.length; i++) {
          int[] locs=currentSashInfo.sashLocs[i];
          boolean vertical=getOrientation() == SWT.VERTICAL;
          int loc=vertical ? x : y;
          int locIndex=vertical ? X_INDEX : Y_INDEX;
          int sizeIndex=vertical ? WIDTH_INDEX : HEIGHT_INDEX;
          if (locs[locIndex] <= loc && loc <= locs[locIndex] + locs[sizeIndex]) {
            if (currentSashInfo.cursorOver == NO_ARROW) {
              currentSashInfo.sash.setCursor(getDisplay().getSystemCursor(SWT.CURSOR_ARROW));
            }
            if (currentSashInfo.cursorOver != i) {
              currentSashInfo.cursorOver=i;
              currentSashInfo.sash.redraw();
switch (locs[ARROW_TYPE_INDEX]) {
case UP_RESTORE_ARROW:
case DOWN_RESTORE_ARROW:
                currentSashInfo.sash.setToolTipText("Restore");
              break;
case UP_HIDE_ARROW:
case DOWN_HIDE_ARROW:
            currentSashInfo.sash.setToolTipText("Hide");
          break;
      }
    }
    return;
  }
}
if (currentSashInfo.cursorOver != NO_ARROW) {
  currentSashInfo.sash.setCursor(null);
  currentSashInfo.cursorOver=NO_ARROW;
  currentSashInfo.sash.redraw();
  currentSashInfo.sash.setToolTipText(null);
}
}
}
);
newSash.addMouseTrackListener(new MouseTrackAdapter(){
/** 
 * @see org.eclipse.swt.events.MouseTrackAdapter#mouseExit(MouseEvent)
 */
public void mouseExit(MouseEvent e){
if (currentSashInfo.cursorOver != NO_ARROW) {
  currentSashInfo.sash.setCursor(null);
  currentSashInfo.cursorOver=NO_ARROW;
  currentSashInfo.sash.redraw();
  currentSashInfo.sash.setToolTipText(null);
}
}
}
);
newSash.addMouseListener(new MouseAdapter(){
/** 
 * @see org.eclipse.swt.events.MouseAdapter#mouseDown(MouseEvent)
 */
public void mouseDown(MouseEvent e){
inMouseClick=true;
int x=e.x;
int y=e.y;
for (int i=0; i < currentSashInfo.sashLocs.length; i++) {
  int[] locs=currentSashInfo.sashLocs[i];
  boolean vertical=getOrientation() == SWT.VERTICAL;
  int loc=vertical ? x : y;
  int locIndex=vertical ? X_INDEX : Y_INDEX;
  int sizeIndex=vertical ? WIDTH_INDEX : HEIGHT_INDEX;
  if (locs[locIndex] <= loc && loc <= locs[locIndex] + locs[sizeIndex]) {
    currentSashInfo.sash.redraw();
    break;
  }
}
}
/** 
 * @see org.eclipse.swt.events.MouseListener#mouseDown(MouseEvent)
 */
public void mouseUp(MouseEvent e){
inMouseClick=false;
int x=e.x;
int y=e.y;
for (int i=0; i < currentSashInfo.sashLocs.length; i++) {
  int[] locs=currentSashInfo.sashLocs[i];
  boolean vertical=getOrientation() == SWT.VERTICAL;
  int loc=vertical ? x : y;
  int locIndex=vertical ? X_INDEX : Y_INDEX;
  int sizeIndex=vertical ? WIDTH_INDEX : HEIGHT_INDEX;
  if (locs[locIndex] <= loc && loc <= locs[locIndex] + locs[sizeIndex]) {
switch (locs[ARROW_TYPE_INDEX]) {
case UP_RESTORE_ARROW:
      upRestoreClicked(currentSashInfo);
    break;
case UP_HIDE_ARROW:
  upHideClicked(currentSashInfo);
break;
case DOWN_RESTORE_ARROW:
downRestoreClicked(currentSashInfo);
break;
case DOWN_HIDE_ARROW:
downHideClicked(currentSashInfo);
break;
}
break;
}
}
currentSashInfo.sash.redraw();
fireDividerMoved();
}
}
);
recomputeSashInfo();
}
}
