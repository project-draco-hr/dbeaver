{
  if (pattern == null)   return -1;
  int result=Integer.MAX_VALUE;
  if (!directionForward) {
    result=-1;
  }
  byteBuffer.order(ByteOrder.LITTLE_ENDIAN);
  Matcher matcher=pattern.matcher(byteBuffer.asCharBuffer());
  for (int encoding=0; encoding < 4; ++encoding) {
    while (matcher.find()) {
      int index=matcher.start() * 2 + (encoding >= 2 ? 1 : 0);
      if (directionForward && result > index || !directionForward && result < index) {
        result=index;
      }
      if (directionForward) {
        break;
      }
    }
    if (encoding == 0) {
      byteBuffer.order(ByteOrder.BIG_ENDIAN);
    }
 else     if (encoding == 1 && byteBuffer.limit() > 0) {
      byteBuffer.position(1);
    }
 else     if (encoding == 2) {
      byteBuffer.order(ByteOrder.LITTLE_ENDIAN);
    }
    matcher.reset(byteBuffer.asCharBuffer());
  }
  if (result == Integer.MAX_VALUE) {
    result=-1;
  }
  return result;
}
