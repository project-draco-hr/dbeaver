{
  super(parent,SWT.NONE);
  this.setLayout(new FillLayout());
  this.model=DBNModel.getInstance();
  this.model.addListener(this);
  addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      if (model != null) {
        model.removeListener(DatabaseNavigatorTree.this);
        model=null;
      }
    }
  }
);
  checkEnabled=(style & SWT.CHECK) != 0;
  final ISelection defaultSelection=new StructuredSelection(rootNode);
  int treeStyle=SWT.H_SCROLL | SWT.V_SCROLL | style;
  if (checkEnabled) {
    this.viewer=new CheckboxTreeViewer(this,treeStyle);
    ((CheckboxTreeViewer)this.viewer).setCheckStateProvider(new ICheckStateProvider(){
      @Override public boolean isChecked(      Object element){
        return false;
      }
      @Override public boolean isGrayed(      Object element){
        return element instanceof DBNContainer;
      }
    }
);
  }
 else {
    this.viewer=new TreeViewer(this,treeStyle){
      @Override public ISelection getSelection(){
        ISelection selection=super.getSelection();
        return selection.isEmpty() ? defaultSelection : selection;
      }
    }
;
  }
  this.viewer.getTree().setCursor(getDisplay().getSystemCursor(SWT.CURSOR_ARROW));
  this.viewer.setUseHashlookup(true);
  if (rootNode.getParentNode() == null) {
  }
  this.viewer.setLabelProvider(new DatabaseNavigatorLabelProvider(this.viewer));
  this.viewer.setContentProvider(new DatabaseNavigatorContentProvider(this.viewer,showRoot));
  this.viewer.setInput(new DatabaseNavigatorContent(rootNode));
  initEditor();
}
