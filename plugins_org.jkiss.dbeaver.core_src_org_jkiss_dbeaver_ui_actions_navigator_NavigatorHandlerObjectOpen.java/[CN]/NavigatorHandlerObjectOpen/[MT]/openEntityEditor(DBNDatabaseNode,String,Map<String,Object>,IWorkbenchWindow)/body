{
  if (selectedNode instanceof DBNDataSource) {
    final DataSourceDescriptor dataSourceContainer=(DataSourceDescriptor)selectedNode.getDataSourceContainer();
    openConnectionEditor(workbenchWindow,dataSourceContainer);
    return null;
  }
  if (!selectedNode.isPersisted()) {
    return null;
  }
  try {
    String defaultFolderId=null;
    if (selectedNode instanceof DBNDatabaseFolder && !(selectedNode.getParentNode() instanceof DBNDatabaseFolder) && selectedNode.getParentNode() instanceof DBNDatabaseNode) {
      defaultFolderId=selectedNode.getNodeType();
      selectedNode=(DBNDatabaseNode)selectedNode.getParentNode();
    }
    DatabaseEditorInputFactory.setLookupEditor(true);
    try {
      for (      IEditorReference ref : workbenchWindow.getActivePage().getEditorReferences()) {
        IEditorInput editorInput;
        try {
          editorInput=ref.getEditorInput();
        }
 catch (        PartInitException e) {
          continue;
        }
        if (editorInput instanceof EntityEditorInput && ((EntityEditorInput)editorInput).getDatabaseObject() == selectedNode.getObject()) {
          final IEditorPart editor=ref.getEditor(true);
          if (editor instanceof ITabbedFolderContainer && defaultFolderId != null) {
            ((ITabbedFolderContainer)editor).switchFolder(defaultFolderId);
          }
          workbenchWindow.getActivePage().activate(editor);
          return editor;
        }
      }
    }
  finally {
      DatabaseEditorInputFactory.setLookupEditor(false);
    }
    if (selectedNode instanceof DBNDatabaseFolder) {
      FolderEditorInput folderInput=new FolderEditorInput((DBNDatabaseFolder)selectedNode);
      folderInput.setDefaultPageId(defaultPageId);
      setInputAttributes(folderInput,defaultPageId,defaultFolderId,attributes);
      return workbenchWindow.getActivePage().openEditor(folderInput,FolderEditor.class.getName());
    }
 else     if (selectedNode instanceof DBNDatabaseObject) {
      DBNDatabaseObject objectNode=(DBNDatabaseObject)selectedNode;
      ObjectEditorInput objectInput=new ObjectEditorInput(objectNode);
      setInputAttributes(objectInput,defaultPageId,defaultFolderId,attributes);
      return workbenchWindow.getActivePage().openEditor(objectInput,objectNode.getMeta().getEditorId());
    }
 else     if (selectedNode.getObject() != null) {
      EntityEditorInput editorInput=new EntityEditorInput(selectedNode);
      if (DBeaverCore.getGlobalPreferenceStore().getBoolean(DBeaverPreferences.NAVIGATOR_REFRESH_EDITORS_ON_OPEN)) {
        if (selectedNode.getObject() instanceof DBSObjectContainer) {
        }
 else {
          refreshDatabaseNode(selectedNode);
        }
      }
      setInputAttributes(editorInput,defaultPageId,defaultFolderId,attributes);
      return workbenchWindow.getActivePage().openEditor(editorInput,EntityEditor.class.getName());
    }
 else {
      throw new DBException("Don't know how to open object '" + selectedNode.getNodeName() + "'");
    }
  }
 catch (  Exception ex) {
    UIUtils.showErrorDialog(workbenchWindow.getShell(),CoreMessages.actions_navigator_error_dialog_open_entity_title,"Can't open entity '" + selectedNode.getNodeName() + "'",ex);
    return null;
  }
}
