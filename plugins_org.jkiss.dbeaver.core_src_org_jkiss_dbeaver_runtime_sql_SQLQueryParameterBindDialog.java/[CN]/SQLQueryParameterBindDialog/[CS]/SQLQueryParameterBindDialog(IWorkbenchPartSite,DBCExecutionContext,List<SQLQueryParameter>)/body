{
  super(ownerSite.getShell());
  this.ownerSite=ownerSite;
  this.executionContext=executionContext;
  this.parameters=parameters;
  DBPDataSource dataSource=executionContext.getDataSource();
  DBPDataTypeProvider dataTypeProvider=DBUtils.getAdapter(DBPDataTypeProvider.class,dataSource);
  if (dataTypeProvider != null) {
    for (    DBSDataType dataType : dataTypeProvider.getDataTypes()) {
      if (dataType.getDataKind() == DBPDataKind.UNKNOWN) {
        continue;
      }
      IValueManager manager=DataManagerRegistry.findValueManager(dataSource.getContainer(),dataType.getDataKind(),Object.class);
      if (ArrayUtils.contains(manager.getSupportedEditTypes(),IValueController.EditType.INLINE)) {
        validDataTypes.add(dataType);
      }
    }
  }
  Collections.sort(validDataTypes,new Comparator<DBSDataType>(){
    @Override public int compare(    DBSDataType o1,    DBSDataType o2){
      return o1.getName().compareTo(o2.getName());
    }
  }
);
  SQLQueryParameterRegistry registry=SQLQueryParameterRegistry.getInstance();
  for (  SQLQueryParameter param : this.parameters) {
    DBSDataType dataType=DBUtils.findBestDataType(validDataTypes,DBConstants.DEFAULT_DATATYPE_NAMES);
    if (dataType != null) {
      param.setParamType(dataType);
      param.resolve();
    }
    if (param.isNamed()) {
      SQLQueryParameterRegistry.ParameterInfo paramInfo=registry.getParameter(param.getName());
      if (paramInfo != null) {
        if (paramInfo.type != null) {
          dataType=DBUtils.findBestDataType(validDataTypes,paramInfo.type);
          if (dataType != null) {
            param.setParamType(dataType);
            param.resolve();
          }
        }
        param.setValue(paramInfo.value);
      }
    }
  }
}
