{
  getShell().setText(CoreMessages.controls_resultset_filter_title);
  getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));
  Composite composite=(Composite)super.createDialogArea(parent);
  TabFolder tabFolder=new TabFolder(composite,SWT.NONE);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  TreeColumn criteriaColumn;
{
    Composite columnsGroup=UIUtils.createPlaceholder(tabFolder,1);
    columnsViewer=new CheckboxTreeViewer(columnsGroup,SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK);
    columnsViewer.setContentProvider(new TreeContentProvider(){
      @Override public Object[] getChildren(      Object parentElement){
        final java.util.List<DBDAttributeBinding> nestedBindings=((DBDAttributeBinding)parentElement).getNestedBindings();
        if (nestedBindings == null || nestedBindings.isEmpty()) {
          return null;
        }
        final DBDAttributeBinding[] res=nestedBindings.toArray(new DBDAttributeBinding[nestedBindings.size()]);
        Arrays.sort(res,activeSorter);
        return res;
      }
      @Override public boolean hasChildren(      Object element){
        final java.util.List<DBDAttributeBinding> nestedBindings=((DBDAttributeBinding)element).getNestedBindings();
        return nestedBindings != null && !nestedBindings.isEmpty();
      }
    }
);
    columnsViewer.setLabelProvider(new ColumnLabelProvider());
    columnsViewer.setCheckStateProvider(new CheckStateProvider());
    final Tree columnsTree=columnsViewer.getTree();
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.heightHint=300;
    columnsTree.setLayoutData(gd);
    columnsTree.setHeaderVisible(true);
    columnsTree.setLinesVisible(true);
    UIUtils.createTreeColumn(columnsTree,SWT.LEFT,CoreMessages.controls_resultset_filter_column_name);
    UIUtils.createTreeColumn(columnsTree,SWT.LEFT,"#");
    UIUtils.createTreeColumn(columnsTree,SWT.LEFT,CoreMessages.controls_resultset_filter_column_order);
    criteriaColumn=UIUtils.createTreeColumn(columnsTree,SWT.LEFT,CoreMessages.controls_resultset_filter_column_criteria);
    new CustomTreeEditor(columnsTree){
{
        firstTraverseIndex=3;
        lastTraverseIndex=3;
      }
      @Override protected Control createEditor(      Tree table,      int index,      TreeItem item){
        if (index == 2) {
          toggleColumnOrder(item);
          return null;
        }
 else         if (index == 3 && resultSetViewer.supportsDataFilter()) {
          Text text=new Text(columnsTree,SWT.BORDER);
          text.setText(item.getText(index));
          text.selectAll();
          return text;
        }
        return null;
      }
      @Override protected void saveEditorValue(      Control control,      int index,      TreeItem item){
        Text text=(Text)control;
        String criteria=text.getText().trim();
        DBDAttributeConstraint constraint=getBindingConstraint((DBDAttributeBinding)item.getData());
        if (CommonUtils.isEmpty(criteria)) {
          constraint.setCriteria(null);
        }
 else {
          constraint.setCriteria(criteria);
        }
        item.setText(3,criteria);
      }
      private void toggleColumnOrder(      TreeItem item){
        DBDAttributeConstraint constraint=getBindingConstraint((DBDAttributeBinding)item.getData());
        if (constraint.getOrderPosition() == 0) {
          constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);
          constraint.setOrderDescending(false);
        }
 else         if (!constraint.isOrderDescending()) {
          constraint.setOrderDescending(true);
        }
 else {
          constraint.setOrderPosition(0);
          constraint.setOrderDescending(false);
        }
        columnsViewer.refresh();
      }
    }
;
    columnsViewer.addCheckStateListener(new ICheckStateListener(){
      @Override public void checkStateChanged(      CheckStateChangedEvent event){
        DBDAttributeConstraint constraint=getBindingConstraint((DBDAttributeBinding)event.getElement());
        constraint.setVisible(event.getChecked());
      }
    }
);
{
      ToolBar toolbar=new ToolBar(columnsGroup,SWT.HORIZONTAL | SWT.RIGHT);
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.verticalIndent=3;
      toolbar.setLayoutData(gd);
      toolbar.setLayout(new FillLayout());
      moveTopButton=createToolItem(toolbar,"Move to top",UIIcon.ARROW_TOP,new Runnable(){
        @Override public void run(){
          int selectionIndex=getSelectionIndex(columnsViewer.getTree());
          moveColumn(selectionIndex,0);
        }
      }
);
      moveTopButton.setEnabled(false);
      moveUpButton=createToolItem(toolbar,"Move up",UIIcon.ARROW_UP,new Runnable(){
        @Override public void run(){
          int selectionIndex=getSelectionIndex(columnsViewer.getTree());
          moveColumn(selectionIndex,selectionIndex - 1);
        }
      }
);
      moveUpButton.setEnabled(false);
      moveDownButton=createToolItem(toolbar,"Move down",UIIcon.ARROW_DOWN,new Runnable(){
        @Override public void run(){
          int selectionIndex=getSelectionIndex(columnsViewer.getTree());
          moveColumn(selectionIndex,selectionIndex + 1);
        }
      }
);
      moveDownButton.setEnabled(false);
      moveBottomButton=createToolItem(toolbar,"Move to bottom",UIIcon.ARROW_BOTTOM,new Runnable(){
        @Override public void run(){
          int selectionIndex=getSelectionIndex(columnsViewer.getTree());
          moveColumn(selectionIndex,getItemsCount() - 1);
        }
      }
);
      moveBottomButton.setEnabled(false);
      UIUtils.createToolBarSeparator(toolbar,SWT.VERTICAL);
      createToolItem(toolbar,"Sort",UIIcon.SORT,new Runnable(){
        @Override public void run(){
          Collections.sort(attributes,ALPHA_SORTER);
          for (int i=0; i < attributes.size(); i++) {
            final DBDAttributeConstraint constraint=getBindingConstraint(attributes.get(i));
            constraint.setVisualPosition(i);
          }
          columnsViewer.refresh();
        }
      }
);
      UIUtils.createToolBarSeparator(toolbar,SWT.VERTICAL);
      ToolItem showAllButton=createToolItem(toolbar,"Show All",null,new Runnable(){
        @Override public void run(){
          for (          DBDAttributeConstraint constraint : constraints) {
            constraint.setVisible(true);
          }
          columnsViewer.refresh();
        }
      }
);
      showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));
      ToolItem showNoneButton=createToolItem(toolbar,"Show None",null,new Runnable(){
        @Override public void run(){
          for (          DBDAttributeConstraint constraint : constraints) {
            constraint.setVisible(false);
          }
          columnsViewer.refresh();
        }
      }
);
      showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));
      createToolItem(toolbar,"Reset",UIIcon.REFRESH,new Runnable(){
        @Override public void run(){
          dataFilter.reset();
          constraints=new ArrayList<>(dataFilter.getConstraints());
          refreshData();
          orderText.setText("");
          whereText.setText("");
        }
      }
);
      columnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
        @Override public void selectionChanged(        SelectionChangedEvent event){
          int selectionIndex=getSelectionIndex(columnsViewer.getTree());
          moveTopButton.setEnabled(selectionIndex > 0);
          moveUpButton.setEnabled(selectionIndex > 0);
          moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);
          moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);
        }
      }
);
    }
    TabItem libsTab=new TabItem(tabFolder,SWT.NONE);
    libsTab.setText(CoreMessages.controls_resultset_filter_group_columns);
    libsTab.setToolTipText("Set criteria and order for individual column(s)");
    libsTab.setControl(columnsGroup);
  }
  createCustomFilters(tabFolder);
  columnsViewer.setInput(attributes);
  refreshData();
  UIUtils.packColumns(columnsViewer.getTree());
  if (criteriaColumn.getWidth() < 200) {
    criteriaColumn.setWidth(200);
  }
  if (!resultSetViewer.supportsDataFilter()) {
    Label warnLabel=new Label(composite,SWT.NONE);
    warnLabel.setText(CoreMessages.controls_resultset_filter_warning_custom_order_disabled);
    warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));
  }
  return parent;
}
