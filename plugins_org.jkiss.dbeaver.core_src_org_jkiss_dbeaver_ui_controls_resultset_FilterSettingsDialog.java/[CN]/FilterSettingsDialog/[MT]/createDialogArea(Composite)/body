{
  getShell().setText(CoreMessages.controls_resultset_filter_title);
  getShell().setImage(DBIcon.FILTER.getImage());
  Composite composite=(Composite)super.createDialogArea(parent);
  TabFolder tabFolder=new TabFolder(composite,SWT.NONE);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  TableColumn criteriaColumn;
{
    Composite columnsGroup=UIUtils.createPlaceholder(tabFolder,1);
    columnsViewer=CheckboxTableViewer.newCheckList(columnsGroup,SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK);
    columnsViewer.setContentProvider(new ListContentProvider());
    columnsViewer.setLabelProvider(new ColumnLabelProvider());
    columnsViewer.setCheckStateProvider(new CheckStateProvider());
    final Table columnsTable=columnsViewer.getTable();
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.heightHint=300;
    columnsTable.setLayoutData(gd);
    columnsTable.setHeaderVisible(true);
    columnsTable.setLinesVisible(true);
    UIUtils.createTableColumn(columnsTable,SWT.LEFT,CoreMessages.controls_resultset_filter_column_name);
    UIUtils.createTableColumn(columnsTable,SWT.LEFT,"#");
    UIUtils.createTableColumn(columnsTable,SWT.LEFT,CoreMessages.controls_resultset_filter_column_order);
    criteriaColumn=UIUtils.createTableColumn(columnsTable,SWT.LEFT,CoreMessages.controls_resultset_filter_column_criteria);
    final CustomTableEditor tableEditor=new CustomTableEditor(columnsTable){
      @Override protected Control createEditor(      Table table,      int index,      TableItem item){
        if (index == 2) {
          toggleColumnOrder(item);
          return null;
        }
 else         if (index == 3 && resultSetViewer.supportsDataFilter()) {
          Text text=new Text(columnsTable,SWT.BORDER);
          text.setText(item.getText(index));
          text.selectAll();
          return text;
        }
        return null;
      }
      @Override protected void saveEditorValue(      Control control,      int index,      TableItem item){
        Text text=(Text)control;
        String criteria=text.getText().trim();
        DBDAttributeConstraint constraint=(DBDAttributeConstraint)item.getData();
        if (CommonUtils.isEmpty(criteria)) {
          constraint.setCriteria(null);
        }
 else {
          constraint.setCriteria(criteria);
        }
        item.setText(3,criteria);
      }
      private void toggleColumnOrder(      TableItem item){
        DBDAttributeConstraint constraint=(DBDAttributeConstraint)item.getData();
        if (constraint.getOrderPosition() == 0) {
          constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);
          constraint.setOrderDescending(false);
        }
 else         if (!constraint.isOrderDescending()) {
          constraint.setOrderDescending(true);
        }
 else {
          for (          DBDAttributeConstraint con2 : dataFilter.getConstraints()) {
            if (con2.getOrderPosition() > constraint.getOrderPosition()) {
              con2.setOrderPosition(con2.getOrderPosition() - 1);
            }
          }
          constraint.setOrderPosition(0);
          constraint.setOrderDescending(false);
        }
        columnsViewer.refresh();
      }
    }
;
    columnsViewer.addCheckStateListener(new ICheckStateListener(){
      @Override public void checkStateChanged(      CheckStateChangedEvent event){
        ((DBDAttributeConstraint)event.getElement()).setVisible(event.getChecked());
      }
    }
);
{
      Composite controlGroup=new Composite(columnsGroup,SWT.NONE);
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.verticalIndent=3;
      controlGroup.setLayoutData(gd);
      controlGroup.setLayout(new FillLayout());
      final Button moveUpButton=UIUtils.createPushButton(controlGroup,"Move Up",null);
      moveUpButton.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          int selectionIndex=columnsViewer.getTable().getSelectionIndex();
          moveColumn(selectionIndex,selectionIndex - 1);
        }
      }
);
      moveUpButton.setEnabled(false);
      final Button moveDownButton=UIUtils.createPushButton(controlGroup,"Move Down",null);
      moveDownButton.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          int selectionIndex=columnsViewer.getTable().getSelectionIndex();
          moveColumn(selectionIndex,selectionIndex + 1);
        }
      }
);
      moveDownButton.setEnabled(false);
      Button showAllButton=UIUtils.createPushButton(controlGroup,"Show All",null);
      showAllButton.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          for (          DBDAttributeConstraint constraint : constraints) {
            constraint.setVisible(true);
          }
          columnsViewer.refresh();
        }
      }
);
      Button showNoneButton=UIUtils.createPushButton(controlGroup,"Show None",null);
      showNoneButton.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          for (          DBDAttributeConstraint constraint : constraints) {
            constraint.setVisible(false);
          }
          columnsViewer.refresh();
        }
      }
);
      Button resetButton=UIUtils.createPushButton(controlGroup,CoreMessages.controls_resultset_filter_button_reset,null);
      resetButton.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          dataFilter.reset();
          constraints=new ArrayList<DBDAttributeConstraint>(dataFilter.getConstraints());
          columnsViewer.setInput(constraints);
          orderText.setText("");
          whereText.setText("");
        }
      }
);
      columnsViewer.addSelectionChangedListener(new ISelectionChangedListener(){
        @Override public void selectionChanged(        SelectionChangedEvent event){
          int selectionIndex=columnsViewer.getTable().getSelectionIndex();
          moveUpButton.setEnabled(selectionIndex > 0);
          moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < columnsViewer.getTable().getItemCount() - 1);
        }
      }
);
    }
    TabItem libsTab=new TabItem(tabFolder,SWT.NONE);
    libsTab.setText(CoreMessages.controls_resultset_filter_group_columns);
    libsTab.setToolTipText("Set criteria and order for individual column(s)");
    libsTab.setControl(columnsGroup);
  }
  createCustomFilters(tabFolder);
  columnsViewer.setInput(constraints);
  UIUtils.packColumns(columnsViewer.getTable());
  if (criteriaColumn.getWidth() < 200) {
    criteriaColumn.setWidth(200);
  }
  if (!resultSetViewer.supportsDataFilter()) {
    Label warnLabel=new Label(composite,SWT.NONE);
    warnLabel.setText(CoreMessages.controls_resultset_filter_warning_custom_order_disabled);
    warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));
  }
  return parent;
}
