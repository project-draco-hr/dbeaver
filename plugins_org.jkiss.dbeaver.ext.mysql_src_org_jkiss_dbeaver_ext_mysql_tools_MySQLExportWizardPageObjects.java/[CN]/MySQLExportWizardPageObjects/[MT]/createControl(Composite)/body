{
  Composite composite=UIUtils.createPlaceholder(parent,1);
  Group objectsGroup=UIUtils.createControlGroup(composite,MySQLMessages.tools_db_export_wizard_page_settings_group_objects,1,GridData.FILL_HORIZONTAL,0);
  objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));
  SashForm sash=new CustomSashForm(objectsGroup,SWT.VERTICAL);
  sash.setLayoutData(new GridData(GridData.FILL_BOTH));
  catalogTable=new Table(sash,SWT.BORDER | SWT.CHECK);
  catalogTable.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      TableItem item=(TableItem)event.item;
      MySQLCatalog catalog=(MySQLCatalog)item.getData();
      if (event.detail == SWT.CHECK) {
        catalogTable.select(catalogTable.indexOf(item));
        checkedObjects.remove(catalog);
      }
      loadTables(catalog);
      updateState();
    }
  }
);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=50;
  catalogTable.setLayoutData(gd);
  tablesTable=new Table(sash,SWT.BORDER | SWT.CHECK);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=50;
  tablesTable.setLayoutData(gd);
  tablesTable.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      if (event.detail == SWT.CHECK) {
        updateCheckedTables();
        updateState();
      }
    }
  }
);
  final Button exportViewsCheck=UIUtils.createCheckbox(objectsGroup,"Export views",false);
  exportViewsCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      wizard.exportViews=exportViewsCheck.getSelection();
      loadTables(null);
    }
  }
);
  MySQLDataSource dataSource=null;
  Set<MySQLCatalog> activeCatalogs=new LinkedHashSet<>();
  for (  DBSObject object : wizard.getDatabaseObjects()) {
    if (object instanceof MySQLCatalog) {
      activeCatalogs.add((MySQLCatalog)object);
      dataSource=((MySQLCatalog)object).getDataSource();
    }
 else     if (object instanceof MySQLTableBase) {
      MySQLCatalog catalog=((MySQLTableBase)object).getContainer();
      dataSource=catalog.getDataSource();
      activeCatalogs.add(catalog);
      Set<MySQLTableBase> tables=checkedObjects.get(catalog);
      if (tables == null) {
        tables=new HashSet<>();
        checkedObjects.put(catalog,tables);
      }
      tables.add((MySQLTableBase)object);
      if (((MySQLTableBase)object).isView()) {
        wizard.exportViews=true;
        exportViewsCheck.setSelection(true);
      }
    }
 else     if (object.getDataSource() instanceof MySQLDataSource) {
      dataSource=(MySQLDataSource)object.getDataSource();
    }
  }
  if (dataSource != null) {
    boolean tablesLoaded=false;
    for (    MySQLCatalog catalog : dataSource.getCatalogs()) {
      TableItem item=new TableItem(catalogTable,SWT.NONE);
      item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));
      item.setText(0,catalog.getName());
      item.setData(catalog);
      if (activeCatalogs.contains(catalog)) {
        item.setChecked(true);
        catalogTable.select(catalogTable.indexOf(item));
        if (!tablesLoaded) {
          loadTables(catalog);
          tablesLoaded=true;
        }
      }
    }
  }
  updateState();
  setControl(composite);
}
