{
  super(schema,table,JDBCUtils.safeGetStringTrimmed(dbResult,"INDNAME"),null,true);
  this.uniqueRule=CommonUtils.valueOf(DB2UniqueRule.class,JDBCUtils.safeGetString(dbResult,"UNIQUERULE"));
  this.colCount=JDBCUtils.safeGetInteger(dbResult,"COLCOUNT");
  this.uniqueColCount=JDBCUtils.safeGetInteger(dbResult,"UNIQUE_COLCOUNT");
  this.pctFree=JDBCUtils.safeGetInteger(dbResult,"PCTFREE");
  this.indexId=JDBCUtils.safeGetInteger(dbResult,"IID");
  this.minPctUsed=JDBCUtils.safeGetInteger(dbResult,"MINPCTUSED");
  this.reverseScans=JDBCUtils.safeGetBoolean(dbResult,"REVERSE_SCANS",DB2YesNo.Y.name());
  this.tablespaceId=JDBCUtils.safeGetInteger(dbResult,"TBSPACEID");
  this.remarks=JDBCUtils.safeGetString(dbResult,"REMARKS");
  this.createTime=JDBCUtils.safeGetTimestamp(dbResult,"CREATE_TIME");
  this.madeUnique=JDBCUtils.safeGetBoolean(dbResult,"MADE_UNIQUE");
  this.statsTime=JDBCUtils.safeGetTimestamp(dbResult,"STATS_TIME");
  this.fullKeycard=JDBCUtils.safeGetLong(dbResult,"FULLKEYCARD");
  this.firstKeycard=JDBCUtils.safeGetLong(dbResult,"FIRSTKEYCARD");
  this.first2Keycard=JDBCUtils.safeGetLong(dbResult,"FIRST2KEYCARD");
  this.first3Keycard=JDBCUtils.safeGetLong(dbResult,"FIRST3KEYCARD");
  this.first4Keycard=JDBCUtils.safeGetLong(dbResult,"FIRST4KEYCARD");
  this.clusterRatio=JDBCUtils.safeGetInteger(dbResult,"CLUSTERRATIO");
  this.db2IndexType=CommonUtils.valueOf(DB2IndexType.class,JDBCUtils.safeGetStringTrimmed(dbResult,"INDEXTYPE"));
  this.indexType=db2IndexType.getDBSIndexType();
}
