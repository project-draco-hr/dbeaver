{
  DBSStructureAssistant structureAssistant=DBUtils.getAdapter(DBSStructureAssistant.class,context.getDataSource());
  if (structureAssistant == null) {
    return;
  }
  String nameMask=((ObjectFilter)itemsFilter).getNameMask();
  DBRProgressMonitor monitor=RuntimeUtils.makeMonitor(progressMonitor);
  try {
    monitor.beginTask("Search for '" + nameMask + "'",100);
    List<DBSObjectType> typesToSearch=new ArrayList<>();
    for (    DBSObjectType type : structureAssistant.getSupportedObjectTypes()) {
      Class<? extends DBSObject> typeClass=type.getTypeClass();
      if (DBSEntityElement.class.isAssignableFrom(typeClass)) {
        continue;
      }
      typesToSearch.add(type);
    }
    Collection<DBSObjectReference> result=structureAssistant.findObjectsByMask(monitor,container,typesToSearch.toArray(new DBSObjectType[typesToSearch.size()]),nameMask,false,true,1000);
    DBPDataSourceContainer dsContainer=context.getDataSource().getContainer();
    for (    DBSObjectReference ref : result) {
      DBSObject object;
      try {
        object=ref.resolveObject(monitor);
      }
 catch (      DBException e) {
        continue;
      }
      if (object != null) {
        DBSObjectFilter filter=dsContainer.getObjectFilter(object.getClass(),ref.getContainer(),true);
        if (filter == null || filter.matches(ref.getName())) {
          contentProvider.add(ref,itemsFilter);
        }
      }
    }
  }
 catch (  DBException e) {
    throw new CoreException(GeneralUtils.makeExceptionStatus(e));
  }
 finally {
    monitor.done();
  }
}
