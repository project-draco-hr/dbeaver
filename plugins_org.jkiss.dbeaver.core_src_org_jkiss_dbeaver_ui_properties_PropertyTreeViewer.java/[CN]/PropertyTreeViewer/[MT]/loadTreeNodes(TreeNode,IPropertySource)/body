{
  Map<String,TreeNode> categories=new LinkedHashMap<String,TreeNode>();
  final IPropertyDescriptor[] props=propertySource.getPropertyDescriptors();
  for (  IPropertyDescriptor prop : props) {
    String categoryName=prop.getCategory();
    if (CommonUtils.isEmpty(categoryName)) {
      categoryName=CATEGORY_GENERAL;
    }
    TreeNode category=(parent != null ? parent : categories.get(categoryName));
    if (category == null) {
      category=new TreeNode(parent,propertySource,categoryName);
      categories.put(categoryName,category);
    }
    TreeNode propNode=new TreeNode(category,propertySource,prop);
    if (!(propertySource instanceof IPropertySourceEditable) && prop instanceof DBPPropertyDescriptor) {
      Class<?> propType=((DBPPropertyDescriptor)prop).getDataType();
      if (propType != null) {
        if (DBPObject.class.isAssignableFrom(propType)) {
          Object propertyValue=propertySource.getPropertyValue(prop.getId());
          if (propertyValue != null) {
            PropertyCollector nestedCollector=new PropertyCollector(propertyValue,true);
            if (nestedCollector.collectProperties()) {
              categories.putAll(loadTreeNodes(propNode,nestedCollector));
            }
          }
        }
 else         if (BeanUtils.isCollectionType(propType)) {
          Object propertyValue=propertySource.getPropertyValue(prop.getId());
          if (propertyValue != null) {
            Collection<?> collection;
            if (BeanUtils.isArrayType(propType)) {
              collection=Arrays.asList((Object[])propertyValue);
            }
 else {
              collection=(Collection<?>)propertyValue;
            }
            PropertySourceCollection psc=new PropertySourceCollection(collection);
            for (            IPropertyDescriptor pd : psc.getPropertyDescriptors()) {
              TreeNode itemNode=new TreeNode(propNode,psc,pd);
            }
          }
        }
      }
    }
  }
  return categories;
}
