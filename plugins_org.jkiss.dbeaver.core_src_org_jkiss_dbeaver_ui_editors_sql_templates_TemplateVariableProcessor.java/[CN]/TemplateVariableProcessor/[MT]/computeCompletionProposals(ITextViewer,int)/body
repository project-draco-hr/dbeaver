{
  if (fContextType == null)   return null;
  List<TemplateVariableProposal> proposals=new ArrayList<TemplateVariableProposal>();
  String text=viewer.getDocument().get();
  int start=getStart(text,documentOffset);
  int end=documentOffset;
  String string=text.substring(start,end);
  int colon=string.indexOf(':');
  boolean includeBrace=true;
  int offset=start;
  String prefix=string;
  if (colon != -1) {
    includeBrace=false;
    offset=start + colon + 1;
    prefix=string.substring(colon + 1);
  }
 else {
    int escape=string.indexOf("${");
    if (escape != -1) {
      offset=start + escape + 2;
      includeBrace=false;
      prefix=string.substring(escape + 2);
    }
  }
  if (prefix.equals("$"))   prefix="";
  int length=end - offset;
  for (Iterator<TemplateVariableResolver> iterator=fContextType.resolvers(); iterator.hasNext(); ) {
    TemplateVariableResolver variable=iterator.next();
    if (variable.getType().startsWith(prefix))     proposals.add(new TemplateVariableProposal(variable,offset,length,viewer,includeBrace));
  }
  Collections.sort(proposals,fgTemplateVariableProposalComparator);
  return proposals.toArray(new ICompletionProposal[proposals.size()]);
}
