{
  Transfer[] types=new Transfer[]{TextTransfer.getInstance(),TreeNodeTransfer.getInstance(),DatabaseObjectTransfer.getInstance()};
  int operations=DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;
  final DragSource source=new DragSource(viewer.getControl(),operations);
  source.setTransfer(types);
  source.addDragListener(new DragSourceListener(){
    private IStructuredSelection selection;
    @Override public void dragStart(    DragSourceEvent event){
      selection=(IStructuredSelection)viewer.getSelection();
    }
    @Override public void dragSetData(    DragSourceEvent event){
      if (!selection.isEmpty()) {
        List<DBNNode> nodes=new ArrayList<DBNNode>();
        List<DBPNamedObject> objects=new ArrayList<DBPNamedObject>();
        String lineSeparator=CommonUtils.getLineSeparator();
        StringBuilder buf=new StringBuilder();
        for (Iterator<?> i=selection.iterator(); i.hasNext(); ) {
          Object nextSelected=i.next();
          if (!(nextSelected instanceof DBNNode)) {
            continue;
          }
          nodes.add((DBNNode)nextSelected);
          String nodeName;
          if (nextSelected instanceof DBNDatabaseNode) {
            DBSObject object=((DBNDatabaseNode)nextSelected).getObject();
            if (object == null) {
              continue;
            }
            nodeName=DBUtils.getObjectFullName(object);
            objects.add(object);
          }
 else {
            nodeName=((DBNNode)nextSelected).getNodeName();
          }
          if (buf.length() > 0) {
            buf.append(lineSeparator);
          }
          buf.append(nodeName);
        }
        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {
          event.data=nodes;
        }
 else         if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {
          event.data=objects;
        }
 else         if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
          event.data=buf.toString();
        }
      }
 else {
        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {
          event.data=Collections.emptyList();
        }
 else         if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {
          event.data=Collections.emptyList();
        }
 else         if (TextTransfer.getInstance().isSupportedType(event.dataType)) {
          event.data="";
        }
      }
    }
    @Override public void dragFinished(    DragSourceEvent event){
    }
  }
);
  DropTarget dropTarget=new DropTarget(viewer.getControl(),DND.DROP_MOVE);
  dropTarget.setTransfer(new Transfer[]{TreeNodeTransfer.getInstance()});
  dropTarget.addDropListener(new DropTargetListener(){
    @Override public void dragEnter(    DropTargetEvent event){
      handleDragEvent(event);
    }
    @Override public void dragLeave(    DropTargetEvent event){
      handleDragEvent(event);
    }
    @Override public void dragOperationChanged(    DropTargetEvent event){
      handleDragEvent(event);
    }
    @Override public void dragOver(    DropTargetEvent event){
      handleDragEvent(event);
    }
    @Override public void drop(    DropTargetEvent event){
      handleDragEvent(event);
      if (event.detail == DND.DROP_MOVE) {
        moveNodes(event);
      }
    }
    @Override public void dropAccept(    DropTargetEvent event){
      handleDragEvent(event);
    }
    private void handleDragEvent(    DropTargetEvent event){
      event.detail=isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;
      event.feedback=DND.FEEDBACK_SELECT;
    }
    private boolean isDropSupported(    DropTargetEvent event){
      if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType) && event.item instanceof TreeItem) {
        TreeItem treeItem=(TreeItem)event.item;
        Object curObject=treeItem.getData();
        if (curObject instanceof DBNNode) {
          Collection<DBNNode> nodesToDrop=(Collection<DBNNode>)event.data;
          if (!CommonUtils.isEmpty(nodesToDrop)) {
            for (            DBNNode node : nodesToDrop) {
              if (!((DBNNode)curObject).supportsDrop(node)) {
                return false;
              }
            }
            return true;
          }
 else {
            return ((DBNNode)curObject).supportsDrop(null);
          }
        }
      }
      return false;
    }
    private void moveNodes(    DropTargetEvent event){
      if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType) && event.item instanceof TreeItem) {
        TreeItem treeItem=(TreeItem)event.item;
        Object curObject=treeItem.getData();
        if (curObject instanceof DBNNode) {
          Collection<DBNNode> nodesToDrop=TreeNodeTransfer.getInstance().getObject();
          try {
            ((DBNNode)curObject).dropNodes(nodesToDrop);
          }
 catch (          DBException e) {
            UIUtils.showErrorDialog(viewer.getControl().getShell(),"Drop error","Can't drop node",e);
          }
        }
      }
    }
  }
);
}
