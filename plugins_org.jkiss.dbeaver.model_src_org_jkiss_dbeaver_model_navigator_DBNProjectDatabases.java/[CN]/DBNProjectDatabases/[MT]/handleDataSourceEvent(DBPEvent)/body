{
  DBNModel model=getModel();
switch (event.getAction()) {
case OBJECT_ADD:
    if (event.getObject() instanceof DBPDataSourceContainer) {
      addDataSource((DBPDataSourceContainer)event.getObject(),true);
    }
 else     if (model.getNodeByObject(event.getObject()) == null) {
      DBNDatabaseNode parentNode=model.getParentNode(event.getObject());
      boolean parentFound=(parentNode != null);
      if (parentNode == null) {
        parentNode=model.getParentNode(event.getObject());
        parentFound=false;
      }
      if (parentNode != null) {
        if (parentNode.getChildNodes() == null && parentNode.allowsChildren()) {
          final DBNDatabaseNode nodeToLoad=parentNode;
          try {
            model.getApplication().getRunnableContext().run(true,true,new DBRRunnableWithProgress(){
              @Override public void run(              DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                try {
                  nodeToLoad.getChildren(monitor);
                }
 catch (                Exception e) {
                  throw new InvocationTargetException(e);
                }
              }
            }
);
          }
 catch (          InvocationTargetException e) {
            log.error(e.getTargetException());
          }
catch (          InterruptedException e) {
          }
        }
        if (!parentFound) {
          parentNode=model.getParentNode(event.getObject());
        }
        if (parentNode != null && parentNode.getChildNodes() != null && !parentNode.hasChildItem(event.getObject())) {
          parentNode.addChildItem(event.getObject());
        }
      }
    }
  break;
case OBJECT_REMOVE:
if (event.getObject() instanceof DBPDataSourceContainer) {
  removeDataSource((DBPDataSourceContainer)event.getObject());
}
 else {
  final DBNDatabaseNode node=model.getNodeByObject(event.getObject());
  if (node != null && node.getParentNode() instanceof DBNDatabaseNode) {
    ((DBNDatabaseNode)node.getParentNode()).removeChildItem(event.getObject());
  }
}
break;
case OBJECT_UPDATE:
case OBJECT_SELECT:
{
DBNNode dbmNode=model.getNodeByObject(event.getObject());
if (dbmNode != null) {
DBNEvent.NodeChange nodeChange;
Boolean enabled=null;
if (event.getAction() == DBPEvent.Action.OBJECT_SELECT) {
  nodeChange=DBNEvent.NodeChange.REFRESH;
}
 else {
  enabled=event.getEnabled();
  if (enabled != null) {
    if (enabled) {
      nodeChange=DBNEvent.NodeChange.LOAD;
    }
 else {
      nodeChange=DBNEvent.NodeChange.UNLOAD;
    }
  }
 else {
    nodeChange=DBNEvent.NodeChange.REFRESH;
  }
}
model.fireNodeUpdate(this,dbmNode,nodeChange);
if (enabled != null && !enabled) {
  dbmNode.clearNode(false);
}
}
break;
}
}
}
