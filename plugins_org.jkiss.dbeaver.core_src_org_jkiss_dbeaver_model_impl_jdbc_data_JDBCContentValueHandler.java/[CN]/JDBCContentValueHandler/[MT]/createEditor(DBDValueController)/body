{
switch (controller.getEditType()) {
case INLINE:
{
      if (controller.getValue() instanceof JDBCContentChars) {
        return new ValueEditor<Text>(controller){
          @Override public void refreshValue(){
            JDBCContentChars newValue=(JDBCContentChars)valueController.getValue();
            control.setText(newValue.getData() == null ? "" : newValue.getData());
          }
          @Override protected Text createControl(          Composite editPlaceholder){
            final Text editor=new Text(editPlaceholder,SWT.NONE);
            editor.setEditable(!valueController.isReadOnly());
            long maxLength=valueController.getAttributeMetaData().getMaxLength();
            if (maxLength <= 0) {
              maxLength=MAX_STRING_LENGTH;
            }
 else {
              maxLength=Math.min(maxLength,MAX_STRING_LENGTH);
            }
            editor.setTextLimit((int)maxLength);
            editor.selectAll();
            return editor;
          }
          @Override public Object extractValue(          DBRProgressMonitor monitor){
            String newValue=control.getText();
            return new JDBCContentChars(valueController.getDataSource(),newValue);
          }
        }
;
      }
 else {
        return null;
      }
    }
case EDITOR:
{
    Object value=controller.getValue();
    if (value instanceof DBDContent && controller instanceof DBDAttributeController) {
      DBDContent content=(DBDContent)value;
      boolean isText=ContentUtils.isTextContent(content);
      List<IContentEditorPart> parts=new ArrayList<IContentEditorPart>();
      if (isText) {
        parts.add(new ContentTextEditorPart());
        if (isXML(content)) {
          parts.add(new ContentXMLEditorPart());
        }
      }
 else {
        parts.add(new ContentBinaryEditorPart());
        parts.add(new ContentTextEditorPart());
        parts.add(new ContentImageEditorPart());
      }
      return ContentEditor.openEditor((DBDAttributeController)controller,parts.toArray(new IContentEditorPart[parts.size()]));
    }
 else {
      controller.showMessage(CoreMessages.model_jdbc_unsupported_content_value_type_,true);
      return null;
    }
  }
case PANEL:
{
  final DBDContent content=(DBDContent)controller.getValue();
  final IContentEditorPart editor;
  if (ContentUtils.isTextContent(content)) {
    if (isXML(content)) {
      editor=new ContentXMLEditorPart();
    }
 else {
      editor=new ContentTextEditorPart();
    }
  }
 else {
    editor=new ContentBinaryEditorPart();
  }
  final ContentEditorInput input;
  try {
    input=new ContentEditorInput((DBDAttributeController)controller,new IContentEditorPart[]{editor},VoidProgressMonitor.INSTANCE);
    editor.init(new SubEditorSite(controller.getValueSite()),input);
  }
 catch (  PartInitException e) {
    log.error("Can't initialize content editor",e);
    return null;
  }
  return new ValueEditorEx<Control>(controller){
    private DBDContent prevValue=content;
    @Override public void showValueEditor(){
    }
    @Override public void closeValueEditor(){
      editor.dispose();
      input.release(VoidProgressMonitor.INSTANCE);
    }
    @Override public void refreshValue(){
      if (prevValue == controller.getValue()) {
        return;
      }
      prevValue=(DBDContent)controller.getValue();
      try {
        input.refreshContent(VoidProgressMonitor.INSTANCE,(DBDAttributeController)controller);
      }
 catch (      DBException e) {
        log.error("Error refreshing content value",e);
      }
    }
    @Override public Object extractValue(    DBRProgressMonitor monitor) throws DBException {
      input.updateContentFromFile(monitor.getNestedMonitor());
      return input.getContent();
    }
    @Override protected Control createControl(    Composite editPlaceholder){
      editor.createPartControl(controller.getEditPlaceholder());
      return editor.getEditorControl();
    }
  }
;
}
default :
return null;
}
}
