{
switch (controller.getEditType()) {
case INLINE:
{
      if (controller.getValue() instanceof DBDContentCached) {
        final boolean isText=ContentUtils.isTextContent(((DBDContent)controller.getValue()));
        return new ValueEditor<Text>(controller){
          @Override public void primeEditorValue(          Object value) throws DBException {
            if (value instanceof DBDContentCached) {
              DBDContentCached newValue=(DBDContentCached)value;
              Object cachedValue=newValue.getCachedValue();
              String stringValue;
              if (cachedValue == null) {
                stringValue="";
              }
 else               if (cachedValue instanceof byte[]) {
                byte[] bytes=(byte[])cachedValue;
                stringValue=DBUtils.getBinaryPresentation(controller.getDataSource()).toString(bytes,0,bytes.length);
              }
 else {
                stringValue=cachedValue.toString();
              }
              control.setText(stringValue);
              control.selectAll();
            }
          }
          @Override protected Text createControl(          Composite editPlaceholder){
            final Text editor=new Text(editPlaceholder,SWT.BORDER);
            editor.setEditable(!valueController.isReadOnly());
            long maxLength=valueController.getValueType().getMaxLength();
            if (maxLength <= 0) {
              maxLength=MAX_STRING_LENGTH;
            }
 else {
              maxLength=Math.min(maxLength,MAX_STRING_LENGTH);
            }
            editor.setTextLimit((int)maxLength);
            return editor;
          }
          @Override public Object extractEditorValue(){
            String newValue=control.getText();
            if (isText) {
              return new JDBCContentChars(valueController.getDataSource(),newValue);
            }
 else {
              return new JDBCContentBytes(valueController.getDataSource(),newValue);
            }
          }
        }
;
      }
 else {
        return null;
      }
    }
case EDITOR:
{
    Object value=controller.getValue();
    DBDValueController.EditType binaryEditType=DBDValueController.EditType.valueOf(controller.getDataSource().getContainer().getPreferenceStore().getString(PrefConstants.RESULT_SET_BINARY_EDITOR_TYPE));
    if (binaryEditType != DBDValueController.EditType.EDITOR && value instanceof DBDContentCached) {
      return new TextViewDialog(controller);
    }
 else     if (value instanceof DBDContent) {
      DBDContent content=(DBDContent)value;
      boolean isText=ContentUtils.isTextContent(content);
      List<ContentEditorPart> parts=new ArrayList<ContentEditorPart>();
      if (isText) {
        parts.add(new ContentTextEditorPart());
        if (isXML(content)) {
          parts.add(new ContentXMLEditorPart());
        }
      }
 else {
        parts.add(new ContentBinaryEditorPart());
        parts.add(new ContentTextEditorPart());
        parts.add(new ContentImageEditorPart());
      }
      return ContentEditor.openEditor(controller,parts.toArray(new ContentEditorPart[parts.size()]));
    }
 else {
      controller.showMessage(CoreMessages.model_jdbc_unsupported_content_value_type_,true);
      return null;
    }
  }
case PANEL:
{
  return new ValueEditorEx<Control>(controller){
    @Override public void showValueEditor(){
    }
    @Override public void closeValueEditor(){
    }
    @Override public void primeEditorValue(    final Object value) throws DBException {
      DBeaverUI.runInUI(valueController.getValueSite().getWorkbenchWindow(),new DBRRunnableWithProgress(){
        @Override public void run(        DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          try {
            DBDContent content=(DBDContent)value;
            DBDContentStorage data=content.getContents(monitor);
            if (control instanceof Text) {
              Text text=(Text)control;
              StringWriter buffer=new StringWriter();
              if (data != null) {
                Reader contentReader=data.getContentReader();
                try {
                  ContentUtils.copyStreams(contentReader,-1,buffer,monitor);
                }
  finally {
                  ContentUtils.close(contentReader);
                }
              }
              text.setText(buffer.toString());
            }
 else             if (control instanceof HexEditControl) {
              HexEditControl hexEditControl=(HexEditControl)control;
              ByteArrayOutputStream buffer=new ByteArrayOutputStream();
              if (data != null) {
                InputStream contentStream=data.getContentStream();
                try {
                  ContentUtils.copyStreams(contentStream,-1,buffer,monitor);
                }
 catch (                IOException e) {
                  ContentUtils.close(contentStream);
                }
              }
              hexEditControl.setContent(buffer.toByteArray());
            }
 else             if (control instanceof ImageViewer) {
              ImageViewer imageViewControl=(ImageViewer)control;
              InputStream contentStream=data.getContentStream();
              try {
                if (!imageViewControl.loadImage(contentStream)) {
                  controller.showMessage("Can't load image: " + imageViewControl.getLastError().getMessage(),true);
                }
 else {
                  controller.showMessage("Image: " + imageViewControl.getImageDescription(),false);
                }
              }
  finally {
                ContentUtils.close(contentStream);
              }
            }
          }
 catch (          Exception e) {
            log.error(e);
            valueController.showMessage(e.getMessage(),true);
          }
        }
      }
);
    }
    @Override public Object extractEditorValue() throws DBException {
      final DBDContent content=(DBDContent)valueController.getValue();
      DBeaverUI.runInUI(DBeaverUI.getActiveWorkbenchWindow(),new DBRRunnableWithProgress(){
        @Override public void run(        DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          try {
            if (control instanceof Text) {
              Text styledText=(Text)control;
              content.updateContents(monitor,new StringContentStorage(styledText.getText()));
            }
 else             if (control instanceof HexEditControl) {
              HexEditControl hexEditControl=(HexEditControl)control;
              BinaryContent binaryContent=hexEditControl.getContent();
              ByteBuffer buffer=ByteBuffer.allocate((int)binaryContent.length());
              try {
                binaryContent.get(buffer,0);
              }
 catch (              IOException e) {
                log.error(e);
              }
              content.updateContents(monitor,new BytesContentStorage(buffer.array(),ContentUtils.getDefaultFileEncoding()));
            }
          }
 catch (          Exception e) {
            throw new InvocationTargetException(e);
          }
        }
      }
);
      return content;
    }
    @Override protected Control createControl(    Composite editPlaceholder){
      DBDContent content=(DBDContent)valueController.getValue();
      if (ContentUtils.isTextContent(content)) {
        Text text=new Text(editPlaceholder,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
        text.setEditable(!valueController.isReadOnly());
        return text;
      }
 else {
        ImageDetector imageDetector=new ImageDetector(content);
        if (!content.isNull()) {
          DBeaverUI.runInUI(valueController.getValueSite().getWorkbenchWindow(),imageDetector);
        }
        if (imageDetector.isImage()) {
          ImageViewer imageViewer=new ImageViewer(editPlaceholder,SWT.BORDER);
          imageViewer.fillToolBar(valueController.getEditToolBar());
          return imageViewer;
        }
 else {
          return new HexEditControl(editPlaceholder,SWT.BORDER);
        }
      }
    }
  }
;
}
default :
return null;
}
}
