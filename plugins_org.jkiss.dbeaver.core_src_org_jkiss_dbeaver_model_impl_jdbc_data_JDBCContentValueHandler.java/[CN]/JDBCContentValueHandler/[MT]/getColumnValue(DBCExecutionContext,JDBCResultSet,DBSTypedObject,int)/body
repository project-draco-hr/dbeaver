{
  Object value=resultSet.getObject(columnIndex);
  if (value == null && !resultSet.wasNull()) {
switch (column.getTypeID()) {
case java.sql.Types.CHAR:
case java.sql.Types.VARCHAR:
case java.sql.Types.NVARCHAR:
case java.sql.Types.LONGVARCHAR:
case java.sql.Types.LONGNVARCHAR:
case java.sql.Types.CLOB:
case java.sql.Types.NCLOB:
      value=resultSet.getString(columnIndex);
    break;
case java.sql.Types.BINARY:
case java.sql.Types.VARBINARY:
case java.sql.Types.LONGVARBINARY:
case java.sql.Types.BLOB:
  value=resultSet.getBytes(columnIndex);
break;
case java.sql.Types.SQLXML:
value=resultSet.getSQLXML(columnIndex);
break;
default :
value=resultSet.getObject(columnIndex);
break;
}
}
if (value == null) {
return createValueObject(context,column);
}
 else if (value instanceof byte[]) {
return new JDBCContentBytes(context.getDataSource(),(byte[])value);
}
 else if (value instanceof String) {
return new JDBCContentChars(context.getDataSource(),(String)value);
}
 else if (value instanceof Blob) {
return new JDBCContentBLOB(context.getDataSource(),(Blob)value);
}
 else if (value instanceof Clob) {
return new JDBCContentCLOB(context.getDataSource(),(Clob)value);
}
 else if (value instanceof SQLXML) {
return new JDBCContentXML(context.getDataSource(),(SQLXML)value);
}
 else {
throw new DBCException(CoreMessages.model_jdbc_unsupported_value_type_ + value.getClass().getName());
}
}
