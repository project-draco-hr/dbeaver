{
  Map<File,List<File>> pluginJarMap=new HashMap<File,List<File>>();
  System.out.println("Collecting an information about jars for localization.");
  for (  String locale : locales.split(",")) {
    String[] babelJars=null;
    final String nlSuffix="nl_" + locale;
    File babelDir=new File(babelLocation + "/eclipse/plugins");
    if (babelDir.exists() && babelDir.isDirectory()) {
      babelJars=babelDir.list(new FilenameFilter(){
        @Override public boolean accept(        File dir,        String name){
          return name.endsWith(".jar") && name.contains(nlSuffix);
        }
      }
);
    }
 else {
      throw new BuildException("Babel directory isn't found or it doesn't contain eclipse/plugins subfolder.");
    }
    if (babelJars != null && babelJars.length > 0) {
      File pluginsDir=new File(eclipseDirectory + "/plugins");
      if (pluginsDir.exists() && pluginsDir.isDirectory()) {
        String[] plugins=pluginsDir.list(JARS_FILTER);
        for (        String plugin : plugins) {
          File pluginFile=new File(pluginsDir,plugin);
          String pluginFileName=pluginFile.getName();
          for (          String babelJar : babelJars) {
            String pluginName=babelJar.substring(0,babelJar.indexOf(nlSuffix) - 1);
            if (pluginFileName.startsWith(pluginName) && Character.isDigit(pluginFileName.charAt(pluginName.length() + 1))) {
              if (pluginJarMap.get(pluginFile) == null) {
                pluginJarMap.put(pluginFile,new ArrayList<File>());
              }
              pluginJarMap.get(pluginFile).add(new File(babelDir,babelJar));
              break;
            }
          }
        }
      }
 else {
        throw new BuildException("Eclipse plugins directory isn't found.");
      }
    }
 else {
      throw new BuildException("No jars found in Babel.");
    }
  }
  Set<File> eclipsePlugins=pluginJarMap.keySet();
  int k=1;
  int kplugins=eclipsePlugins.size();
  for (  File pluginFile : eclipsePlugins) {
    System.out.println("[" + k++ + "/"+ kplugins+ "] plugin "+ pluginFile.getName()+ " is being localized.");
    localizePlugin(pluginJarMap.get(pluginFile),pluginFile,PROPERTIES_FILTER);
  }
}
