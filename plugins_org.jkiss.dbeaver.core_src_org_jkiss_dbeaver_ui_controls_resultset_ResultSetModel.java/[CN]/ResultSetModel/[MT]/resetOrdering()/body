{
  final boolean hasOrdering=dataFilter.hasOrdering();
  final List<DBDAttributeConstraint> orderConstraints=dataFilter.getOrderConstraints();
  Collections.sort(curRows,new Comparator<ResultSetRow>(){
    @Override public int compare(    ResultSetRow row1,    ResultSetRow row2){
      if (!hasOrdering) {
        return row1.getRowNumber() - row2.getRowNumber();
      }
      int result=0;
      for (      DBDAttributeConstraint co : orderConstraints) {
        final DBDAttributeBinding binding=getAttributeBinding(co.getAttribute());
        if (binding == null) {
          continue;
        }
        Object cell1=getCellValue(binding,row1);
        Object cell2=getCellValue(binding,row2);
        if (cell1 == cell2) {
          result=0;
        }
 else         if (DBUtils.isNullValue(cell1)) {
          result=1;
        }
 else         if (DBUtils.isNullValue(cell2)) {
          result=-1;
        }
 else         if (cell1 instanceof Comparable) {
          result=((Comparable)cell1).compareTo(cell2);
        }
 else {
          String str1=String.valueOf(cell1);
          String str2=String.valueOf(cell2);
          result=str1.compareTo(str2);
        }
        if (co.isOrderDescending()) {
          result=-result;
        }
        if (result != 0) {
          break;
        }
      }
      return result;
    }
  }
);
  for (int i=0; i < curRows.size(); i++) {
    curRows.get(i).setVisualNumber(i);
  }
}
