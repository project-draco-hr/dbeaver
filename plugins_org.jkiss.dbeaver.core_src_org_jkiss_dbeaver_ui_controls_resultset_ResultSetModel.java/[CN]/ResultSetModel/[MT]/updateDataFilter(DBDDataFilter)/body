{
  this.visibleAttributes.clear();
  Collections.addAll(this.visibleAttributes,this.attributes);
  for (  DBDAttributeConstraint constraint : filter.getConstraints()) {
    DBDAttributeConstraint filterConstraint=this.dataFilter.getConstraint(constraint.getAttribute(),true);
    if (filterConstraint == null) {
      continue;
    }
    if (constraint.getOperator() != null) {
      filterConstraint.setOperator(constraint.getOperator());
      filterConstraint.setReverseOperator(constraint.isReverseOperator());
      filterConstraint.setValue(constraint.getValue());
    }
 else {
      filterConstraint.setCriteria(constraint.getCriteria());
    }
    filterConstraint.setOrderPosition(constraint.getOrderPosition());
    filterConstraint.setOrderDescending(constraint.isOrderDescending());
    filterConstraint.setVisible(constraint.isVisible());
    filterConstraint.setVisualPosition(constraint.getVisualPosition());
    if (!constraint.isVisible() && filterConstraint.getAttribute() instanceof DBDAttributeBinding) {
      visibleAttributes.remove(filterConstraint.getAttribute());
    }
  }
  for (Iterator<DBDAttributeBinding> attrIter=visibleAttributes.iterator(); attrIter.hasNext(); ) {
    final DBDAttributeBinding attr=attrIter.next();
    if (attr.isPseudoAttribute()) {
      if (filter.getConstraint(attr,true) == null) {
        attrIter.remove();
      }
    }
  }
  Collections.sort(this.visibleAttributes,POSITION_SORTER);
  this.dataFilter.setWhere(filter.getWhere());
  this.dataFilter.setOrder(filter.getOrder());
  this.dataFilter.setAnyConstraint(filter.isAnyConstraint());
}
