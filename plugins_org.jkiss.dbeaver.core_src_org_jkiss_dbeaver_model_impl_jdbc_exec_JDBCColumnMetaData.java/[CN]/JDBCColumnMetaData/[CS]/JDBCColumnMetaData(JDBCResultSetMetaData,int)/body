{
  DBCStatement rsSource=resultSetMeta.getResultSet().getSourceStatement();
  this.source=rsSource != null ? rsSource.getStatementSource() : null;
  this.ordinalPosition=ordinalPosition;
  this.label=resultSetMeta.getColumnLabel(ordinalPosition + 1);
  this.name=resultSetMeta.getColumnName(ordinalPosition + 1);
  this.readOnly=resultSetMeta.isReadOnly(ordinalPosition + 1);
  this.writable=resultSetMeta.isWritable(ordinalPosition + 1);
  String fetchedTableName=null;
  try {
    fetchedTableName=resultSetMeta.getTableName(ordinalPosition + 1);
  }
 catch (  SQLException e) {
    log.debug(e);
  }
  String fetchedCatalogName=null;
  try {
    fetchedCatalogName=resultSetMeta.getCatalogName(ordinalPosition + 1);
  }
 catch (  SQLException e) {
    log.debug(e);
  }
  String fetchedSchemaName=null;
  try {
    fetchedSchemaName=resultSetMeta.getSchemaName(ordinalPosition + 1);
  }
 catch (  SQLException e) {
    log.debug(e);
  }
  if (!CommonUtils.isEmpty(fetchedTableName) && CommonUtils.isEmpty(fetchedCatalogName) && CommonUtils.isEmpty(fetchedSchemaName)) {
    final DBPDataSource dataSource=resultSetMeta.getResultSet().getSession().getDataSource();
    if (dataSource instanceof SQLDataSource) {
      SQLDialect sqlDialect=((SQLDataSource)dataSource).getSQLDialect();
      if (!DBUtils.isQuotedIdentifier(dataSource,fetchedTableName)) {
        final String catalogSeparator=sqlDialect.getCatalogSeparator();
        final int catDivPos=fetchedTableName.indexOf(catalogSeparator);
        if (catDivPos != -1 && (sqlDialect.getCatalogUsage() & SQLDialect.USAGE_DML) != 0) {
          fetchedCatalogName=fetchedTableName.substring(0,catDivPos);
          fetchedTableName=fetchedTableName.substring(catDivPos + catalogSeparator.length());
        }
        final char structSeparator=sqlDialect.getStructSeparator();
        final int schemaDivPos=fetchedTableName.indexOf(structSeparator);
        if (schemaDivPos != -1 && (sqlDialect.getSchemaUsage() & SQLDialect.USAGE_DML) != 0) {
          fetchedSchemaName=fetchedTableName.substring(0,schemaDivPos);
          fetchedTableName=fetchedTableName.substring(schemaDivPos + 1);
        }
      }
    }
  }
  this.notNull=resultSetMeta.isNullable(ordinalPosition + 1) == ResultSetMetaData.columnNoNulls;
  try {
    this.displaySize=resultSetMeta.getColumnDisplaySize(ordinalPosition + 1);
  }
 catch (  SQLException e) {
    this.displaySize=0;
  }
  this.typeID=resultSetMeta.getColumnType(ordinalPosition + 1);
  this.typeName=resultSetMeta.getColumnTypeName(ordinalPosition + 1);
  this.sequence=resultSetMeta.isAutoIncrement(ordinalPosition + 1);
  try {
    this.precision=resultSetMeta.getPrecision(ordinalPosition + 1);
  }
 catch (  Exception e) {
    this.precision=0;
  }
  try {
    this.scale=resultSetMeta.getScale(ordinalPosition + 1);
  }
 catch (  Exception e) {
    this.scale=0;
  }
  this.tableName=fetchedTableName;
  if (!CommonUtils.isEmpty(this.tableName)) {
    this.tableMetaData=resultSetMeta.getTableMetaData(fetchedCatalogName,fetchedSchemaName,tableName);
  }
 else {
    this.tableMetaData=null;
  }
  if (this.tableMetaData != null) {
    this.tableMetaData.addAttribute(this);
  }
  this.dataKind=JDBCUtils.resolveDataKind(resultSetMeta.getResultSet().getSourceStatement().getSession().getDataSource(),typeName,typeID);
}
