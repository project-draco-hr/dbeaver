{
  String sourceCode=command.text;
  int quoteStart=-1, quoteEnd=-1;
  for (int i=0; i < sourceCode.length(); i++) {
    final char ch=sourceCode.charAt(i);
    if (ch == '"') {
      quoteStart=i;
      break;
    }
 else     if (Character.isUnicodeIdentifierPart(ch)) {
      return false;
    }
  }
  for (int i=sourceCode.length() - 1; i >= 0; i--) {
    final char ch=sourceCode.charAt(i);
    if (ch == '"') {
      quoteEnd=i;
      break;
    }
 else     if (Character.isUnicodeIdentifierPart(ch)) {
      return false;
    }
  }
  StringBuilder result=new StringBuilder(sourceCode.length());
  char prevChar=(char)-1;
  boolean inString=true;
  for (int i=quoteStart + 1; i < quoteEnd; i++) {
    final char ch=sourceCode.charAt(i);
    if (prevChar == '\\' && inString) {
switch (ch) {
case 'n':
        result.append("\n");
      break;
case 'r':
    result.append("\r");
  break;
case 't':
result.append("\t");
break;
default :
result.append(ch);
break;
}
}
 else {
switch (ch) {
case '"':
inString=!inString;
break;
case '\\':
break;
default :
if (inString) {
result.append(ch);
}
}
}
prevChar=ch;
}
try {
document.replace(command.offset,command.length,command.text);
document.replace(command.offset,command.text.length(),result.toString());
}
 catch (Exception e) {
log.warn(e);
}
command.caretOffset=command.offset + result.length();
command.text=null;
command.length=0;
command.doit=false;
return true;
}
