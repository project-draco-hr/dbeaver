{
  int docLength=d.getLength();
  if (c.offset == -1 || docLength == 0) {
    return;
  }
  SQLHeuristicScanner scanner=new SQLHeuristicScanner(d);
  SQLIndenter indenter=new SQLIndenter(d,scanner);
  int previousToken=scanner.previousToken(c.offset - 1,SQLHeuristicScanner.UNBOUND);
  StringBuilder indent;
  StringBuilder beginIndentaion=new StringBuilder();
  if (isSupportedAutoCompletionToken(previousToken)) {
    indent=indenter.computeIndentation(c.offset);
    beginIndentaion.append(indenter.getReferenceIndentation(c.offset));
  }
 else {
    indent=indenter.getReferenceIndentation(c.offset);
  }
  if (indent == null) {
    indent=new StringBuilder();
  }
  try {
    int p=(c.offset == docLength ? c.offset - 1 : c.offset);
    int line=d.getLineOfOffset(p);
    StringBuilder buf=new StringBuilder(c.text + indent);
    IRegion reg=d.getLineInformation(line);
    int lineEnd=reg.getOffset() + reg.getLength();
    int contentStart=findEndOfWhiteSpace(d,c.offset,lineEnd);
    c.length=Math.max(contentStart - c.offset,0);
    int start=reg.getOffset();
    ITypedRegion region=TextUtilities.getPartition(d,partitioning,start,true);
    if (SQLPartitionScanner.SQL_MULTILINE_COMMENT.equals(region.getType())) {
      start=d.getLineInformationOfOffset(region.getOffset()).getOffset();
    }
    c.caretOffset=c.offset + buf.length();
    c.shiftsCaret=false;
    if (isSupportedAutoCompletionToken(previousToken) && !isClosed(d,c.offset,previousToken) && getTokenCount(start,c.offset,scanner,previousToken) > 0) {
      buf.append(getLineDelimiter(d));
      buf.append(beginIndentaion);
      buf.append(getAutoCompletionTrail(previousToken));
    }
    c.text=buf.toString();
  }
 catch (  BadLocationException e) {
    log.error(e);
  }
}
