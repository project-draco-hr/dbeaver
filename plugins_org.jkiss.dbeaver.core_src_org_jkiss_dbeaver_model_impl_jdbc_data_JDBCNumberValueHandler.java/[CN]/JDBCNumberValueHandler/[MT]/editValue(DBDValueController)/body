{
switch (controller.getEditType()) {
case INLINE:
    final Object value=controller.getValue();
  if (controller.getAttributeMetaData().getTypeID() == java.sql.Types.BIT) {
    CCombo editor=new CCombo(controller.getEditPlaceholder(),SWT.READ_ONLY);
    initInlineControl(controller,editor,new ValueExtractor<CCombo>(){
      @Override public Object getValueFromControl(      CCombo control){
switch (control.getSelectionIndex()) {
case 0:
          return (byte)0;
case 1:
        return (byte)1;
default :
      return null;
  }
}
}
);
editor.add("0");
editor.add("1");
editor.setText(value == null ? "0" : value.toString());
editor.setFocus();
}
 else {
Text editor=new Text(controller.getEditPlaceholder(),SWT.BORDER);
initInlineControl(controller,editor,new ValueExtractor<Text>(){
@Override public Object getValueFromControl(Text control){
  String text=control.getText();
  if (CommonUtils.isEmpty(text)) {
    return null;
  }
  return convertStringToNumber(text,value,controller.getAttributeMetaData());
}
}
);
editor.setText(value == null ? "" : value.toString());
editor.setEditable(!controller.isReadOnly());
editor.setTextLimit(MAX_NUMBER_LENGTH);
editor.selectAll();
editor.setFocus();
switch (controller.getAttributeMetaData().getTypeID()) {
case java.sql.Types.BIGINT:
case java.sql.Types.INTEGER:
case java.sql.Types.SMALLINT:
case java.sql.Types.TINYINT:
case java.sql.Types.BIT:
editor.addVerifyListener(UIUtils.INTEGER_VERIFY_LISTENER);
break;
default :
editor.addVerifyListener(UIUtils.NUMBER_VERIFY_LISTENER);
break;
}
}
return true;
case EDITOR:
NumberViewDialog dialog=new NumberViewDialog(controller);
dialog.open();
return true;
default :
return false;
}
}
