{
switch (controller.getEditType()) {
case INLINE:
case PANEL:
    if (controller.getAttributeMetaData().getTypeID() == java.sql.Types.BIT) {
      return new ValueEditor<CCombo>(controller){
        @Override protected CCombo createControl(        Composite editPlaceholder){
          final CCombo editor=new CCombo(valueController.getEditPlaceholder(),SWT.READ_ONLY);
          editor.add("0");
          editor.add("1");
          return editor;
        }
        @Override public void refreshValue(){
          Object value=valueController.getValue();
          control.setText(value == null ? "0" : value.toString());
        }
        @Override public Object extractValue(){
switch (control.getSelectionIndex()) {
case 0:
            return (byte)0;
case 1:
          return (byte)1;
default :
        return null;
    }
  }
}
;
}
 else {
return new ValueEditor<Text>(controller){
  @Override protected Text createControl(  Composite editPlaceholder){
    final Text editor=new Text(valueController.getEditPlaceholder(),SWT.BORDER);
    editor.setEditable(!valueController.isReadOnly());
    editor.setTextLimit(MAX_NUMBER_LENGTH);
switch (valueController.getAttributeMetaData().getTypeID()) {
case java.sql.Types.BIGINT:
case java.sql.Types.INTEGER:
case java.sql.Types.SMALLINT:
case java.sql.Types.TINYINT:
case java.sql.Types.BIT:
      editor.addVerifyListener(UIUtils.INTEGER_VERIFY_LISTENER);
    break;
default :
  editor.addVerifyListener(UIUtils.NUMBER_VERIFY_LISTENER);
break;
}
return editor;
}
@Override public void refreshValue(){
Object value=valueController.getValue();
control.setText(value == null ? "" : value.toString());
if (valueController.getEditType() == DBDValueController.EditType.INLINE) {
control.selectAll();
}
}
@Override public Object extractValue(){
String text=control.getText();
if (CommonUtils.isEmpty(text)) {
return null;
}
return convertStringToNumber(text,valueController.getValue(),valueController.getAttributeMetaData());
}
}
;
}
case EDITOR:
return new NumberViewDialog(controller);
default :
return null;
}
}
