{
switch (controller.getEditType()) {
case INLINE:
case PANEL:
    if (controller.getAttributeMetaData().getTypeID() == java.sql.Types.BIT) {
      final CCombo editor=new CCombo(controller.getEditPlaceholder(),SWT.READ_ONLY);
      initInlineControl(controller,editor,new ValueExtractor<CCombo>(){
        @Override public Object getValueFromControl(        CCombo control){
switch (control.getSelectionIndex()) {
case 0:
            return (byte)0;
case 1:
          return (byte)1;
default :
        return null;
    }
  }
}
);
editor.add("0");
editor.add("1");
return new DBDValueEditor(){
  @Override public void refreshValue(){
    Object value=controller.getValue();
    editor.setText(value == null ? "0" : value.toString());
  }
}
;
}
 else {
final Text editor=new Text(controller.getEditPlaceholder(),SWT.BORDER);
initInlineControl(controller,editor,new ValueExtractor<Text>(){
  @Override public Object getValueFromControl(  Text control){
    String text=control.getText();
    if (CommonUtils.isEmpty(text)) {
      return null;
    }
    return convertStringToNumber(text,controller.getValue(),controller.getAttributeMetaData());
  }
}
);
editor.setEditable(!controller.isReadOnly());
editor.setTextLimit(MAX_NUMBER_LENGTH);
switch (controller.getAttributeMetaData().getTypeID()) {
case java.sql.Types.BIGINT:
case java.sql.Types.INTEGER:
case java.sql.Types.SMALLINT:
case java.sql.Types.TINYINT:
case java.sql.Types.BIT:
  editor.addVerifyListener(UIUtils.INTEGER_VERIFY_LISTENER);
break;
default :
editor.addVerifyListener(UIUtils.NUMBER_VERIFY_LISTENER);
break;
}
return new DBDValueEditor(){
@Override public void refreshValue(){
Object value=controller.getValue();
editor.setText(value == null ? "" : value.toString());
editor.selectAll();
}
}
;
}
case EDITOR:
return new NumberViewDialog(controller);
default :
return null;
}
}
