{
  Number value;
switch (type.getTypeID()) {
case java.sql.Types.DOUBLE:
case java.sql.Types.REAL:
    value=resultSet.getDouble(index);
  break;
case java.sql.Types.FLOAT:
try {
  value=resultSet.getDouble(index);
}
 catch (SQLException e) {
  value=resultSet.getFloat(index);
}
break;
case java.sql.Types.INTEGER:
try {
value=resultSet.getLong(index);
}
 catch (SQLException e) {
value=resultSet.getInt(index);
}
break;
case java.sql.Types.SMALLINT:
value=resultSet.getShort(index);
break;
case java.sql.Types.TINYINT:
value=resultSet.getShort(index);
break;
case java.sql.Types.BIT:
value=resultSet.getByte(index);
break;
default :
boolean gotValue=false;
value=null;
try {
Object objectValue=resultSet.getObject(index);
if (objectValue == null || objectValue instanceof Number) {
value=(Number)objectValue;
gotValue=true;
}
}
 catch (SQLException e) {
log.debug(e);
}
if (value == null && !gotValue) {
if (type.getScale() > 0) {
value=resultSet.getDouble(index);
}
 else {
value=resultSet.getLong(index);
}
}
break;
}
if (resultSet.wasNull()) {
return null;
}
 else {
return value;
}
}
