{
  try {
    this.readOnly=metaData.isReadOnly();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.readOnly=false;
  }
  try {
    this.databaseProductName=metaData.getDatabaseProductName();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.databaseProductName="?";
  }
  try {
    this.databaseProductVersion=metaData.getDatabaseProductVersion();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.databaseProductVersion="?";
  }
  try {
    this.driverName=metaData.getDriverName();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.driverName="?";
  }
  try {
    this.driverVersion=metaData.getDriverVersion();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.driverVersion="?";
  }
  try {
    this.identifierQuoteString=metaData.getIdentifierQuoteString();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.identifierQuoteString=null;
  }
  if (identifierQuoteString != null) {
    identifierQuoteString=identifierQuoteString.trim();
  }
  if (identifierQuoteString != null && identifierQuoteString.isEmpty()) {
    identifierQuoteString=null;
  }
  try {
    this.supportsUnquotedMixedCase=metaData.supportsMixedCaseIdentifiers();
  }
 catch (  SQLException e) {
    log.debug(e.getMessage());
    this.supportsUnquotedMixedCase=false;
  }
  try {
    this.supportsQuotedMixedCase=metaData.supportsMixedCaseQuotedIdentifiers();
  }
 catch (  SQLException e) {
    log.debug(e.getMessage());
    this.supportsQuotedMixedCase=false;
  }
  try {
    if (metaData.storesUpperCaseIdentifiers()) {
      this.unquotedIdentCase=DBPIdentifierCase.UPPER;
    }
 else     if (metaData.storesLowerCaseIdentifiers()) {
      this.unquotedIdentCase=DBPIdentifierCase.LOWER;
    }
 else {
      this.unquotedIdentCase=DBPIdentifierCase.MIXED;
    }
  }
 catch (  SQLException e) {
    log.debug(e.getMessage());
    this.unquotedIdentCase=DBPIdentifierCase.MIXED;
  }
  try {
    if (metaData.storesUpperCaseQuotedIdentifiers()) {
      this.quotedIdentCase=DBPIdentifierCase.UPPER;
    }
 else     if (metaData.storesLowerCaseQuotedIdentifiers()) {
      this.quotedIdentCase=DBPIdentifierCase.LOWER;
    }
 else {
      this.quotedIdentCase=DBPIdentifierCase.MIXED;
    }
  }
 catch (  SQLException e) {
    log.debug(e.getMessage());
    this.quotedIdentCase=DBPIdentifierCase.MIXED;
  }
  try {
    this.sqlKeywords=makeStringList(metaData.getSQLKeywords());
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.sqlKeywords=new ArrayList<String>();
  }
  try {
    this.numericFunctions=makeStringList(metaData.getNumericFunctions());
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.numericFunctions=Collections.emptyList();
  }
  try {
    this.stringFunctions=makeStringList(metaData.getStringFunctions());
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.stringFunctions=Collections.emptyList();
  }
  try {
    this.systemFunctions=makeStringList(metaData.getSystemFunctions());
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.systemFunctions=Collections.emptyList();
  }
  try {
    this.timeDateFunctions=makeStringList(metaData.getTimeDateFunctions());
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.timeDateFunctions=Collections.emptyList();
  }
  try {
    this.searchStringEscape=metaData.getSearchStringEscape();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.searchStringEscape="\\";
  }
  try {
    this.schemaTerm=makeTermString(metaData.getSchemaTerm(),TERM_SCHEMA);
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.schemaTerm=TERM_SCHEMA;
  }
  try {
    this.procedureTerm=makeTermString(metaData.getProcedureTerm(),TERM_PROCEDURE);
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.procedureTerm=TERM_PROCEDURE;
  }
  try {
    this.catalogTerm=makeTermString(metaData.getCatalogTerm(),TERM_CATALOG);
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.catalogTerm=TERM_CATALOG;
  }
  try {
    this.catalogSeparator=metaData.getCatalogSeparator();
    if (CommonUtils.isEmpty(this.catalogSeparator)) {
      this.catalogSeparator=String.valueOf(SQLConstants.STRUCT_SEPARATOR);
    }
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.catalogSeparator=String.valueOf(SQLConstants.STRUCT_SEPARATOR);
  }
  try {
    catalogUsage=(metaData.supportsCatalogsInDataManipulation() ? USAGE_DML : 0) | (metaData.supportsCatalogsInTableDefinitions() ? USAGE_DDL : 0) | (metaData.supportsCatalogsInProcedureCalls() ? USAGE_PROC : 0)| (metaData.supportsCatalogsInIndexDefinitions() ? USAGE_INDEX : 0)| (metaData.supportsCatalogsInPrivilegeDefinitions() ? USAGE_PRIV : 0);
  }
 catch (  SQLException e) {
    log.debug(e.getMessage());
    catalogUsage=USAGE_NONE;
  }
  try {
    schemaUsage=(metaData.supportsSchemasInDataManipulation() ? USAGE_DML : 0) | (metaData.supportsSchemasInTableDefinitions() ? USAGE_DDL : 0) | (metaData.supportsSchemasInProcedureCalls() ? USAGE_PROC : 0)| (metaData.supportsSchemasInIndexDefinitions() ? USAGE_INDEX : 0)| (metaData.supportsSchemasInPrivilegeDefinitions() ? USAGE_PRIV : 0);
  }
 catch (  SQLException e) {
    log.debug(e.getMessage());
    schemaUsage=USAGE_NONE;
  }
  try {
    validCharacters=metaData.getExtraNameCharacters();
  }
 catch (  SQLException e) {
    log.debug(e.getMessage());
    validCharacters="";
  }
  try {
    this.isCatalogAtStart=metaData.isCatalogAtStart();
  }
 catch (  Throwable e) {
    log.debug(e.getMessage());
    this.isCatalogAtStart=true;
  }
  try {
switch (metaData.getSQLStateType()) {
case DatabaseMetaData.sqlStateXOpen:
      this.sqlStateType=DBCStateType.XOPEN;
    break;
case DatabaseMetaData.sqlStateSQL99:
  this.sqlStateType=DBCStateType.SQL99;
break;
default :
this.sqlStateType=DBCStateType.UNKNOWN;
break;
}
}
 catch (Throwable e) {
log.debug(e.getMessage());
this.sqlStateType=DBCStateType.UNKNOWN;
}
try {
supportsTransactions=metaData.supportsTransactions();
}
 catch (Throwable e) {
log.debug(e.getMessage());
supportsTransactions=true;
}
supportedIsolations=new ArrayList<DBPTransactionIsolation>();
try {
for (JDBCTransactionIsolation txi : JDBCTransactionIsolation.values()) {
if (metaData.supportsTransactionIsolationLevel(txi.getCode())) {
supportedIsolations.add(txi);
}
}
}
 catch (Throwable e) {
log.debug(e.getMessage());
supportsTransactions=true;
}
if (!supportedIsolations.contains(JDBCTransactionIsolation.NONE)) {
supportedIsolations.add(0,JDBCTransactionIsolation.NONE);
}
}
