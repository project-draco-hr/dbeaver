{
  instance=this;
  Display display=null;
  context.getBrandingBundle().getBundleContext().addBundleListener(new BundleListener(){
    @Override public void bundleChanged(    BundleEvent event){
      String message=null;
      if (event.getType() == BundleEvent.STARTED) {
        message="> Start " + event.getBundle().getSymbolicName() + " ["+ event.getBundle().getVersion()+ "]";
      }
 else       if (event.getType() == BundleEvent.STOPPED) {
        message="< Stop " + event.getBundle().getSymbolicName() + " ["+ event.getBundle().getVersion()+ "]";
      }
      if (message != null) {
        log.debug(message);
      }
    }
  }
);
  Log.addListener(new Log.Listener(){
    @Override public void loggedMessage(    Object message,    Throwable t){
      DBeaverSplashHandler.showMessage(CommonUtils.toString(message));
    }
  }
);
  Location instanceLoc=Platform.getInstanceLocation();
  log.debug("Default instance location: " + instanceLoc.getDefault());
  String defaultHomePath=getDefaultWorkspaceLocation().getAbsolutePath();
  try {
    URL defaultHomeURL=new URL("file",null,defaultHomePath);
    log.debug("Setting instance location to " + defaultHomeURL);
    boolean keepTrying=true;
    while (keepTrying) {
      if (!instanceLoc.set(defaultHomeURL,true)) {
        if (handleCommandLine(defaultHomePath)) {
          return IApplication.EXIT_OK;
        }
        if (display == null) {
          display=PlatformUI.createDisplay();
        }
        Shell shell=new Shell(display,SWT.ON_TOP);
        MessageBox messageBox=new MessageBox(shell,SWT.ICON_WARNING | SWT.IGNORE | SWT.RETRY| SWT.ABORT);
        messageBox.setText("DBeaver - Can't lock workspace");
        messageBox.setMessage("Can't lock workspace at " + defaultHomePath + ".\n"+ "It seems that you have another DBeaver instance running.\n"+ "You may ignore it and work without lock but it is recommended to shutdown previous instance otherwise you may corrupt workspace data.");
        int msgResult=messageBox.open();
        shell.dispose();
switch (msgResult) {
case SWT.ABORT:
          return IApplication.EXIT_OK;
case SWT.IGNORE:
        instanceLoc.set(defaultHomeURL,false);
      keepTrying=false;
    break;
case SWT.RETRY:
  break;
}
}
 else {
break;
}
}
}
 catch (Throwable e) {
System.err.println("Can't switch workspace to '" + defaultHomePath + "' - "+ e.getMessage());
}
final Runtime runtime=Runtime.getRuntime();
DBeaverCore.setStandalone(true);
log.debug(DBeaverCore.getProductTitle() + " is starting");
log.debug("Install path: '" + Platform.getInstallLocation().getURL() + "'");
log.debug("Instance path: '" + instanceLoc.getURL() + "'");
log.debug("Memory available " + (runtime.totalMemory() / (1024 * 1024)) + "Mb/"+ (runtime.maxMemory() / (1024 * 1024))+ "Mb");
instanceServer=DBeaverInstanceServer.startInstanceServer();
if (display == null) {
log.debug("Initialize display");
display=PlatformUI.createDisplay();
}
PlatformUI.getPreferenceStore().setDefault(IWorkbenchPreferenceConstants.KEY_CONFIGURATION_ID,ApplicationWorkbenchAdvisor.DBEAVER_SCHEME_NAME);
try {
int returnCode=PlatformUI.createAndRunWorkbench(display,createWorkbenchAdvisor());
if (returnCode == PlatformUI.RETURN_RESTART) {
return IApplication.EXIT_RESTART;
}
return IApplication.EXIT_OK;
}
  finally {
display.dispose();
}
}
