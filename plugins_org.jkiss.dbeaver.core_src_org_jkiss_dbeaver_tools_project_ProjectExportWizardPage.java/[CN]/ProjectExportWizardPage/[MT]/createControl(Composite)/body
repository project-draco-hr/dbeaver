{
  String outDir=DBeaverCore.getGlobalPreferenceStore().getString(PREF_PROJECTS_EXPORT_OUT_DIR);
  if (CommonUtils.isEmpty(outDir)) {
    outDir=RuntimeUtils.getUserHomeDir().getAbsolutePath();
  }
  Set<IProject> projectList=new LinkedHashSet<IProject>();
  final ISelection selection=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getSelection();
  if (selection != null && !selection.isEmpty() && selection instanceof IStructuredSelection) {
    for (Iterator<?> iter=((IStructuredSelection)selection).iterator(); iter.hasNext(); ) {
      Object element=iter.next();
      IResource resource=RuntimeUtils.getObjectAdapter(element,IResource.class);
      if (resource != null) {
        projectList.add(resource.getProject());
      }
    }
  }
  if (projectList.isEmpty()) {
    projectList.add(DBeaverCore.getInstance().getProjectRegistry().getActiveProject());
  }
  Composite placeholder=UIUtils.createPlaceholder(parent,1);
  placeholder.setLayout(new GridLayout(1,false));
  projectsTable=new Table(placeholder,SWT.MULTI | SWT.CHECK | SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  projectsTable.setLayoutData(gd);
  projectsTable.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      updateState();
    }
  }
);
  for (  IProject project : DBeaverCore.getInstance().getLiveProjects()) {
    final TableItem item=new TableItem(projectsTable,SWT.NONE);
    item.setImage(DBIcon.PROJECT.getImage());
    item.setText(project.getName());
    item.setData(project);
    if (projectList.contains(project)) {
      item.setChecked(true);
    }
  }
  final Composite fileNameGroup=UIUtils.createPlaceholder(placeholder,2);
  fileNameGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  fileNameText=UIUtils.createLabelText(fileNameGroup,CoreMessages.dialog_project_export_wizard_start_label_output_file,null);
  fileNameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  fileNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!CommonUtils.equalObjects(fileNameText.getText(),getArchiveFileName(getProjectsToExport()))) {
        fileNameEdited=true;
      }
    }
  }
);
  Composite generalSettings=UIUtils.createPlaceholder(placeholder,3);
  generalSettings.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
{
    UIUtils.createControlLabel(generalSettings,CoreMessages.dialog_project_export_wizard_start_label_directory);
    directoryText=new Text(generalSettings,SWT.BORDER);
    directoryText.setText(outDir);
    directoryText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    directoryText.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        updateState();
      }
    }
);
    Button openFolder=new Button(generalSettings,SWT.PUSH);
    openFolder.setImage(DBIcon.TREE_FOLDER.getImage());
    openFolder.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        DirectoryDialog dialog=new DirectoryDialog(getShell(),SWT.NONE);
        dialog.setMessage(CoreMessages.dialog_project_export_wizard_start_dialog_directory_message);
        dialog.setText(CoreMessages.dialog_project_export_wizard_start_dialog_directory_text);
        String directory=directoryText.getText();
        if (!CommonUtils.isEmpty(directory)) {
          dialog.setFilterPath(directory);
        }
        directory=dialog.open();
        if (directory != null) {
          directoryText.setText(directory);
        }
      }
    }
);
  }
  exportDriverCheck=UIUtils.createCheckbox(placeholder,CoreMessages.dialog_project_export_wizard_start_checkbox_libraries,false);
  gd=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  gd.horizontalSpan=3;
  exportDriverCheck.setLayoutData(gd);
  setControl(placeholder);
  updateState();
}
