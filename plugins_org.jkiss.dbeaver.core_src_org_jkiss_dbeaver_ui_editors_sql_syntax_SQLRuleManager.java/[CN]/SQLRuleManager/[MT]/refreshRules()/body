{
  final IToken keywordToken=new Token(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_KEYWORD),null,SWT.BOLD));
  final IToken typeToken=new Token(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_DATATYPE),null,SWT.BOLD));
  final IToken stringToken=new Token(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_STRING),null,SWT.NORMAL));
  final IToken quotedToken=new Token(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_DATATYPE),null,SWT.NORMAL));
  final IToken numberToken=new Token(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_NUMBER),null,SWT.NORMAL));
  final IToken commentToken=new SQLCommentToken(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_COMMENT),null,SWT.NORMAL));
  final SQLDelimiterToken delimiterToken=new SQLDelimiterToken(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_DELIMITER,SWT.COLOR_RED),null,SWT.NORMAL));
  final SQLParameterToken parameterToken=new SQLParameterToken(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_PARAMETER,SWT.COLOR_DARK_BLUE),null,SWT.BOLD));
  final IToken otherToken=new Token(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_TEXT),null,SWT.NORMAL));
  final SQLBlockBeginToken blockBeginToken=new SQLBlockBeginToken(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_KEYWORD),null,SWT.BOLD));
  final SQLBlockEndToken blockEndToken=new SQLBlockEndToken(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_KEYWORD),null,SWT.BOLD));
  setDefaultReturnToken(otherToken);
  List<IRule> rules=new ArrayList<IRule>();
  SQLDialect dialect=syntaxManager.getDialect();
  for (  String lineComment : dialect.getSingleLineComments()) {
    if (lineComment.startsWith("^")) {
      rules.add(new LineCommentRule(lineComment,commentToken));
    }
 else {
      rules.add(new EndOfLineRule(lineComment,commentToken));
    }
  }
  char escapeChar=syntaxManager.getEscapeChar();
  String quoteSymbol=syntaxManager.getQuoteSymbol();
  if (quoteSymbol != null) {
    rules.add(new SingleLineRule(quoteSymbol,quoteSymbol,quotedToken,escapeChar));
  }
  if (quoteSymbol == null || !quoteSymbol.equals(SQLConstants.STR_QUOTE_SINGLE)) {
    rules.add(new NestedMultiLineRule(SQLConstants.STR_QUOTE_SINGLE,SQLConstants.STR_QUOTE_SINGLE,stringToken,escapeChar));
  }
  if (quoteSymbol == null || !quoteSymbol.equals(SQLConstants.STR_QUOTE_DOUBLE)) {
    rules.add(new SingleLineRule(SQLConstants.STR_QUOTE_DOUBLE,SQLConstants.STR_QUOTE_DOUBLE,quotedToken,escapeChar));
  }
  Pair<String,String> multiLineComments=dialect.getMultiLineComments();
  if (multiLineComments != null) {
    rules.add(new MultiLineRule(multiLineComments.getFirst(),multiLineComments.getSecond(),commentToken,(char)0,true));
  }
  rules.add(new WhitespaceRule(new TextWhiteSpaceDetector()));
  rules.add(new NumberRule(numberToken));
  for (  final String delimiter : syntaxManager.getStatementDelimiters()) {
    WordRule delimRule;
    if (Character.isLetterOrDigit(delimiter.charAt(0))) {
      delimRule=new WordRule(new SQLWordDetector(),Token.UNDEFINED,true);
      delimRule.addWord(delimiter,delimiterToken);
    }
 else {
      delimRule=new WordRule(new IWordDetector(){
        @Override public boolean isWordStart(        char c){
          return delimiter.charAt(0) == c;
        }
        @Override public boolean isWordPart(        char c){
          return delimiter.indexOf(c) != -1;
        }
      }
,Token.UNDEFINED,false);
      delimRule.addWord(delimiter,delimiterToken);
    }
    rules.add(delimRule);
  }
  WordRule wordRule=new WordRule(new SQLWordDetector(),otherToken,true);
  for (  String reservedWord : dialect.getReservedWords()) {
    wordRule.addWord(reservedWord,keywordToken);
  }
  for (  String function : dialect.getFunctions()) {
    wordRule.addWord(function,typeToken);
  }
  for (  String type : dialect.getTypes()) {
    wordRule.addWord(type,typeToken);
  }
  wordRule.addWord(SQLConstants.BLOCK_BEGIN,blockBeginToken);
  wordRule.addWord(SQLConstants.BLOCK_END,blockEndToken);
  rules.add(wordRule);
{
    IRule parameterRule=new IRule(){
      private StringBuilder buffer=new StringBuilder();
      @Override public IToken evaluate(      ICharacterScanner scanner){
        int column=scanner.getColumn();
        if (column <= 0) {
          return Token.UNDEFINED;
        }
        scanner.unread();
        int prevChar=scanner.read();
        if (Character.isJavaIdentifierPart(prevChar) || prevChar == ':' || prevChar == '?' || prevChar == '\\' || prevChar == '/') {
          return Token.UNDEFINED;
        }
        int c=scanner.read();
        if (c != ICharacterScanner.EOF && (c == '?' || c == ':')) {
          buffer.setLength(0);
          do {
            buffer.append((char)c);
            c=scanner.read();
          }
 while (c != ICharacterScanner.EOF && Character.isJavaIdentifierPart(c));
          scanner.unread();
          if ((buffer.charAt(0) == '?' && buffer.length() == 1) || (buffer.charAt(0) == ':' && buffer.length() > 1)) {
            return parameterToken;
          }
          for (int i=buffer.length() - 1; i >= 0; i--) {
            scanner.unread();
          }
        }
 else {
          scanner.unread();
        }
        return Token.UNDEFINED;
      }
    }
;
    rules.add(parameterRule);
  }
  IRule[] result=new IRule[rules.size()];
  rules.toArray(result);
  setRules(result);
}
