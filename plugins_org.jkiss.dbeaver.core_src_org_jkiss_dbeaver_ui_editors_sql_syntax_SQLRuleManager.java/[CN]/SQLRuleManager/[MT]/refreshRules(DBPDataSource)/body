{
  final IToken keywordToken=new Token(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_KEYWORD),null,SWT.BOLD));
  final IToken typeToken=new Token(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_DATATYPE),null,SWT.BOLD));
  final IToken stringToken=new Token(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_STRING),null,SWT.NORMAL));
  final IToken quotedToken=new Token(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_DATATYPE),null,SWT.NORMAL));
  final IToken numberToken=new Token(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_NUMBER),null,SWT.NORMAL));
  final IToken commentToken=new SQLCommentToken(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_COMMENT),null,SWT.NORMAL));
  final SQLDelimiterToken delimiterToken=new SQLDelimiterToken(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_DELIMITER,SWT.COLOR_RED),null,SWT.NORMAL));
  final SQLParameterToken parameterToken=new SQLParameterToken(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_PARAMETER,SWT.COLOR_DARK_BLUE),null,SWT.BOLD));
  final IToken otherToken=new Token(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_TEXT),null,SWT.NORMAL));
  final SQLBlockHeaderToken blockHeaderToken=new SQLBlockHeaderToken(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_KEYWORD),null,SWT.BOLD));
  final SQLBlockBeginToken blockBeginToken=new SQLBlockBeginToken(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_KEYWORD),null,SWT.BOLD));
  final SQLBlockEndToken blockEndToken=new SQLBlockEndToken(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_KEYWORD),null,SWT.BOLD));
  final SQLBlockToggleToken blockToggleToken=new SQLBlockToggleToken(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_DELIMITER),null,SWT.BOLD));
  setDefaultReturnToken(otherToken);
  List<IRule> rules=new ArrayList<>();
  SQLDialect dialect=syntaxManager.getDialect();
  for (  String lineComment : dialect.getSingleLineComments()) {
    if (lineComment.startsWith("^")) {
      rules.add(new LineCommentRule(lineComment,commentToken));
    }
 else {
      rules.add(new EndOfLineRule(lineComment,commentToken));
    }
  }
  char escapeChar=syntaxManager.getEscapeChar();
  String quoteSymbol=syntaxManager.getQuoteSymbol();
  if (quoteSymbol != null) {
    rules.add(new SingleLineRule(quoteSymbol,quoteSymbol,quotedToken,escapeChar));
  }
  if (quoteSymbol == null || !quoteSymbol.equals(SQLConstants.STR_QUOTE_SINGLE)) {
    rules.add(new NestedMultiLineRule(SQLConstants.STR_QUOTE_SINGLE,SQLConstants.STR_QUOTE_SINGLE,stringToken,escapeChar));
  }
  if (quoteSymbol == null || !quoteSymbol.equals(SQLConstants.STR_QUOTE_DOUBLE)) {
    rules.add(new SingleLineRule(SQLConstants.STR_QUOTE_DOUBLE,SQLConstants.STR_QUOTE_DOUBLE,quotedToken,escapeChar));
  }
  Pair<String,String> multiLineComments=dialect.getMultiLineComments();
  if (multiLineComments != null) {
    rules.add(new MultiLineRule(multiLineComments.getFirst(),multiLineComments.getSecond(),commentToken,(char)0,true));
  }
  rules.add(new WhitespaceRule(new TextWhiteSpaceDetector()));
  rules.add(new NumberRule(numberToken));
  DelimiterRule delimRule=new DelimiterRule(syntaxManager.getStatementDelimiters(),delimiterToken);
  rules.add(delimRule);
{
    String delimRedefine=dialect.getScriptDelimiterRedefiner();
    if (!CommonUtils.isEmpty(delimRedefine)) {
      final SQLSetDelimiterToken setDelimiterToken=new SQLSetDelimiterToken(new TextAttribute(getColor(SQLConstants.CONFIG_COLOR_COMMAND),null,SWT.BOLD));
      rules.add(new SetDelimiterRule(delimRedefine,setDelimiterToken,delimRule));
    }
  }
  WordRule wordRule=new WordRule(new SQLWordDetector(),otherToken,true);
  for (  String reservedWord : dialect.getReservedWords()) {
    wordRule.addWord(reservedWord,keywordToken);
  }
  for (  String function : dialect.getFunctions(dataSource)) {
    wordRule.addWord(function,typeToken);
  }
  for (  String type : dialect.getDataTypes(dataSource)) {
    wordRule.addWord(type,typeToken);
  }
  final String blockHeaderString=dialect.getBlockHeaderString();
  if (!CommonUtils.isEmpty(blockHeaderString)) {
    wordRule.addWord(blockHeaderString,blockHeaderToken);
  }
  wordRule.addWord(SQLConstants.BLOCK_BEGIN,blockBeginToken);
  wordRule.addWord(SQLConstants.BLOCK_END,blockEndToken);
  rules.add(wordRule);
  final String blockToggleString=dialect.getBlockToggleString();
  if (!CommonUtils.isEmpty(blockToggleString)) {
    WordRule blockToggleRule=new WordRule(getWordOrSymbolDetector(blockToggleString),Token.UNDEFINED,true);
    blockToggleRule.addWord(blockToggleString,blockToggleToken);
    rules.add(blockToggleRule);
  }
  rules.add(new ParametersRule(parameterToken));
  IRule[] result=new IRule[rules.size()];
  rules.toArray(result);
  setRules(result);
}
