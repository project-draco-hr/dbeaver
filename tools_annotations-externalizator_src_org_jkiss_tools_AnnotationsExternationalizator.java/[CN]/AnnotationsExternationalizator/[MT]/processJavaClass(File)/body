{
  String javaFileName=javaFile.getName();
  String packageName=null;
  String className=javaFileName.substring(0,javaFileName.length() - 5);
  String[] lines=readLines(javaFile);
  boolean hasChanges=false;
  for (int i=0; i < lines.length; i++) {
    String line=lines[i];
    String trimLine=line.trim();
    if (trimLine.startsWith(PACKAGE_PREFIX)) {
      int prefixLength=PACKAGE_PREFIX.length();
      packageName=trimLine.substring(prefixLength,trimLine.indexOf(";",prefixLength));
    }
    if (trimLine.startsWith(PROPERTY_PREFIX) && trimLine.contains(NAME_SUFFIX)) {
      System.out.println(counter++ + ": " + trimLine);
      int nameValueIndex=trimLine.indexOf(NAME_SUFFIX) + NAME_SUFFIX.length();
      String namePropertyValue=trimLine.substring(nameValueIndex,trimLine.indexOf("\"",nameValueIndex));
      lines[i]=line.substring(0,line.indexOf("name = ")) + line.substring(line.indexOf(", ",line.indexOf("name = ")) + 2,line.length());
      line=lines[i];
      String methodName=null;
      for (int k=i; k < lines.length; k++) {
        String l=lines[k];
        String trimL=l.trim();
        int indexGet=trimL.indexOf("get");
        if (indexGet < 0) {
          indexGet=trimL.indexOf(" is");
        }
        int indexBrackets=trimL.indexOf("()");
        int index=indexGet < indexBrackets ? indexGet : indexBrackets;
        if (trimL.startsWith(PUBLIC_PREFIX) && index > 0) {
          methodName=trimL.substring(indexGet + 3,trimL.indexOf("("));
          methodName=Character.toLowerCase(methodName.charAt(0)) + methodName.substring(1);
          break;
        }
      }
      System.out.println("meta." + packageName + "."+ className+ "."+ methodName+ ".name="+ namePropertyValue);
      String descrPropertyValue=null;
      int descrIndex=line.indexOf(DESCRIPTION_SUFFIX);
      if (descrIndex > 0) {
        int beginIndex=descrIndex + DESCRIPTION_SUFFIX.length();
        int endIndex=line.indexOf("\"",beginIndex);
        descrPropertyValue=line.substring(beginIndex,endIndex);
        lines[i]=line.substring(0,descrIndex) + line.substring(endIndex,line.length());
      }
      System.out.println("meta." + packageName + "."+ className+ "."+ methodName+ ".description="+ descrPropertyValue);
      System.out.println(lines[i]);
      System.out.println("");
      pluginPropertiesWriter.write("\nmeta." + packageName + "."+ className+ "."+ methodName+ ".name="+ namePropertyValue);
      if (descrPropertyValue != null) {
        pluginPropertiesWriter.write("\nmeta." + packageName + "."+ className+ "."+ methodName+ ".description="+ descrPropertyValue);
      }
      hasChanges=true;
    }
  }
  if (hasChanges) {
    FileWriter javaClassWriter=null;
    try {
      javaClassWriter=new FileWriter(javaFile);
      for (      String line : lines) {
        javaClassWriter.write(line + "\n");
      }
    }
  finally {
      javaClassWriter.close();
    }
  }
}
