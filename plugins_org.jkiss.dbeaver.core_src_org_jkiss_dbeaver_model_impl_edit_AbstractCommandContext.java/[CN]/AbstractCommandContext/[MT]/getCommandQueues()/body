{
  if (commandQueues != null) {
    return commandQueues;
  }
  commandQueues=new ArrayList<CommandQueue>();
  CommandInfo aggregator=null;
  for (  CommandInfo commandInfo : commands) {
    if (commandInfo.command instanceof DBECommandAggregator) {
      aggregator=commandInfo;
    }
    DBPObject object=commandInfo.command.getObject();
    CommandQueue queue=null;
    if (!commandQueues.isEmpty()) {
      for (      CommandQueue tmpQueue : commandQueues) {
        if (tmpQueue.getObject() == object) {
          queue=tmpQueue;
          break;
        }
      }
    }
    if (queue == null) {
      queue=new CommandQueue(null,object);
      commandQueues.add(queue);
    }
    queue.addCommand(commandInfo);
  }
  for (  CommandQueue queue : commandQueues) {
    final Map<DBECommand,CommandInfo> mergedByMap=new IdentityHashMap<DBECommand,CommandInfo>();
    final List<CommandInfo> mergedCommands=new ArrayList<CommandInfo>();
    for (int i=0; i < queue.commands.size(); i++) {
      CommandInfo lastCommand=queue.commands.get(i);
      lastCommand.mergedBy=null;
      CommandInfo firstCommand=null;
      DBECommand<?> result=lastCommand.command;
      if (mergedCommands.isEmpty()) {
        result=lastCommand.command.merge(null,userParams);
      }
 else {
        boolean skipCommand=false;
        for (int k=mergedCommands.size(); k > 0; k--) {
          firstCommand=mergedCommands.get(k - 1);
          result=lastCommand.command.merge(firstCommand.command,userParams);
          if (result == null) {
            mergedCommands.remove(firstCommand);
            skipCommand=true;
          }
 else           if (result != lastCommand.command) {
            break;
          }
        }
        if (skipCommand) {
          continue;
        }
      }
      mergedCommands.add(lastCommand);
      if (result == lastCommand.command) {
      }
 else       if (firstCommand != null && result == firstCommand.command) {
        lastCommand.mergedBy=firstCommand;
      }
 else {
        CommandInfo mergedBy=mergedByMap.get(result);
        if (mergedBy == null) {
          for (int k=i; k >= 0; k--) {
            if (queue.commands.get(k).command == result) {
              mergedBy=queue.commands.get(k);
              break;
            }
          }
          if (mergedBy == null) {
            mergedBy=new CommandInfo(result,null);
          }
          mergedByMap.put(result,mergedBy);
        }
        lastCommand.mergedBy=mergedBy;
        if (!mergedCommands.contains(mergedBy)) {
          mergedCommands.add(mergedBy);
        }
      }
    }
    queue.commands=mergedCommands;
  }
  for (  CommandQueue queue : commandQueues) {
    if (queue.objectManager instanceof DBECommandFilter) {
      ((DBECommandFilter)queue.objectManager).filterCommands(queue);
    }
  }
  if (aggregator != null) {
    ((DBECommandAggregator)aggregator.command).resetAggregatedCommands();
    for (    CommandQueue queue : commandQueues) {
      for (      CommandInfo cmd : queue.commands) {
        if (cmd.command != aggregator.command && cmd.mergedBy == null && ((DBECommandAggregator)aggregator.command).aggregateCommand(cmd.command)) {
          cmd.mergedBy=aggregator;
        }
      }
    }
  }
  return commandQueues;
}
