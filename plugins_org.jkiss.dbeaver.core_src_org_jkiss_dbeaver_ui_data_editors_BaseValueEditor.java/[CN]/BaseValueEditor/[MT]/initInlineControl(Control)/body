{
  boolean isInline=(valueController.getEditType() == IValueController.EditType.INLINE);
  if (isInline && UIUtils.isInDialog(inlineControl)) {
  }
  UIUtils.enableHostEditorKeyBindingsSupport(valueController.getValueSite(),inlineControl);
  final IContextService contextService=valueController.getValueSite().getService(IContextService.class);
  inlineControl.addFocusListener(new FocusListener(){
    private IContextActivation activationEditor;
    @Override public void focusGained(    FocusEvent e){
      if (contextService != null) {
        activationEditor=contextService.activateContext(RESULTS_EDIT_CONTEXT_ID);
      }
    }
    @Override public void focusLost(    FocusEvent e){
      contextService.deactivateContext(activationEditor);
      activationEditor=null;
    }
  }
);
  if (isInline) {
    inlineControl.setFont(valueController.getEditPlaceholder().getFont());
    inlineControl.getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (!inlineControl.isDisposed()) {
          inlineControl.setFocus();
        }
      }
    }
);
    if (valueController instanceof IMultiController) {
      inlineControl.addTraverseListener(new TraverseListener(){
        @Override public void keyTraversed(        TraverseEvent e){
          if (e.detail == SWT.TRAVERSE_RETURN) {
            saveValue();
            e.doit=false;
            e.detail=SWT.TRAVERSE_NONE;
          }
 else           if (e.detail == SWT.TRAVERSE_ESCAPE) {
            ((IMultiController)valueController).closeInlineEditor();
            e.doit=false;
            e.detail=SWT.TRAVERSE_NONE;
          }
 else           if (e.detail == SWT.TRAVERSE_TAB_NEXT || e.detail == SWT.TRAVERSE_TAB_PREVIOUS) {
            saveValue();
            ((IMultiController)valueController).nextInlineEditor(e.detail == SWT.TRAVERSE_TAB_NEXT);
            e.doit=false;
            e.detail=SWT.TRAVERSE_NONE;
          }
        }
      }
);
      if (!UIUtils.isInDialog(inlineControl)) {
        inlineControl.addFocusListener(new FocusListener(){
          @Override public void focusGained(          FocusEvent e){
          }
          @Override public void focusLost(          FocusEvent e){
            inlineControl.getDisplay().asyncExec(new Runnable(){
              @Override public void run(){
                if (inlineControl.isDisposed()) {
                  return;
                }
                Control newFocus=inlineControl.getDisplay().getFocusControl();
                if (newFocus != null) {
                  for (Control fc=newFocus.getParent(); fc != null; fc=fc.getParent()) {
                    if (fc == valueController.getEditPlaceholder()) {
                      return;
                    }
                  }
                }
                if (!valueController.isReadOnly()) {
                  saveValue();
                }
 else {
                  ((IMultiController)valueController).closeInlineEditor();
                }
              }
            }
);
          }
        }
);
      }
    }
  }
  control.addListener(SWT.Modify,new ControlModifyListener());
}
