{
  long startTime=System.currentTimeMillis();
  log.debug("Initialize Core...");
{
    try {
      final java.nio.file.Path tempDirectory=Files.createTempDirectory(TEMP_PROJECT_NAME);
      tempFolder=tempDirectory.toFile();
    }
 catch (    IOException e) {
      final String sysTempFolder=System.getProperty("java.io.tmpdir");
      if (!CommonUtils.isEmpty(sysTempFolder)) {
        tempFolder=new File(sysTempFolder,TEMP_PROJECT_NAME);
        if (!tempFolder.mkdirs()) {
          final String sysUserFolder=System.getProperty("user.home");
          if (!CommonUtils.isEmpty(sysUserFolder)) {
            tempFolder=new File(sysUserFolder,TEMP_PROJECT_NAME);
            if (!tempFolder.mkdirs()) {
              tempFolder=new File(TEMP_PROJECT_NAME);
              if (!tempFolder.mkdirs()) {
                log.error("Can't create temp directory!");
              }
            }
          }
        }
      }
    }
  }
  this.workspace=ResourcesPlugin.getWorkspace();
  this.localSystem=new OSDescriptor(Platform.getOS(),Platform.getOSArch());
  QMUtils.initApplication(this);
  this.queryManager=new QMControllerImpl();
  this.qmLogWriter=new QMLogFileWriter();
  this.queryManager.registerMetaListener(qmLogWriter);
  Authenticator.setDefault(new GlobalProxyAuthenticator());
  ProxySelector.setDefault(new GlobalProxySelector(ProxySelector.getDefault()));
  this.projectRegistry=new ProjectRegistry(workspace);
  initializeProjects();
  this.navigatorModel=new DBNModel(this);
  this.navigatorModel.initialize();
  for (  IPluginService pluginService : PluginServiceRegistry.getInstance().getServices()) {
    try {
      pluginService.activateService();
      activatedServices.add(pluginService);
    }
 catch (    Throwable e) {
      log.error("Error activating plugin service",e);
    }
  }
  log.debug("Core initialized (" + (System.currentTimeMillis() - startTime) + "ms)");
}
