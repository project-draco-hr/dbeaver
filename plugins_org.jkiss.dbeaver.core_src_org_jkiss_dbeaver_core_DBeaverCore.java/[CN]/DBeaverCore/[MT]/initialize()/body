{
  long startTime=System.currentTimeMillis();
  log.debug("Initialize Core...");
  this.workspace=ResourcesPlugin.getWorkspace();
  this.localSystem=new OSDescriptor(Platform.getOS(),Platform.getOSArch());
  if (standalone) {
    DBeaverInstanceServer.startInstanceServer();
  }
  QMUtils.initApplication(this);
  this.queryManager=new QMControllerImpl();
  this.qmLogWriter=new QMLogFileWriter();
  this.queryManager.registerMetaListener(qmLogWriter);
  Authenticator.setDefault(new GlobalProxyAuthenticator());
  ProxySelector.setDefault(new GlobalProxySelector(ProxySelector.getDefault()));
  this.securityManager=new DefaultSecurityManager(new File(DBeaverActivator.getInstance().getStateLocation().toFile(),"security"));
  this.projectRegistry=new ProjectRegistry(workspace);
  initializeProjects();
  this.navigatorModel=new DBNModel(this);
  this.navigatorModel.initialize();
  for (  IPluginService pluginService : PluginServiceRegistry.getInstance().getServices()) {
    try {
      pluginService.activateService();
      activatedServices.add(pluginService);
    }
 catch (    Throwable e) {
      log.error("Error activating plugin service",e);
    }
  }
  new KeepAliveJob().scheduleMonitor();
  log.debug("Core initialized (" + (System.currentTimeMillis() - startTime) + "ms)");
}
