{
  if (connection != null) {
    log.error("Reopening not-closed connection");
    close();
  }
  boolean connectionReadOnly=dataSource.getContainer().isConnectionReadOnly();
  ACTIVE_CONTEXT.set(this);
  try {
    this.connection=dataSource.openConnection(monitor,purpose);
    if (this.connection == null) {
      throw new DBCException("Null connection returned");
    }
    if (autoCommit == null) {
      autoCommit=dataSource.getContainer().isDefaultAutoCommit();
    }
    if (txnLevel == null) {
      txnLevel=dataSource.getContainer().getDefaultTransactionsIsolation();
    }
    try {
      connection.setAutoCommit(autoCommit);
      this.autoCommit=autoCommit;
    }
 catch (    Throwable e) {
      log.warn("Can't set auto-commit state",e);
    }
{
      try {
        this.autoCommit=connection.getAutoCommit();
      }
 catch (      Throwable e) {
        log.warn("Can't check auto-commit state",e);
        this.autoCommit=false;
      }
    }
    if (!this.autoCommit && txnLevel != null) {
      try {
        connection.setTransactionIsolation(txnLevel);
        this.transactionIsolationLevel=txnLevel;
      }
 catch (      Throwable e) {
        log.warn("Can't set transaction isolation level",e);
      }
    }
    try {
      this.initContextBootstrap(monitor,autoCommit);
    }
 catch (    DBCException e) {
      log.error("Error while running context bootstrap",e);
    }
    try {
      this.dataSource.initializeContextState(monitor,this,forceActiveObject && !connectionReadOnly);
    }
 catch (    DBCException e) {
      log.error("Error while initializing context state",e);
    }
    this.dataSource.allContexts.add(this);
  }
  finally {
    ACTIVE_CONTEXT.remove();
  }
}
