{
  OBJECT_TYPE foreignKey=command.getObject();
  boolean legacySyntax=isLegacyForeignKeySyntax(owner);
  String constraintName=DBUtils.getQuotedIdentifier(foreignKey.getDataSource(),foreignKey.getName());
  StringBuilder decl=new StringBuilder(40);
  if (!legacySyntax || !foreignKey.isPersisted()) {
    decl.append("CONSTRAINT ");
  }
  if (!legacySyntax) {
    decl.append(constraintName).append(" ");
  }
  decl.append(foreignKey.getConstraintType().getName().toUpperCase()).append(" (");
  try {
    final Collection<? extends DBSEntityAttributeRef> columns=command.getObject().getAttributeReferences(VoidProgressMonitor.INSTANCE);
    boolean firstColumn=true;
    for (    DBSEntityAttributeRef constraintColumn : CommonUtils.safeCollection(columns)) {
      if (!firstColumn)       decl.append(",");
      firstColumn=false;
      decl.append(constraintColumn.getAttribute().getName());
    }
  }
 catch (  DBException e) {
    log.error("Can't obtain reference attributes",e);
  }
  decl.append(") REFERENCES ").append(foreignKey.getReferencedConstraint().getParentObject().getFullQualifiedName()).append("(");
  try {
    boolean firstColumn=true;
    List<? extends DBSEntityAttributeRef> columns=foreignKey.getReferencedConstraint().getAttributeReferences(VoidProgressMonitor.INSTANCE);
    for (    DBSEntityAttributeRef constraintColumn : CommonUtils.safeCollection(columns)) {
      if (!firstColumn)       decl.append(",");
      firstColumn=false;
      decl.append(constraintColumn.getAttribute().getName());
    }
  }
 catch (  DBException e) {
    log.error("Can't obtain ref constraint reference attributes",e);
  }
  decl.append(")");
  if (foreignKey.getDeleteRule() != null && !CommonUtils.isEmpty(foreignKey.getDeleteRule().getClause())) {
    decl.append(" ON DELETE ").append(foreignKey.getDeleteRule().getClause());
  }
  if (foreignKey.getUpdateRule() != null && !CommonUtils.isEmpty(foreignKey.getUpdateRule().getClause())) {
    decl.append(" ON UPDATE ").append(foreignKey.getUpdateRule().getClause());
  }
  if (legacySyntax) {
    decl.append(" CONSTRAINT ").append(constraintName);
  }
  return decl;
}
